{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../src/EventTrigger.ts","../src/easing.ts","../src/PropertyObject.ts","../src/utils.ts","../src/Animator.ts","../src/utils/color.ts","../src/utils/property.ts","../src/Frame.ts","../src/Keyframes.ts","../src/utils/dot.ts","../src/utils/css.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["export type Role = true | RoleInterface;\nexport interface RoleInterface {\n  [role: string]: Role;\n}\nexport interface ObjectInterface<T> {\n  [name: string]: T;\n}\nexport type NameType = string | number;\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const timingFunction = \"animation-timing-function\";\nexport const ROLES: RoleInterface = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: ObjectInterface<string[]> = { easing: [\"animation-timing-function\"] };\nexport const FIXED = { \"animation-timing-function\": true, \"contents\": true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\ntype OptionType = [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"];\ntype EventType = [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const RGBA = \"rgba\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n\nconst prefixes: string[] = [\"webkit\", \"ms\", \"moz\", \"o\"];\nconst checkProperties = (property: string) => {\n  const styles = (document.body || document.documentElement).style as any;\n  const length = prefixes.length;\n\n  if (typeof styles[property] !== \"undefined\") {\n    return property;\n  }\n  for (let i = 0; i < length; ++i) {\n    const name = `-${prefixes[i]}-${property}`;\n\n    if (typeof styles[name] !== \"undefined\") {\n      return name;\n    }\n  }\n  return \"\";\n};\n\nexport const TRANSFORM = /*#__PURE__*/checkProperties(\"transform\");\nexport const FILTER = /*#__PURE__*/checkProperties(\"filter\");\nexport const ANIMATION = /*#__PURE__*/checkProperties(\"animation\");\nexport const KEYFRAMES = /*#__PURE__*/ANIMATION.replace(\"animation\", \"keyframes\");\n","type CallbackType = (...args: any[]) => any;\ninterface EventParamterType {\n  [name: string]: CallbackType | CallbackType[];\n}\n/**\n* attach and trigger event handlers.\n* @memberof Scene\n*/\nclass EventTrigger {\n  private events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n\t*/\n  public on(name: string | EventParamterType, callback?: CallbackType | CallbackType[]) {\n    const events = this.events;\n\n    if (typeof name === \"object\") {\n      for (const i in name) {\n        this.on(i, name[i]);\n      }\n      return this;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return this;\n    }\n    if (typeof callback === \"object\") {\n      callback.forEach(func => this.on(name, func));\n      return this;\n    }\n    const event = events[name];\n\n    event.push(callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param {String} name - event's name\n\t* @param {Function} [...data] - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const event = events[name];\n\n    if (data.length) {\n      const target = data[0];\n\n      target.type = name;\n      target.currentTarget = this;\n      !target.target && (target.target = this);\n    }\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n}\nexport default EventTrigger;\n","export interface EasingFunctionInterface extends Function {\n  easingName?: string;\n}\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunctionInterface = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunctionInterface = (time: number) => {\n    const level = 1 / count;\n\n    return (position === \"end\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","interface PropertyObjectInterface {\n  prefix?: string;\n  suffix?: string;\n  model?: string;\n  type?: string;\n  separator?: string;\n  [key: string]: any;\n}\n/**\n* Make string, array to PropertyObject for the dot product\n* @memberof Scene\n*/\nclass PropertyObject {\n  public value: any[];\n  public options: PropertyObjectInterface;\n\n  /**\n\t* @param {String|Array} value - This value is in the array format ..\n\t* @param {String} separator - Array separator.\n\t* @example\nvar obj1 = new PropertyObject(\"1,2,3\", \",\");\nvar obj2 = new PropertyObject([1,2,3], \" \");\nvar obj3 = new PropertyObject(\"1$2$3\", \"$\");\n\n// rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options: PropertyObjectInterface = {}) {\n    this.options = {\n      prefix: \"\",\n      suffix: \"\",\n      model: \"\",\n      type: \"\",\n      separator: \",\",\n    };\n    this.setOptions(options);\n    this.init(value);\n  }\n  public setOptions(options: PropertyObjectInterface) {\n    (Object as any).assign(this.options, options);\n    return this;\n  }\n  public getOption(name: string) {\n    return this.options[name];\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n\n    return new PropertyObject(arr, {\n      separator: this.options.separator,\n      prefix: this.options.prefix,\n      suffix: this.options.suffix,\n      model: this.options.model,\n      type: this.options.type,\n    });\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.options.prefix + this.join() + this.options.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.options.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n  private init(value: string | any[]) {\n    const type = typeof value;\n\n    if (type === \"string\") {\n      this.value = (value as string).split(this.options.separator);\n    } else if (type === \"object\") {\n      this.value = (value as any[]);\n    } else {\n      this.value = [value];\n    }\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, ObjectInterface, MAXIMUM, FIXED, ALIAS } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\n\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === \"object\") {\n    if (isArray(value)) {\n      return \"array\";\n    } else if (value instanceof PropertyObject) {\n      return \"property\";\n    }\n  } else if (type === \"string\" || type === \"number\") {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function isInProperties(roles: ObjectInterface<any>, args: any[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: any[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: any[]) {\n  return isInProperties(FIXED, args, true);\n}\nexport function isUndefined(value: any): value is undefined {\n  return (typeof value === \"undefined\");\n}\nexport function isObject(value: any): value is ObjectInterface<any> {\n  return value && (typeof value === \"object\");\n}\nexport function isArray(value: any): value is any[] {\n  return Array.isArray(value);\n}\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\nexport function has(object: object, name: string) {\n  return Object.prototype.hasOwnProperty.call(object, name);\n}\nexport function splitUnit(text: string) {\n  const matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return { prefix: \"\", unit: \"\", value: NaN };\n  }\n  const prefix = matches[1];\n  const value = matches[2];\n  const unit = matches[3];\n\n  return { prefix, unit, value: parseFloat(value) };\n}\n// export function camelize(str: string) {\n// \treturn str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n// }\nexport function decamelize(str: string) {\n  return str.replace(/([a-z])([A-Z])/g, (all, letter, letter2) => `${letter}-${letter2.toLowerCase()}`);\n}\n","import {\n  ObjectInterface, THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED, RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE } from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, EasingFunctionInterface } from \"./easing\";\nimport { toFixed, isString, splitUnit } from \"./utils\";\n\nlet lastTime = 0;\nfunction camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\nconst requestAnimFrame = /*#__PURE__*/(() => {\n  return (window as any).requestAnimationFrame ||\n    (window as any).webkitRequestAnimationFrame ||\n    (window as any).mozRequestAnimationFrame ||\n    ((callback: (time: number) => void) => {\n      const currTime = Date.now();\n      const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      const id = window.setTimeout(() => {\n        callback(currTime + timeToCall);\n      }, 1000 / 60);\n      lastTime = currTime + timeToCall;\n      return id;\n    });\n})();\n\nexport type FillModeType = \"forwards\" | \"backwards\" | \"both\";\nexport type IterationCountType = number | \"infinite\";\nexport type EasingType = 0 | EasingFunctionInterface;\nexport type DirectionType = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\nexport type PlayStateType = \"paused\" | \"running\";\n\nexport interface StateInterface {\n  id?: string;\n  easing?: EasingType;\n  easingName?: string;\n  iterationCount?: IterationCountType;\n  delay?: number;\n  fillMode?: FillModeType;\n  direction?: DirectionType;\n  playSpeed?: number;\n  iterationTime?: number;\n  currentTime?: number;\n  tickTime?: number;\n  currentIterationCount?: number;\n  prevTime?: number;\n  playState?: PlayStateType;\n  duration?: number;\n  [key: string]: any;\n}\nexport function isDirectionReverse(iterationCount: number, direction: DirectionType) {\n  return direction === REVERSE ||\n    direction === (iterationCount % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorOptions The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n/**\n* play video, animation, the others\n* @memberof Scene\n* @class Animator\n* @extends Scene.EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n* @param {AnimatorOptions} [options] - animator's options\n* @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n*/\n\nconst setters = [ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n@GetterSetter(getters, setters, \"state\")\nclass Animator extends EventTrigger {\n  public state: StateInterface;\n  public options: ObjectInterface<any>;\n\n  constructor(options?: StateInterface) {\n    super();\n    this.options = {};\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      currentIterationCount: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    };\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @method Scene.Animator#setEasing\n\t* @param {array| function} curverArray - The speed curve of an animation.\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | EasingFunctionInterface): this {\n    const easing = Array.isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    this.setState({ easing, easingName });\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @method Scene.Animator#setOptions\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param {Object} [AnimatorOptions] - animator's options\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: StateInterface = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      ((name in this.state ? this.state : this.options) as StateInterface)[name] = value;\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @method Scene.Animator#getTotalDuration\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.state[DELAY] + this.getActiveDuration();\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @method Scene.Animator#getActiveDuration\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getActiveDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.getDuration() * (this.state[ITERATION_COUNT] as number);\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @method Scene.Animator#isEnded\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state.tickTime === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @method Scene.Animator#isPaused\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public setNext(animator: Animator): this {\n    this.on(ENDED, () => {\n      animator.play();\n    });\n    return this;\n  }\n  /**\n\t* play animator\n\t* @method Scene.Animator#play\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public play() {\n    this.state[PLAY_STATE] = RUNNING;\n    if (this.isEnded()) {\n      this.setTickTime(0);\n    }\n    this.state.tickTime = this.getTime();\n\n    requestAnimFrame((time: number) => {\n      this.state.prevTime = time;\n      this.tick(time);\n    });\n    /**\n\t\t * This event is fired when play animator.\n\t\t * @event Scene.Animator#play\n\t\t */\n    this.trigger(PLAY);\n\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @method Scene.Animator#pause\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public pause(): this {\n    this.state[PLAY_STATE] = PAUSED;\n    /**\n\t\t * This event is fired when animator is paused.\n\t\t * @event Scene.Animator#paused\n\t\t */\n    this.trigger(PAUSED);\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#end\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public end(): this {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Scene.Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* reset animator\n\t* @method Scene.Animator#reset\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public reset() {\n    this.state.tickTime = 0;\n    this.setTime(0);\n    this.pause();\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @method Scene.Animator#setTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    this.state.tickTime = this.state.delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    this.state.currentTime = currentTime;\n    this.calculateIterationTime();\n\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Scene.Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: this.getIterationCount(),\n    });\n\n    return this;\n  }\n  public getState(name: string): any {\n    return this.state[name];\n  }\n  public setState(object: StateInterface) {\n    for (const name in object) {\n      this.state[name] = object[name];\n    }\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @method Scene.Animator#getTime\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state.currentTime;\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state.duration = duration);\n        return parseFloat(time) / 100 * duration;\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @method Scene.Animator#isDelay\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const { delay, tickTime } = this.state;\n\n    return delay > 0 && (tickTime < delay);\n  }\n  protected setCurrentIterationCount(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n\n    if (state.currentIterationCount < passIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Scene.Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state.currentTime,\n        iterationCount: passIterationCount,\n      });\n    }\n    state.currentIterationCount = iterationCount;\n    return this;\n  }\n  protected calculateIterationTime() {\n    const { iterationCount, fillMode, direction } = this.state;\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const currentIterationCount = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setCurrentIterationCount(currentIterationCount);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(currentIterationCount, direction);\n\n    if (isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (currentIterationCount >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n  protected tick(now: number) {\n    const state = this.state;\n    const { playSpeed, prevTime } = state;\n    const currentTime = this.state.tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state.prevTime = now;\n    this.setTickTime(currentTime);\n    if (this.isEnded()) {\n      this.end();\n      return;\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n\n    requestAnimFrame((time: number) => {\n      this.tick(time);\n    });\n  }\n  private setTickTime(time: number) {\n    this.setTime(time - this.state.delay, true);\n  }\n}\n\n/**\n * Get a delay for the start of an animation.\n * @method Scene.Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Scene.Animator#setDelay\n * @param {number} delay - delay\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#getFillMode\n * @return {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#setFillMode\n * @param {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode - fillMode\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Scene.Animator#getIterationCount\n * @return {\"inifnite\"|number} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Scene.Animator#setIterationCount\n * @param {\"inifnite\"|number} iterationCount - iterationCount\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#getDirection\n * @return {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#setDirection\n * @param {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction - direction\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Scene.Animator#getPlayState\n * @return {\"paused\"|\"running\"} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Scene.Animator#setPlayState\n * @param {\"paused\"|\"running\"} playState - playState\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Scene.Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Scene.Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Scene.Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Scene.Animator#setDuration\n * @param {number} duration - duration\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Scene.Animator#getEasing\n * @return {0|function} easing\n */\n/**\n * Get the speed curve's name\n * @method Scene.Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Scene.Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\ninterface Animator {\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: IterationCountType): this;\n  getDirection(): IterationCountType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","import { RGBA } from \"../consts\";\n\n/**\n* @namespace\n* @name Color\n*/\nexport const COLOR_MODELS = [\"rgb\", RGBA, \"hsl\", \"hsla\"];\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {String} hex color\n* @example\nconsole.log(cutHex(\"#000000\"))\n// \"000000\"\n*/\nexport function cutHex(hex: string) {\n  return (hex.charAt(0) === \"#\") ? hex.substring(1) : hex;\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {Array} rgb color\n* @example\nconsole.log(hexToRGB(\"#000000\"));\n// [0, 0, 0]\nconsole.log(hexToRGB(\"#201045\"));\n// [32, 16, 69]\n*/\nexport function hexToRGB(hex: string) {\n  const h = cutHex(hex);\n  const r = parseInt(h.substring(0, 2), 16);\n  const g = parseInt(h.substring(2, 4), 16);\n  const b = parseInt(h.substring(4, 6), 16);\n  let a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n  return [r, g, b, a];\n}\n\n/**\n* convert 3-digit hex color to 6-digit hex color.\n* @memberof Color\n* @param {String} hex - 3-digit hex color\n* @return {String} 6-digit hex color\n* @example\nconsole.log(hex3to6(\"#123\"));\n// \"#112233\"\n*/\nexport function hex3to6(h: string) {\n  const r = h.charAt(1);\n  const g = h.charAt(2);\n  const b = h.charAt(3);\n  const arr = [\"#\", r, r, g, g, b, b];\n\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgb color.\n* @memberof Color\n* @param {Array} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1)\n* @return {Array} rgb color\n* @example\nconsole.log(hslToRGB([150, 0.5, 0.4]));\n// [51, 153, 102]\n*/\nexport function hslToRGB(hsl: number[]) {\n  let h = hsl[0];\n  const s = hsl[1];\n  const l = hsl[2];\n\n  if (h < 0) {\n    h +=  Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n  h %= 360;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n  const m = l - c / 2;\n  let rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n  const result = [\n    Math.round((rgb[0] + m) * 255),\n    Math.round((rgb[1] + m) * 255),\n    Math.round((rgb[2] + m) * 255),\n  ];\n\n  if (hsl.length > 3) {\n    result[3] = hsl[3];\n  }\n  return result;\n}\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {COLOR_MODELS, hexToRGB, hex3to6, hslToRGB} from \"./color\";\nimport {isString, isArray} from \"../utils\";\nimport { ObjectInterface, RGBA } from \"../consts\";\n\n/**\n* divide text by space.\n* @memberof Property\n* @function splitSpace\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitSpace(text: string) {\n  // divide comma(,)\n  const matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Property\n* @function splitComma\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitComma(text: string) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  const matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n\n  return matches ? matches.map(str => str.trim()) : [];\n}\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const length = properties.length;\n  const obj = [];\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      continue;\n    }\n    obj.push({[matches[1].trim()]: toPropertyObject(matches[2].trim())});\n  }\n  return obj;\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n\t* convert text with parentheses to PropertyObject[type=color].\n\t* If the values are not RGBA model, change them RGBA mdoel.\n\t* @memberof Property\n\t* @function toColorObject\n\t* @param {String|PropertyObject} value - color value \"rgba(0,0,0,1)\"\n\t* @return {PropertyObject} PropertyObject[type=color]\n\t* @example\ntoColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function toColorObject(value: PropertyObject | number[] | string) {\n  let colorObject;\n\n  if (value instanceof PropertyObject) {\n    colorObject = value;\n  } else if (isArray(value)) {\n    colorObject = arrayToColorObject(value);\n  } else if (isString(value)) {\n    return stringToColorObject(value);\n  }\n  let colorArray = colorObject.value;\n  const length = colorArray.length;\n\n  if (length === 4) {\n    colorArray[3] = parseFloat(colorArray[3]);\n  } else if (length === 3) {\n    colorArray[3] = 1;\n  }\n  colorObject.setOptions({type: \"color\"});\n  const colorModel = colorObject.getOption(\"model\").toLowerCase();\n\n  // rgb hsl model to CHANGE rgba hsla\n  // string -> number\n  if (colorModel === \"rgb\") {\n    colorObject.setOptions({\n      type: \"color\",\n      model: RGBA,\n      prefix: `${RGBA}(`,\n      suffix: \")\",\n    });\n  }\n  switch (colorModel) {\n    case \"rgb\":\n    case RGBA:\n      for (let i = 0; i < 3; ++i) {\n        colorArray[i] = parseInt(colorArray[i], 10);\n      }\n      break;\n    case \"hsl\":\n    case \"hsla\":\n      for (let i = 1; i < 3; ++i) {\n        if (colorArray[i].indexOf(\"%\") !== -1) {\n          colorArray[i] = parseFloat(colorArray[i]) / 100;\n        }\n      }\n      // hsl, hsla to rgba\n      colorArray = hslToRGB(colorArray);\n      return arrayToColorObject(colorArray);\n    default:\n  }\n  return colorObject;\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(value: string) {\n  // [prefix, value, other]\n  const matches = (/([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g).exec(value);\n\n  if (!matches || matches.length < 4) {\n    return value;\n  }\n  const model = matches[1] || \"\";\n  const text = matches[2];\n  let prefix = `${model}(`;\n  let suffix = `)${matches[3]}`;\n  let separator = \",\";\n  let values;\n  // divide comma(,)\n  const obj = toPropertyObject(text);\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.getOption(\"separator\");\n    values = obj.value;\n    prefix += obj.getOption(\"prefix\");\n    suffix = obj.getOption(\"suffix\") + suffix;\n  } else {\n    values = [text];\n  }\n  const result = new PropertyObject(values, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return toColorObject(result);\n  } else {\n    return result;\n  }\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  let colorArray: number[];\n\n  if (value.charAt(0) === \"#\") {\n    if (value.length === 4) {\n      colorArray = hexToRGB(hex3to6(value));\n    } else {\n      colorArray = hexToRGB(value);\n    }\n    return arrayToColorObject(colorArray);\n  } else if (value.indexOf(\"(\") !== -1) {\n    // in bracket.\n    return stringToBracketObject(value);\n  } else {\n    throw new Error(`Invalid Format : Not a Color - ${value}`);\n  }\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: string | ObjectInterface<any> | any[]): any {\n  if (!isString(value)) {\n    if (Array.isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: ObjectInterface<any> = {}) {\n  const model = object.getOption(\"model\");\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => toObject(obj, result));\n  }\n  return result;\n}\n","import {TRANSFORM, FILTER, ObjectInterface, NameType, ANIMATION, timingFunction, ALIAS} from \"./consts\";\nimport {isObject, isString, isArray, isRole, getType} from \"./utils\";\nimport {toPropertyObject, splitStyle, toObject} from \"./utils/property\";\nimport PropertyObject from \"./PropertyObject\";\n\nfunction toInnerProperties(obj: ObjectInterface<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\nfunction isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\n/* eslint-disable */\nfunction clone(target: ObjectInterface<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: ObjectInterface<any>, from: ObjectInterface<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === \"property\") {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === \"array\") {\n      to[name] = value.slice();\n    } else if (type === \"object\") {\n      if (isObject(to[name]) && !(to[name] instanceof PropertyObject)) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n/**\n* Animation's Frame\n* @class Scene.Frame\n* @param {Object} properties - properties\n* @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n */\nclass Frame {\n  public properties: ObjectInterface<any>;\n  constructor(properties: ObjectInterface<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @method Scene.Frame#get\n\t* @param {...Number|String|Scene.PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n    const type = getType(value);\n\n    if (type === \"property\") {\n      return value.toValue();\n    } else if (type === \"object\") {\n      return clone(value, true);\n    } else {\n      return value;\n    }\n  }\n\n  public raw(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties)) {\n        return undefined;\n      }\n      properties = properties[params[i]];\n    }\n    return properties;\n  }\n  /**\n\t* remove property value\n\t* @method Scene.Frame#remove\n\t* @param {...String} args - property name\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length - 1; ++i) {\n      if (!isObject(properties)) {\n        return this;\n      }\n      properties = properties[params[i]];\n    }\n    delete properties[params[length - 1]];\n    return this;\n  }\n  /**\n\t* set property\n\t* @method Scene.Frame#set\n\t* @param {...Number|String|Scene.PropertyObject} args - property names or values\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n\t*/\n  public set(...args: any[]) {\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      this._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      this._set(params[0], value);\n    } else if (isObject(value)) {\n      if (isArray(value)) {\n        this._set(params, value);\n      } else if (isPropertyObject(value)) {\n        if (isRole(params)) {\n          this.set(...params, toObject(value));\n        } else {\n          this._set(params, value);\n        }\n      } else if (value instanceof Frame) {\n        this.merge(value);\n      } else {\n        for (const name in value) {\n          this.set(...params, name, value[name]);\n        }\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          this.set(...params, obj);\n        }\n        return this;\n      } else {\n        const styles = splitStyle(value);\n\n        styles.forEach(style => {\n          this.set(...params, style);\n        });\n        if (styles.length) {\n          return this;\n        }\n      }\n      this._set(params, value);\n    } else {\n      this._set(params, value);\n    }\n    return this;\n  }\n  /**\n\t* check that has property.\n\t* @method Scene.Frame#has\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties) || !(params[i] in properties)) {\n        return false;\n      }\n      properties = properties[params[i]];\n    }\n    return true;\n  }\n  /**\n\t* clone frame.\n\t* @method Scene.Frame#clone\n\t* @return {Scene.Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    frame.merge(this);\n    return frame;\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @method Scene.Frame#merge\n\t* @param {Scene.Frame} frame - target frame.\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  public toObject() {\n    return clone(this.properties, true);\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @method Scene.Frame#toCSSObject\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.toObject();\n    const cssObject: ObjectInterface<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === timingFunction) {\n        cssObject[timingFunction.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value.easingName) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties.transform);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @method Scene.Frame#toCSS\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","import { ObjectInterface, RoleInterface } from \"./consts\";\nimport { isObject, isArray, isInProperties, toFixed } from \"./utils\";\nimport PropertyObject from \"./PropertyObject\";\nimport Frame from \"./Frame\";\n\nfunction getNames(names: ObjectInterface<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  for (const name in names) {\n    stack.push(name);\n\n    if (isObject(names[name])) {\n      arr = arr.concat(getNames(names[name], stack));\n    } else {\n      arr.push(stack.slice());\n    }\n    stack.pop();\n  }\n  return arr;\n}\nfunction updateFrame(names: ObjectInterface<any>, properties: ObjectInterface<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isObject(value) || isArray(value) || value instanceof PropertyObject) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n}\n/**\n* a list of objects in chronological order.\n* @memberof Scene\n*/\nclass Keyframes {\n  public times: number[];\n  public items: ObjectInterface<any>;\n  public names: RoleInterface;\n  /**\n\t */\n  constructor() {\n    this.times = [];\n    this.items = {};\n    this.names = {};\n  }\n  /**\n\t* A list of names\n\t* @return {string[][]} names\n\t* @example\nkeyframes.getNames(); // [[\"a\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n\t*/\n  public getNames() {\n    const names = this.names;\n\n    return getNames(names, []);\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param {...string[]} name - property's time\n\t* @return {Boolean} true: if has property, false: not\n\t* @example\nkeyframes.hasName(\"transform\", \"translate\"); // true or not\n\t*/\n  public hasName(...args: string[]) {\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t * update property names used in frames.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public update() {\n    const items = this.items;\n\n    for (const time in items) {\n      this.updateFrame(items[time]);\n    }\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} callback Function to execute for each element, taking three arguments\n\t * @param {Scene.Frame} [callback.item] The value of the item being processed in the keyframes.\n\t * @param {string} [callback.time] The time of the item being processed in the keyframes.\n\t * @param {object} [callback.items] The object that forEach() is being applied to.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: any, time: number, items: ObjectInterface<any>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n  }\n  /**\n\t* update property names used in frame.\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.Keyframes} An instance itself\n\t* @example\nkeyframes.updateFrame(frame);\n\t*/\n  public updateFrame(frame: Frame) {\n    if (!frame) {\n      return this;\n    }\n    const properties = frame.properties;\n    const names = this.names;\n\n    updateFrame(names, properties);\n    return this;\n  }\n  /**\n\t * Get how long an animation should take to complete one cycle.\n\t * @return {number} duration\n\t */\n  public getDuration() {\n    const times = this.times;\n\n    return times.length === 0 ? 0 : times[times.length - 1];\n  }\n  /**\n\t * Set how long an animation should take to complete one cycle.\n\t * @param {number} duration - duration\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public setDuration(duration: number, originalDuration: number = this.getDuration()) {\n    const ratio = duration / originalDuration;\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(time => {\n      const time2 = toFixed(time * ratio);\n\n      obj[time2] = items[time];\n\n      return time2;\n    });\n    this.items = obj;\n  }\n  /**\n\t * Set how much time you want to push ahead.\n\t * @param {number} time - time\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  /**\n\t* add object in list\n\t* @param {Number} time - frame's time\n\t* @param {Object} object - target\n\t* @return {Scene.Keyframes} An instance itself\n\t*/\n  public add(time: number, object: any) {\n    this.items[time] = object;\n    this.addTime(time);\n    return this;\n  }\n  /**\n\t* Check if keyframes has object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Boolean} true: if has time, false: not\n\t*/\n  public has(time: number) {\n    return time in this.items;\n  }\n  /**\n\t* get object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Object} object at that time\n\t*/\n  public get(time: number) {\n    return this.items[time];\n  }\n  /**\n\t* remove object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Keyframes} An instance itself\n\t*/\n  public remove(time: number) {\n    const items = this.items;\n\n    delete items[time];\n    this.removeTime(time);\n    return this;\n  }\n  private addTime(time: number) {\n    const times = this.times;\n    const length = times.length;\n    let pushIndex = length;\n\n    for (let i = 0; i < length; ++i) {\n      // if time is smaller than times[i], add time to index\n      if (time === times[i]) {\n        return this;\n      } else if (time < times[i]) {\n        pushIndex = i;\n        break;\n      }\n    }\n    this.times.splice(pushIndex, 0, time);\n    return this;\n  }\n  private removeTime(time: number) {\n    const index = this.times.indexOf(time);\n\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n}\nexport default Keyframes;\n","/**\n* @namespace\n* @name Dot\n*/\n\nimport { isArray, splitUnit } from \"../utils\";\nimport PropertyObject from \"../PropertyObject\";\nimport { EasingType } from \"../Animator\";\nimport { getType } from \"../utils\";\n\n/**\n* The dot product of Arrays\n* @memberof Dot\n* @function dotArray\n* @param {Array} a1 value1\n* @param {Array} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {Array|Object} Array.\n* @example\ndotArray([0, 0, 0, 1],[50, 50, 50, 1],0.5, 0.5);\n// => [25, 25, 25, 1]\n*/\nexport function dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  }\n  if (!isArray(a2)) {\n    return a1;\n  }\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\n/**\n* The dot product of PropertyObject(type=color)\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Dot\n* @function dotColor\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} PropertyObject(type=color).\n* @example\nvar colorObject = ......; //PropertyObject(type=color, model=\"rgba\", value=[254, 254, 254, 1]);\ndotColor(\"#000\",  colorObject, 0.5, 0.5);\n// \"#000\" => PropertyObject(type=color, model=\"rgba\", value=[0, 0, 0, 1]);\n// return => PropertyObject(type=color, model=\"rgba\", value=[127, 127, 127, 1]);\n*/\nexport function dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  if (b2 === 0) {\n    return color2;\n  }\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.getOption(\"model\");\n  const model2 = color2.getOption(\"model\");\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n/**\n* The dot product of Objects\n* @memberof Dot\n* @function dotObject\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} Array with Separator.\n* @example\ndotObject(PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)]),\nPropertyObject([\"9px\", \"solid\", rgba(50, 50, 50, 1)]),\n0.5, 0.5);\n// => PropertyObject([\"5px\", \"solid\", rgba(25, 25, 25, 1)])\n*/\nexport function dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.getOption(\"type\");\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.getOption(\"separator\") || a2.getOption(\"separator\"),\n    prefix: a1.getOption(\"prefix\") || a2.getOption(\"prefix\"),\n    suffix: a1.getOption(\"suffix\") || a2.getOption(\"suffix\"),\n    model: a1.getOption(\"model\") || a2.getOption(\"model\"),\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n\n  if (type1 === type2) {\n    if (type1 === \"property\") {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === \"array\") {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  // split number and unit of the value.\n  const r1 = b1 / (b1 + b2);\n  const r2 = 1 - r1;\n\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = v1.value * r2 + v2.value * r1;\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import { ObjectInterface } from \"../consts\";\n\nexport function hasClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n  return !!element.className.match(new RegExp(`(\\\\s|^)${className}(\\\\s|$)`));\n}\n\nexport function addClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += ` ${className}`;\n  }\n}\n\nexport function removeClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    const reg = new RegExp(`(\\\\s|^)${className}(\\\\s|$)`);\n\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n\nexport function fromCSS(elements: HTMLElement | HTMLElement[] | NodeListOf<HTMLElement>, properties: string[]) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n  let element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n  const cssObject: ObjectInterface<any> = {};\n  const styles = window.getComputedStyle(element) as any;\n  const length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n  return cssObject;\n}\n","import Animator, { StateInterface, EasingType, isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  isUndefined,\n  isObject,\n  isArray,\n  decamelize,\n  toFixed,\n  isFixed,\n} from \"./utils\";\nimport Keyframes from \"./Keyframes\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n  KEYFRAMES, ANIMATION, START_ANIMATION,\n  PREFIX, THRESHOLD, ObjectInterface, NameType,\n  timingFunction, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, RUNNING, PLAY, FILL_MODE, DIRECTION, ITERATION_COUNT, EASING_NAME, DELAY, PLAY_SPEED, DURATION\n} from \"./consts\";\nimport { addClass, removeClass, hasClass, fromCSS } from \"./utils/css\";\n\nfunction toId(text: string) {\n  return text.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nfunction makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 100000)}`;\n\n    if (!selector) {\n      return id;\n    }\n    const checkElement = document.querySelector(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nfunction makeAnimationProperties(properties: ObjectInterface<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)} : ${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\n\ntype ElementsType = HTMLElement[] | NodeListOf<HTMLElement>;\n/**\n* manage Frame Keyframes and play keyframes.\n* @memberof Scene\n* @extends Scene.Animator\n* @example\nconst item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator {\n  public keyframes: Keyframes;\n  private elements: ElementsType;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst item = new Scene.SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.keyframes = new Keyframes();\n    this.elements = [];\n    this.load(properties, options);\n  }\n  public getDuration() {\n    return Math.max(this.state[DURATION], this.keyframes.getDuration());\n  }\n  public setDuration(duration: number) {\n    if (duration === 0) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      this.keyframes.setDuration(duration, originalDuration);\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  /**\n\t* set the unique indicator of the item.\n\t* @method Scene.SceneItem#setId\n\t* @param {String} [id] - the indicator of the item.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nconst item = new SceneItem();\n\nitem.setId(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public setId(id?: string) {\n    const elements = this.elements;\n    const length = elements.length;\n\n    this.setState({ id: id || makeId(!!length) });\n    const sceneId = toId(this.getId());\n\n    this.options.selector || (this.options.selector = `[data-scene-id=\"${sceneId}\"]`);\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      elements[i].setAttribute(\"data-scene-id\", sceneId);\n    }\n    return this;\n  }\n  /**\n\t* Specifies the unique indicator of the item.\n\t* @method Scene.SceneItem#getId\n\t* @return {String} the indicator of the item.\n\t* @example\nconst item = scene.newItem(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public getId() {\n    return this.state.id;\n  }\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @method Scene.SceneItem#set\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any[] | number | string | ObjectInterface<any>, ...args: any[]) {\n    if (isObject(time)) {\n      this.load(time);\n      return this;\n    } else if (args[0]) {\n      if (args[0] instanceof SceneItem) {\n        const item: SceneItem = args[0];\n        const delay = item.getDelay();\n        const realTime = this.getUnitTime(time) + delay;\n        const { keys, values, frames } = item.getAllTimes(!!delay || !this.hasFrame(time));\n        const easing = this.getEasingName() !== item.getEasingName() ? item.getEasing() : 0;\n\n        keys.forEach(t => {\n          this.set(realTime + t, frames[values[t]]);\n        });\n        if (easing) {\n          this.set(realTime + keys[0], EASING, easing);\n          this.set(realTime + keys[keys.length - 1], EASING, \"initial\");\n        }\n        return this;\n      } else if (args.length === 1 && isArray(args[0])) {\n        args[0].forEach((item: any) => {\n          this.set(time, item);\n        });\n        return this;\n      }\n    }\n    const frame = this.newFrame(time);\n\n    frame.set(...args);\n    this.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|Scene.PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.update();\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | object) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t*/\n  public prepend(item: SceneItem | object) {\n    if (item instanceof SceneItem) {\n      const delay = item.getDelay();\n      const duration = item.getIterationCount() === INFINITE ? item.getDuration() : item.getActiveDuration();\n      const unshiftTime = duration + delay;\n      const firstFrame = this.keyframes.get(0);\n\n      if (firstFrame) {\n        this.keyframes.remove(0);\n      }\n      this.keyframes.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @method Scene.SceneItem#setSelector\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(selector: boolean | string) {\n    this.options.selector = selector === true ? this.state.id :\n      (selector || `[data-scene-id=\"${this.state.id}\"]`);\n    this.setElement(document.querySelectorAll(this.options.selector));\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n\t* @method Scene.SceneItem#setElement\n\t* @param {Element|Array|string} elements - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(elements: HTMLElement | ElementsType) {\n    if (!elements) {\n      return this;\n    }\n    this.elements = (elements instanceof Element) ? [elements] : elements;\n    this.setId();\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @method Scene.SceneItem#setCSS\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @method Scene.SceneItem#update\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* update property names used in frame.\n\t* @method Scene.SceneItem#updateFrame\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.updateFrame(time, this.get(time));\n\t*/\n  public updateFrame(frame: Frame) {\n    this.keyframes.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#newFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#setFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    this.keyframes.add(this.getUnitTime(time), frame);\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @method Scene.SceneItem#getFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.keyframes.get(this.getUnitTime(time));\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @method Scene.SceneItem#hasFrame\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.keyframes.has(this.getUnitTime(time));\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @method Scene.SceneItem#removeFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const keyframes = this.keyframes;\n\n    keyframes.remove(time);\n    keyframes.update();\n\n    return this;\n  }\n  /**\n\t* Copy frame of the previous time at the next time.\n\t* @method Scene.SceneItem#copyFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(0) equal getFrame(1)\nitem.copyFrame(0, 1);\n\t*/\n  public copyFrame(fromTime: ObjectInterface<number> | number | string, toTime: number) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.copyFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const copyFrame = frame.clone();\n\n    this.setFrame(toTime, copyFrame);\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n\t* @method Scene.SceneItem#mergeFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number|string} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(fromTime: ObjectInterface<number> | number | string, toTime: number | string) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.mergeFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const toFrame = this.newFrame(toTime);\n\n    toFrame.merge(frame);\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @method Scene.SceneItem#getNowFrame\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Scene.Frame} frame of the current time\n\t* @example\nlet item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType) {\n    const frame = new Frame();\n    const names = this.keyframes.getNames();\n    const { left, right } = this._getNearTimeIndex(time);\n    const realEasing = this._getEasing(time, left, right, this.getEasing() || easing);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, left, right, properties, realEasing);\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (isArray(properties)) {\n      const length = properties.length;\n\n      for (let i = 0; i < length; ++i) {\n        const time = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(time, properties[i]);\n      }\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\" || time === \"keyframes\") {\n          continue;\n        }\n        const value = properties[time];\n        const realTime = this.getUnitTime(time);\n\n        if (typeof value === \"number\") {\n          this.mergeFrame(value, realTime);\n          continue;\n        }\n        this.set(realTime, value);\n      }\n    }\n    options && this.setOptions(options);\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @method Scene.SceneItem#clone\n\t * @param {AnimatorOptions} [options] animator options\n\t * @return {Scene.SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone(options = {}) {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    item.setOptions(options);\n    this.keyframes.forEach((frame: Frame, time: number) => item.setFrame(time, frame.clone()));\n    return item;\n  }\n  public setOptions(options: StateInterface = {}) {\n    super.setOptions(options);\n    const { id, selector, duration, elements } = options;\n\n    duration && this.setDuration(duration);\n    id && this.setId(id);\n    if (elements) {\n      this.setElement(elements);\n    } else if (selector) {\n      this.setSelector(selector === true ? this.state.id : selector);\n    }\n    return this;\n  }\n  public getAllTimes(isStartZero = true, options: StateInterface = {}) {\n    const times = this.keyframes.times.slice();\n    let length = times.length;\n    const keys: number[] = [];\n    const values: ObjectInterface<number> = {};\n\n    if (!length) {\n      return { keys: [], values: {}, frames: {} };\n    }\n    const frames: ObjectInterface<Frame> = {};\n    const duration = this.getDuration();\n    const direction = options[DIRECTION] || this.state[DIRECTION];\n    const isShuffle = direction === ALTERNATE || direction === ALTERNATE_REVERSE;\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(duration)) && times.push(duration);\n    length = times.length;\n    let iterationCount = options[ITERATION_COUNT] || this.state[ITERATION_COUNT];\n\n    iterationCount = iterationCount !== INFINITE ? iterationCount : 1;\n    const totalDuration = iterationCount * duration;\n\n    for (let i = 0; i < iterationCount; ++i) {\n      const isReverse = isDirectionReverse(i, direction);\n      const start = i * duration;\n\n      for (let j = 0; j < length; ++j) {\n        if (isShuffle && i !== 0 && j === 0) {\n          // pass duplicate\n          continue;\n        }\n        // isStartZero is keytimes[0] is 0 (i === 0 & j === 0)\n        const threshold = j === 0 && (i === 0 ? !isStartZero : !isShuffle) ? THRESHOLD : 0;\n        const keyvalue = toFixed(isReverse ? times[length - 1 - j] : times[j]);\n        const time = toFixed(isReverse ? duration - keyvalue : keyvalue);\n        const keytime = toFixed(start + time + threshold);\n\n        if (totalDuration < keytime) {\n          break;\n        }\n        keys.push(keytime);\n        values[keytime] = keyvalue;\n\n        if (!frames[keyvalue]) {\n          const frame = this.getFrame(keyvalue);\n\n          if (!frame) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n            continue;\n          }\n          if (j === 0 || j === length - 1 || frame.has(\"transform\") || frame.has(\"filter\")) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n          } else {\n            frames[keyvalue] = frame;\n          }\n        }\n      }\n    }\n    if (keys[keys.length - 1] < totalDuration) {\n      // last time === totalDuration\n      const isReverse = isDirectionReverse(iterationCount, direction);\n      const keyvalue = toFixed(duration * (isReverse ? 1 - iterationCount % 1 : iterationCount % 1));\n\n      keys.push(totalDuration);\n      values[totalDuration] = keyvalue;\n      !frames[keyvalue] && (frames[keyvalue] = this.getNowFrame(keyvalue));\n    }\n    return { keys, values, frames };\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    const state = this.state;\n    const selector = state.selector || this.options.selector;\n\n    if (!selector) {\n      return \"\";\n    }\n    const id = this._getId();\n    // infinity or zero\n    const isParent = typeof options[ITERATION_COUNT] !== \"undefined\";\n    const isZeroDuration = duration === 0;\n    const playSpeed = (options[PLAY_SPEED] || 1);\n    const delay = ((isParent ? options[DELAY] : state[DELAY]) || 0) / playSpeed;\n    const easingName = (!isZeroDuration && options[EASING] && options[EASING_NAME]) || state[EASING_NAME];\n    const iterationCount = (!isZeroDuration && options[ITERATION_COUNT]) || state[ITERATION_COUNT];\n    const fillMode = (options[FILL_MODE] !== \"forwards\" && options[FILL_MODE]) || state[FILL_MODE];\n    const direction = (options[DIRECTION] !== NORMAL && options[DIRECTION]) || state[DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${toId(id)}`,\n      duration: `${duration / playSpeed}s`,\n      timingFunction: easingName,\n    });\n\n    const css = `${selector}.${START_ANIMATION} {\n\t\t\t${cssText}\n\t\t}\n\t\t${this._toKeyframes(duration, isParent)}`;\n\n    return css;\n  }\n  public exportCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    if (!this.elements.length) {\n      return;\n    }\n    const id = this._getId();\n    const styleElement: HTMLElement = document.querySelector(`#${PREFIX}${id}`);\n    const css = this.toCSS(duration, options);\n\n    if (styleElement) {\n      styleElement.innerText = css;\n    } else {\n      document.body.insertAdjacentHTML(\"beforeend\",\n        `<style id=\"${PREFIX}STYLE_${id}\">${css}</style>`);\n    }\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem.playCSS();\nitem.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    if (!ANIMATION || this.getPlayState() === RUNNING) {\n      return this;\n    }\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    if (this.isEnded()) {\n      this.setTime(0);\n    }\n    exportCSS && this.exportCSS();\n\n    const cssText = makeAnimationProperties(properties);\n\n    for (let i = 0; i < length; ++i) {\n      const element = elements[i];\n\n      element.style.cssText += cssText;\n      if (hasClass(element, START_ANIMATION)) {\n        removeClass(element, START_ANIMATION);\n        (el => {\n          requestAnimationFrame(() => {\n            requestAnimationFrame(() => {\n              addClass(el, START_ANIMATION);\n            });\n          });\n        })(element);\n      } else {\n        addClass(element, START_ANIMATION);\n      }\n    }\n\n    this.setState({ playCSS: true });\n    this.setPlayState(RUNNING);\n    this.trigger(PLAY);\n\n    const duration = this.getDuration();\n    const animatedElement = elements[0];\n    const animationend = () => {\n      this.end();\n\n      if (!animatedElement) {\n        return;\n      }\n      animatedElement.removeEventListener(\"animationend\", animationend);\n      animatedElement.removeEventListener(\"animationiteration\", animationiteration);\n    };\n    const animationiteration = ({ elapsedTime }: any) => {\n      const currentTime = elapsedTime;\n      const iterationCount = currentTime / duration;\n\n      this.state.currentTime = currentTime;\n      this.setCurrentIterationCount(iterationCount);\n    };\n    animatedElement.addEventListener(\"animationend\", animationend);\n    animatedElement.addEventListener(\"animationiteration\", animationiteration);\n    return this;\n  }\n  private _getId() {\n    return this.state.id || this.setId().getId();\n  }\n  private _getEasing(time: number, left: number, right: number, easing: EasingType) {\n    if (this.keyframes.hasName(timingFunction)) {\n      const nowEasing = this._getNowValue(time, left, right, [timingFunction], 0, true);\n\n      return typeof nowEasing === \"function\" ? nowEasing : easing;\n    }\n    return easing;\n  }\n  private _toKeyframes(duration = this.getDuration(), isParent: boolean) {\n    const id = this._getId();\n    const state = this.state;\n    const playSpeed = state[PLAY_SPEED];\n    const iterationCount = state[ITERATION_COUNT];\n    const delay = isParent ? state[DELAY] : 0;\n    const direction = isParent ? state[DIRECTION] : NORMAL;\n    const { keys, values, frames } = this.getAllTimes(true, {\n      duration,\n      delay,\n      direction,\n      iterationCount: isParent && iterationCount !== INFINITE ? iterationCount : 1,\n      isCSS: true,\n    });\n    const length = keys.length;\n    const css: ObjectInterface<string> = {};\n    const keyframes: string[] = [];\n\n    for (const time in frames) {\n      css[time] = frames[time].toCSS();\n    }\n    if (!keys.length) {\n      return \"\";\n    }\n    if (delay) {\n      keyframes.push(`0%{${frames[0]}}`);\n      if (direction === REVERSE || direction === ALTERNATE_REVERSE) {\n        keyframes.push(`${delay / playSpeed / duration * 100 - 0.00001}%{${css[0]}}`);\n      }\n    }\n    keys.forEach(time => {\n      keyframes.push(`${(delay + time) / playSpeed / duration * 100}%{${css[values[time]]}}`);\n    });\n    const lastTime = keys[length - 1];\n\n    if ((delay + lastTime) / playSpeed < duration) {\n      // not 100%\n      keyframes.push(`100%{${css[values[lastTime]]}`);\n    }\n    return `@${KEYFRAMES} ${PREFIX}KEYFRAMES_${toId(id)}{\n\t\t\t${keyframes.join(\"\\n\")}\n\t\t}`;\n  }\n  private _getNowValue(\n    time: number,\n    left: number,\n    right: number,\n    properties: string[],\n    easing: EasingType = this.getEasing(),\n    usePrevValue: boolean = isFixed(properties),\n  ) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    let prevTime;\n    let nextTime;\n    let prevFrame;\n    let nextFrame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n  private _getNearTimeIndex(time: number) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (times[i] === time) {\n        return { left: i, right: i };\n      } else if (times[i] > time) {\n        return { left: i === 0 ? 0 : i - 1, right: i };\n      }\n    }\n    return { left: length - 1, right: length - 1 };\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event Scene.SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Scene.Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return frame;\n    }\n    const attributes = frame.get(\"attribute\");\n\n    if (attributes) {\n      for (const name in (attributes as any)) {\n        for (let i = 0; i < length; ++i) {\n          elements[i].setAttribute(name, attributes[name]);\n        }\n      }\n    }\n    const cssText = frame.toCSS();\n\n    if (this.state.cssText !== cssText) {\n      this.state.cssText = cssText;\n\n      for (let i = 0; i < length; ++i) {\n        elements[i].style.cssText += cssText;\n      }\n      return frame;\n    }\n  }\n}\n\nexport default SceneItem;\n","import Animator, { StateInterface, EasingType } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ANIMATION, ObjectInterface, RUNNING, ENDED, PLAY, ITERATION, ANIMATE } from \"./consts\";\nimport { has } from \"./utils\";\nimport Frame from \"./Frame\";\n\n/**\n* manage sceneItems and play Scene.\n* @extends Scene.Animator\n*/\nclass Scene extends Animator {\n\n  public items: ObjectInterface<Scene | SceneItem>;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst scene = new Scene({\n\t\titem1: {\n\t\t\t0: {\n\t\t\t\tdisplay: \"none\",\n\t\t\t},\n\t\t\t1: {\n\t\t\t\tdisplay: \"block\",\n\t\t\t\topacity: 0,\n\t\t\t},\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t},\n\t\titem2: {\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public setId(id: string = `scene${Math.floor(Math.random() * 100000)}`) {\n    this.state.id = id;\n    return this;\n  }\n  public getId() {\n    return this.state.id;\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  /**\n\t* get item in scene by name\n\t* @method Scene#getItem\n\t* @param {string} name - item's name\n\t* @return {Scene.SceneItem} item\n\t* @example\nconst item = scene.getItem(\"item1\")\n\t*/\n  public getItem(name: string) {\n    return this.items[name];\n  }\n  /**\n\t* create item in scene\n\t* @method Scene#newItem\n\t* @param {String} name - name of item to create\n\t* @param {StateOptions} options - The option object of SceneItem\n\t* @return {Sceme.SceneItem} Newly created item\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public newItem(name: string, options = {}) {\n    if (has(this.items, name)) {\n      return this.items[name];\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n\t* add a sceneItem to the scene\n\t* @param {String} name - name of item to create\n\t* @param {Scene.SceneItem} item - sceneItem\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public setItem(name: string, item?: Scene | SceneItem) {\n    if (item instanceof Animator) {\n      item.setId(name);\n    }\n    this.items[name] = item;\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} func Function to execute for each element, taking three arguments\n\t * @param {Scene | Scene.SceneItem} [func.item] The value of the item being processed in the scene.\n\t * @param {string} [func.name] The name of the item being processed in the scene.\n\t * @param {object} [func.items] The object that forEach() is being applied to.\n\t * @return {Scene} An instance itself\n\t */\n  public forEach(func: (item?: Scene | SceneItem, name?: string, items?: ObjectInterface<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  /**\n\t * Export the CSS of the items to the style.\n\t * @return {Scene} An instance itself\n\t */\n  public exportCSS(duration: number = this.getDuration(), state?: StateInterface) {\n    const items = this.items;\n    let totalDuration = duration;\n\n    if (!totalDuration || !isFinite(totalDuration)) {\n      totalDuration = 0;\n    }\n    for (const id in items) {\n      const item = items[id];\n\n      item.exportCSS(totalDuration, this.state);\n    }\n    return this;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(item.getId() || item.setId().getId(), item);\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @return {Scene} An instance itself\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nscene.playCSS();\nscene.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    if (!ANIMATION || this.getPlayState() === RUNNING) {\n      return this;\n    }\n    exportCSS && this.exportCSS();\n\n    const items = this.items;\n    let animationItem: Scene | SceneItem;\n\n    for (const id in items) {\n      const item = items[id];\n\n      item.playCSS(false, properties);\n      if (item.getState(\"playCSS\")) {\n        animationItem = item;\n      }\n    }\n    if (!animationItem) {\n      return this;\n    }\n    const animationiteration = ({ currentTime, iterationCount }: { currentTime: number, iterationCount: number }) => {\n      this.state.currentTime = currentTime;\n      this.setCurrentIterationCount(iterationCount);\n    };\n    const animationend = () => {\n      this.end();\n      this.setState({ playCSS: false });\n      animationItem.off(ENDED, animationend);\n      animationItem.off(ITERATION, animationiteration);\n    };\n    animationItem.on(ENDED, animationend);\n    animationItem.on(ITERATION, animationiteration);\n    this.setState({ playCSS: true });\n    this.setPlayState(RUNNING);\n    this.trigger(PLAY);\n    return this;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options.selector;\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setSelector(_: string | boolean) {\n    const isSelector = this.options.selector;\n\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n    const frames: ObjectInterface<ObjectInterface<any> | Frame> = {};\n\n    for (const id in items) {\n      const item = items[id];\n\n      frames[id] = item.animate(Math.max(iterationTime * item.getPlaySpeed() - item.getDelay(), 0), easing);\n    }\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frames frame of that time.\n\t\t */\n    this.trigger(ANIMATE, {\n      currentTime: this.getTime(),\n      time: iterationTime,\n      frames,\n    });\n    return frames;\n  }\n}\n\nexport default Scene;\n","\nimport { StateInterface } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface } from \"./consts\";\n\n/**\n * @namespace presets\n */\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func set\n * @param {string | string[]} property - property to set effect\n * @param {any[]} values - values of 100%\n * @param {AnimatorOptions} [options]\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function set(property: string | string[], values: any[], options: StateInterface) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @func zoomIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @func zoomOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @func wipeIn\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @func wipeOut\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func transition\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: ObjectInterface<any>, to: ObjectInterface<any>, duration?: number, time: number }) {\n  item1.set({\n    [time]: from,\n    [time + duration]: to,\n  });\n  item2.set({\n    0: to,\n    [duration]: from,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @func fadeIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @func fadeOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @func blink\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport Frame from \"./Frame\";\nimport Keyframes from \"./Keyframes\";\nimport PropertyObject from \"./PropertyObject\";\nimport Animator from \"./Animator\";\nimport * as _presets from \"./presets\";\n\n/**\n* version info\n* @name Scene.VERSION\n* @memberof Scene\n* @static\n* @type {string}\n* @example\n* Scene.VERSION // #__VERSION__#\n*/\nexport const VERSION = \"#__VERSION__#\";\nexport { SceneItem, Frame, Animator, Keyframes, PropertyObject };\nexport { bezier, EASE_IN_OUT, EASE_IN, EASE_OUT, EASE, LINEAR, steps, STEP_START, STEP_END } from \"./easing\";\nexport { set, transition, wipeIn, wipeOut, fadeIn, fadeOut, blink, zoomIn, zoomOut} from \"./presets\";\nexport { OPTIONS, EVENTS } from \"./consts\";\nexport { setRole, setAlias } from \"./utils\";\nexport { Scene as default };\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","timingFunction","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","animation-timing-function","contents","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","ITERATION","RGBA","START_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","OPTIONS","EVENTS","prefixes","checkProperties","property","styles","document","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","this","events","EventTrigger","callback","forEach","func","_this","on","push","callbacks","index","indexOf","splice","_i","data","event","target","type","currentTarget","apply","cubic","y1","y2","t","t2","bezier","x1","x2","x","dx","Math","abs","solveFromX","max","min","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","value","options","prefix","suffix","model","separator","setOptions","init","PropertyObject","Object","assign","map","v","clone","join","toValue","split","getType","isArray","toFixed","num","round","isInProperties","roles","args","isCheckTrue","role","isRole","isUndefined","isObject","Array","isString","splitUnit","text","matches","exec","unit","NaN","parseFloat","lastTime","camelize","str","all","letter","toUpperCase","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","currTime","Date","now","timeToCall","id","setTimeout","isDirectionReverse","iterationCount","direction","setters","getters","_super","state","delay","fillMode","playSpeed","currentTime","iterationTime","currentIterationCount","tickTime","prevTime","playState","duration","getter","setter","parent","tslib_1.__extends","Animator","curveArray","setState","setDuration","setEasing","Infinity","getActiveDuration","getDuration","getTime","animator","play","isEnded","setTickTime","tick","trigger","pause","setTime","isTick","activeDuration","getUnitTime","calculateIterationTime","isDelay","getIterationTime","getIterationCount","object","_a","passIterationCount","currentIterationTime","setIterationTime","setCurrentIterationCount","isReverse","end","constructor","prototype","COLOR_MODELS","hexToRGB","hex","h","charAt","substring","r","parseInt","g","b","a","isNaN","arrayToColorObject","arr","toColorObject","colorObject","stringToColorObject","colorArray","colorModel","getOption","toLowerCase","hsl","s","l","rgb","c","m","result","hslToRGB","stringToBracketObject","values","obj","toPropertyObject","arrayToPropertyObject","Error","match","trim","toInnerProperties","arrObj","merge","to","from","slice","properties","set","Frame","raw","params","_set","toObject","size","get","splitStyle","frame","frameProperties","cssObject","toCSSObject","cssArray","times","items","names","Keyframes","getNames","stack","concat","pop","updateFrame","originalDuration","ratio","time2","addTime","removeTime","pushIndex","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","dotColor","type1","r1","r2","v2","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","toId","makeAnimationProperties","letter2","keyframes","elements","load","SceneItem","selector","random","querySelector","makeId","sceneId","getId","setAttribute","item","getDelay","realTime_1","keys","values_1","frames_1","getEasingName","getEasing","newFrame","getFrame","update","unshiftTime","firstFrame","unshift","prepend","setElement","querySelectorAll","Element","setId","getComputedStyle","fromCSS","parentEasing","_animate","isNumber","setFrame","has","fromTime","toTime","copyFrame","mergeFrame","left","right","realEasing","_getEasing","_getNowValue","realTime","setSelector","isStartZero","frames","isShuffle","totalDuration","start","j","threshold","keyvalue","keytime","getNowFrame","_getId","isParent","isZeroDuration","cssText","_toKeyframes","styleElement","css","toCSS","innerText","insertAdjacentHTML","exportCSS","getPlayState","contains","el","playCSS","setPlayState","animatedElement","animationend","removeEventListener","animationiteration","addEventListener","hasName","nowEasing","usePrevValue","nextTime","prevFrame","nextFrame","prevValue","nextValue","dotValue","attributes","Scene","getTotalDuration","getPlaySpeed","sceneDuration","isFinite","setDelay","hasOwnProperty","call","setItem","animationItem","getState","off","isSelector","newItem","_","animate","item1","item2","_b","_c","_d","0","isProperty","isFixedProperty","fixed","alias","others"],"mappings":"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"}