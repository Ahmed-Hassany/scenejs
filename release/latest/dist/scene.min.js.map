{"version":3,"file":"scene.min.js","sources":["../src/easing.ts","../src/consts.ts","../src/EventTrigger.ts","../src/PropertyObject.ts","../src/utils/property.ts","../src/utils.ts","../src/Animator.ts","../src/Frame.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.umd.ts"],"sourcesContent":["import { EasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType, EasingFunction } from \"./types\";\nimport { EASE, EASE_IN, EASE_IN_OUT, LINEAR, EASE_OUT, STEP_START, STEP_END } from \"./easing\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {}, html: true };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true, html: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\nexport const EASINGS = {\n    \"linear\": LINEAR,\n    \"ease\": EASE,\n    \"ease-in\": EASE_IN,\n    \"ease-out\": EASE_OUT,\n    \"ease-in-out\": EASE_IN_OUT,\n    \"step-start\": STEP_START,\n    \"step-end\": STEP_END,\n};\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","import { isObject, isArray, toArray } from \"@daybrush/utils\";\nimport { CallbackType, EventParameter } from \"./types\";\n\n/**\n* attach and trigger event handlers.\n*/\nclass EventTrigger {\n    public events: { [name: string]: CallbackType[] };\n    /**\n      * @example\n  const et = new Scene.EventTrigger();\n  const scene = new Scene();\n\n  scene.on(\"call\", e => {\n      console.log(e.param);\n  });\n  et.on(\"call\", e => {\n      console.log(e.param);\n  });\n  scene.trigger(\"call\", {param: 1});\n  et.trigger(\"call\", {param: 1});\n       */\n    constructor() {\n        this.events = {};\n    }\n    public _on(name: string | EventParameter, callback?: CallbackType | CallbackType[], once?: boolean) {\n        const events = this.events;\n\n        if (isObject(name)) {\n            for (const n in name) {\n                this._on(n, name[n], once);\n            }\n            return;\n        }\n        if (!(name in events)) {\n            events[name] = [];\n        }\n        if (!callback) {\n            return;\n        }\n        if (isArray(callback)) {\n            callback.forEach(func => this._on(name, func, once));\n            return;\n        }\n        events[name].push(once ? function callback2(...args) {\n            callback(...args);\n            this.off(name, callback2);\n        } : callback);\n    }\n    /**\n      * Attach an event handler function for one or more events to target\n      * @param - event's name\n      * @param - function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function() {\n      console.log(\"animate\");\n  });\n\n  target.trigger(\"animate\");\n\n    */\n    public on(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback);\n        return this;\n    }\n    /**\n      * Dettach an event handler function for one or more events to target\n      * @param - event's name\n      * @param -  function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  const callback = function() {\n      console.log(\"animate\");\n  };\n  target.on(\"animate\", callback);\n\n  target.off(\"animate\", callback);\n  target.off(\"animate\");\n\n      */\n    public off(name?: string, callback?: CallbackType) {\n        if (!name) {\n            this.events = {};\n        } else if (!callback) {\n            this.events[name] = [];\n        } else {\n            const callbacks = this.events[name];\n\n            if (!callbacks) {\n                return this;\n            }\n            const index = callbacks.indexOf(callback);\n\n            if (index !== -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n        return this;\n    }\n    /**\n      * execute event handler\n      * @param - event's name\n      * @param - event handler's additional parameter\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function(a1, a2) {\n      console.log(\"animate\", a1, a2);\n  });\n\n  target.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n      */\n    public trigger(name: string, ...data: any[]) {\n        const events = this.events;\n\n        if (!(name in events)) {\n            return this;\n        }\n\n        const args = data || [];\n\n        !args[0] && (args[0] = {});\n        const event = events[name];\n        const target = args[0];\n\n        target.type = name;\n        target.currentTarget = this;\n        !target.target && (target.target = this);\n        toArray(events[name]).forEach(callback => {\n            callback.apply(this, data);\n        });\n\n        return this;\n    }\n    public once(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback, true);\n        return this;\n    }\n}\nexport default EventTrigger;\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n    public value: any[];\n    public prefix: string = \"\";\n    public suffix: string = \"\";\n    public model: string = \"\";\n    public type: string = \"\";\n    public separator: string = \",\";\n\n    /**\n      * @param - This value is in the array format.\n      * @param - options\n      * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n       */\n    constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n        options && this.setOptions(options);\n        this.value = isString(value) ? value.split(this.separator) : value;\n    }\n    public setOptions(newOptions: Partial<PropertyObjectState>) {\n        for (const name in newOptions) {\n            this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n        }\n        return this;\n    }\n    /**\n      * the number of values.\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.length);\n  // 3\n       */\n    public size() {\n        return this.value.length;\n    }\n    /**\n      * retrieve one of values at the index\n      * @param {Number} index - index\n      * @return {Object} one of values at the index\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.get(0));\n  // 1\n       */\n    public get(index: number) {\n        return this.value[index];\n    }\n    /**\n      * Set the value at that index\n      * @param {Number} index - index\n      * @param {Object} value - text, a number, object to set\n      * @return {PropertyObject} An instance itself\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n       */\n    public set(index: number, value: any) {\n        this.value[index] = value;\n        return this;\n    }\n    /**\n      * create a copy of an instance itself.\n      * @return {PropertyObject} clone\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n       */\n    public clone(): PropertyObject {\n        const {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        } = this;\n        const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n        return new PropertyObject(arr, {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        });\n    }\n    /**\n      * Make Property Object to String\n      * @return {String} Make Property Object to String\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n      */\n    public toValue(): string {\n        return this.prefix + this.join() + this.suffix;\n    }\n    /**\n      * Make Property Object's array to String\n      * @return {String} Join the elements of an array into a string\n      * @example\n      //rgba(100, 100, 100, 0.5)\n      var obj4 = new PropertyObject([100,100,100,0.5], {\n          \"separator\" : \",\",\n          \"prefix\" : \"rgba(\",\n          \"suffix\" : \")\"\n      });\n      obj4.join();  // =>   \"100,100,100,0.5\"\n       */\n    public join() {\n        return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.separator);\n    }\n    /**\n      * executes a provided function once per array element.\n      * @param {Function} callback - Function to execute for each element, taking three arguments\n      * @param {All} [callback.currentValue] The current element being processed in the array.\n      * @param {Number} [callback.index] The index of the current element being processed in the array.\n      * @param {Array} [callback.array] the array.\n      * @return {PropertyObject} An instance itself\n      * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n\n  obj4.forEach(t => {\n      console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n      */\n    public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n        this.value.forEach(func);\n        return this;\n    }\n}\nexport default PropertyObject;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n  COLOR_MODELS, isString,\n  splitComma, splitSpace, stringToRGBA,\n  RGBA, splitBracket, IObject, isArray\n} from \"@daybrush/utils\";\nimport { NameType } from \"../types\";\n\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const obj: IObject<string | PropertyObject> = {};\n  let length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      --length;\n      continue;\n    }\n    obj[matches[1].trim()] = toPropertyObject(matches[2].trim());\n  }\n  return {styles: obj, length};\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n  // [prefix, value, other]\n  const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) > -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  const obj = toPropertyObject(value, model);\n\n  let arr = [value];\n  let separator = \",\";\n  let prefix = `${model}(`;\n  let suffix = `)${afterModel}`;\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.separator;\n    arr = obj.value;\n    prefix += obj.prefix;\n    suffix = obj.suffix + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  const result = stringToRGBA(value);\n\n  return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[], model?: NameType): PropertyObject;\nexport function toPropertyObject(value: IObject<any>, model?: NameType): IObject<any>;\nexport function toPropertyObject(value: string, model?: NameType): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[], model?: NameType) {\n  if (!isString(value)) {\n    if (isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\" && model !== \"url\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n  const model = object.model;\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => {\n      toObject(obj, result);\n    });\n  }\n  return result;\n}\n","import {\n    ROLES, MAXIMUM, FIXED, ALIAS,\n    PAUSED, RUNNING, PLAY, ENDED, PREFIX, PLAY_CSS, CURRENT_TIME, START_ANIMATION, EASINGS\n} from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n    isArray, ANIMATION, ARRAY, OBJECT,\n    PROPERTY, STRING, NUMBER, IS_WINDOW, IObject, $, document, isObject, addEvent, removeEvent, isString,\n} from \"@daybrush/utils\";\nimport { EasingType, EasingFunction, NameType } from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\nimport { bezier, steps } from \"./easing\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n    return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n    ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n    const length = names.length;\n    let roles: any = ROLES;\n    let fixed: any = FIXED;\n\n    for (let i = 0; i < length - 1; ++i) {\n        !roles[names[i]] && (roles[names[i]] = {});\n        roles = roles[names[i]];\n        if (isFixedProperty) {\n            !fixed[names[i]] && (fixed[names[i]] = {});\n            fixed = fixed[names[i]];\n        }\n    }\n    isFixedProperty && (fixed[names[length - 1]] = true);\n    roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n    const type = typeof value;\n\n    if (type === OBJECT) {\n        if (isArray(value)) {\n            return ARRAY;\n        } else if (isPropertyObject(value)) {\n            return PROPERTY;\n        }\n    } else if (type === STRING || type === NUMBER) {\n        return \"value\";\n    }\n    return type;\n}\nexport function isPureObject(obj: any): obj is object {\n    return isObject(obj) && obj.constructor === Object;\n}\nexport function getNames(names: IObject<any>, stack: string[]) {\n    let arr: string[][] = [];\n\n    if (isPureObject(names)) {\n        for (const name in names) {\n            stack.push(name);\n            arr = arr.concat(getNames(names[name], stack));\n            stack.pop();\n        }\n    } else {\n        arr.push(stack.slice());\n    }\n    return arr;\n}\nexport function updateFrame(names: IObject<any>, properties: IObject<any>) {\n    for (const name in properties) {\n        const value = properties[name];\n\n        if (!isPureObject(value)) {\n            names[name] = true;\n            continue;\n        }\n        if (!isObject(names[name])) {\n            names[name] = {};\n        }\n        updateFrame(names[name], properties[name]);\n    }\n    return names;\n}\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(\n    names: Array<string | number>,\n    properties: IObject<any>, length: number = names.length) {\n    let value = properties;\n\n    for (let i = 0; i < length; ++i) {\n        if (!isObject(value)) {\n            return undefined;\n        }\n        value = value[names[i]];\n    }\n    return value;\n}\nexport function isInProperties(roles: IObject<any>, args: NameType[], isCheckTrue?: boolean) {\n    const length = args.length;\n    let role: any = roles;\n\n    if (length === 0) {\n        return false;\n    }\n    for (let i = 0; i < length; ++i) {\n        if (role === true) {\n            return false;\n        }\n        role = role[args[i]];\n        if (!role || (!isCheckTrue && role === true)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isRole(args: NameType[], isCheckTrue?: boolean) {\n    return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: NameType[]) {\n    return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n    currentTime: number;\n    iterationCount: number;\n    elapsedTime: number;\n}\nexport function setPlayCSS(item: Scene | SceneItem, isActivate: boolean) {\n    item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n    return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n    return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function exportCSS(id: number | string, css: string) {\n    const styleId = `${PREFIX}STYLE_${toId(id)}`;\n    const styleElement: HTMLElement = $(`#${styleId}`);\n\n    if (styleElement) {\n        styleElement.innerText = css;\n    } else {\n        document.body.insertAdjacentHTML(\"beforeend\",\n            `<style id=\"${styleId}\">${css}</style>`);\n    }\n}\nexport function makeId(selector?: boolean) {\n    for (; ;) {\n        const id = `${Math.floor(Math.random() * 10000000)}`;\n\n        if (!IS_WINDOW || !selector) {\n            return id;\n        }\n        const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n        if (!checkElement) {\n            return id;\n        }\n    }\n}\nexport function getRealId(item: Scene | SceneItem) {\n    return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n    return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(\n    item: Scene | SceneItem, isExportCSS?: boolean,\n    playClassName?: string, properties: object = {}) {\n    if (!ANIMATION || item.getPlayState() === RUNNING) {\n        return;\n    }\n    const className = playClassName || START_ANIMATION;\n\n    if (isPausedCSS(item)) {\n        item.addPlayClass(true, className, properties);\n    } else {\n        if (item.isEnded()) {\n            item.setTime(0);\n        }\n        isExportCSS && item.exportCSS({ className });\n        const el = item.addPlayClass(false, className, properties);\n\n        if (!el) {\n            return;\n        }\n        addAnimationEvent(item, el);\n        setPlayCSS(item, true);\n    }\n    item.setPlayState(RUNNING);\n}\n\nexport function addAnimationEvent(item: Scene | SceneItem, el: Element) {\n    const state = item.state;\n    const duration = item.getDuration();\n    const isZeroDuration = !duration || !isFinite(duration);\n    const animationend = () => {\n        setPlayCSS(item, false);\n        item.finish();\n    };\n    const animationstart = () => {\n        item.trigger(PLAY);\n    };\n    item.once(ENDED, () => {\n        removeEvent(el, \"animationcancel\", animationend);\n        removeEvent(el, \"animationend\", animationend);\n        removeEvent(el, \"animationiteration\", animationiteration);\n        removeEvent(el, \"animationstart\", animationstart);\n    });\n    const animationiteration = ({ elapsedTime }: any) => {\n        const currentTime = elapsedTime;\n        const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n        state[CURRENT_TIME] = currentTime;\n        item.setIteration(iterationCount);\n    };\n    addEvent(el, \"animationcancel\", animationend);\n    addEvent(el, \"animationend\", animationend);\n    addEvent(el, \"animationiteration\", animationiteration);\n    addEvent(el, \"animationstart\", animationstart);\n}\n\nexport function getEasing(curveArray: string | number[] | EasingFunction): EasingType {\n    let easing: EasingType;\n\n    if (isString(curveArray)) {\n        if (curveArray in EASINGS) {\n            easing = EASINGS[curveArray];\n        } else {\n            const obj = toPropertyObject(curveArray);\n\n            if (isString(obj)) {\n                return 0;\n            } else {\n                if (obj.model === \"cubic-bezier\") {\n                    curveArray = obj.value.map(v => parseFloat(v));\n                    easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n                } else if (obj.model === \"steps\") {\n                    easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n                } else {\n                    return 0;\n                }\n            }\n        }\n    } else if (isArray(curveArray)) {\n        easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n    } else {\n        easing = curveArray;\n    }\n\n    return easing;\n}\n","import {\n    THRESHOLD,\n    ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n    ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n    DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n    RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS, EASINGS\n} from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, steps } from \"./easing\";\nimport { toFixed, getEasing } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame, isArray, cancelAnimationFrame } from \"@daybrush/utils\";\nimport {\n    IterationCountType, DirectionType, AnimatorState,\n    EasingFunction, FillModeType, PlayStateType, EasingType, AnimatorOptions,\n} from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\n\nfunction GetterSetter<T extends new (...args: any[]) => {}>(\n    getter: string[], setter: string[], parent: string) {\n    return (constructor: T) => {\n        const prototype = constructor.prototype;\n\n        getter.forEach(name => {\n            prototype[camelize(`get ${name}`)] = function() {\n                return this[parent][name];\n            };\n        });\n        setter.forEach(name => {\n            prototype[camelize(`set ${name}`)] = function(value: any) {\n                this[parent][name] = value;\n                return this;\n            };\n        });\n    };\n}\nexport function isDirectionReverse(iteration: number, iteraiontCount: IterationCountType, direction: DirectionType) {\n    if (direction === REVERSE) {\n        return true;\n    } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n        return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n    }\n    return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nconst setters = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n    DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n/**\n* play video, animation, the others\n* @extends EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n*/\n@GetterSetter(getters, setters, \"state\")\nclass Animator\n    <T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> extends EventTrigger {\n    public state: U;\n    private timerId: number = 0;\n\n    /**\n     * @param - animator's options\n     * @example\n  const animator = new Animator({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n     */\n    constructor(options?: Partial<T & AnimatorOptions>) {\n        super();\n        this.state = {\n            id: \"\",\n            easing: 0,\n            easingName: \"linear\",\n            iterationCount: 1,\n            delay: 0,\n            fillMode: \"forwards\",\n            direction: NORMAL,\n            playSpeed: 1,\n            currentTime: 0,\n            iterationTime: -1,\n            iteration: 0,\n            tickTime: 0,\n            prevTime: 0,\n            playState: PAUSED,\n            duration: 0,\n        } as U;\n        this.setOptions(options);\n    }\n    /**\n      * set animator's easing.\n      * @param curverArray - The speed curve of an animation.\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n      */\n    public setEasing(curveArray: string | number[] | EasingFunction): this {\n        const easing: EasingType = getEasing(curveArray);\n        const easingName = easing && easing[EASING_NAME] || \"linear\";\n        const state = this.state;\n\n        state[EASING] = easing;\n        state[EASING_NAME] = easingName;\n        return this;\n    }\n    /**\n      * set animator's options.\n      * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n      * @param - animator's options\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.eaasing.EASE,\n  });\n      */\n    public setOptions(options: Partial<AnimatorOptions> = {}): this {\n        for (const name in options) {\n            const value = options[name];\n\n            if (name === EASING) {\n                this.setEasing(value);\n                continue;\n            } else if (name === DURATION) {\n                value && this.setDuration(value);\n                continue;\n            }\n            if (OPTIONS.indexOf(name as any) > -1) {\n                this.state[name] = value;\n            }\n        }\n\n        return this;\n    }\n    /**\n      * Get the animator's total duration including delay\n      * @return {number} Total duration\n      * @example\n  animator.getTotalDuration();\n      */\n    public getTotalDuration(): number {\n        return this.getActiveDuration(true);\n    }\n    /**\n      * Get the animator's total duration excluding delay\n      * @return {number} Total duration excluding delay\n      * @example\n  animator.getActiveDuration();\n      */\n    public getActiveDuration(delay?: boolean): number {\n        const state = this.state;\n        const count = state[ITERATION_COUNT];\n        if (count === INFINITE) {\n            return Infinity;\n        }\n        return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n    }\n    /**\n      * Check if the animator has reached the end.\n      * @return {boolean} ended\n      * @example\n  animator.isEnded(); // true or false\n      */\n    public isEnded(): boolean {\n        if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n            return true;\n        } else if (this.getTime() < this.getActiveDuration()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n      *Check if the animator is paused:\n      * @return {boolean} paused\n      * @example\n  animator.isPaused(); // true or false\n      */\n    public isPaused(): boolean {\n        return this.state[PLAY_STATE] === PAUSED;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const state = this.state;\n\n        state[PLAY_STATE] = RUNNING;\n        if (state[TICK_TIME] >= delay) {\n            /**\n             * This event is fired when play animator.\n             * @event Animator#play\n             */\n            this.trigger(PLAY);\n            return true;\n        }\n        return false;\n    }\n    /**\n      * play animator\n      * @return {Animator} An instance itself.\n      */\n    public play(toTime?: number) {\n        const state = this.state;\n        const delay = state[DELAY];\n        const currentTime = this.getTime();\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n            this.setTime(-delay, true);\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            state[PREV_TIME] = time;\n            this.tick(time, toTime);\n        });\n        this.start();\n        return this;\n    }\n    /**\n      * pause animator\n      * @return {Animator} An instance itself.\n      */\n    public pause(): this {\n        const state = this.state;\n\n        if (state[PLAY_STATE] !== PAUSED) {\n            state[PLAY_STATE] = PAUSED;\n            /**\n             * This event is fired when animator is paused.\n             * @event Animator#paused\n             */\n            this.trigger(PAUSED);\n        }\n        cancelAnimationFrame(this.timerId);\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public finish() {\n        this.setTime(0);\n        this.state[TICK_TIME] = 0;\n        this.end();\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public end() {\n        this.pause();\n        /**\n             * This event is fired when animator is ended.\n             * @event Animator#ended\n             */\n        this.trigger(ENDED);\n        return this;\n    }\n    /**\n      * set currentTime\n      * @param {Number|String} time - currentTime\n      * @return {Animator} An instance itself.\n      * @example\n\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n      */\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean) {\n        const activeDuration = this.getActiveDuration();\n        const state = this.state;\n        const prevTime = state[TICK_TIME];\n        const delay = state[DELAY];\n        let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n        state[TICK_TIME] = delay + currentTime;\n        if (currentTime < 0) {\n            currentTime = 0;\n        } else if (currentTime > activeDuration) {\n            currentTime = activeDuration;\n        }\n        state[CURRENT_TIME] = currentTime;\n        this.calculate();\n\n        if (isTick && !isParent) {\n            const tickTime = state[TICK_TIME];\n\n            if (prevTime < delay && time >= 0) {\n                this.start(0);\n            }\n            if (tickTime < prevTime || this.isEnded()) {\n                this.end();\n                return;\n            }\n        }\n        if (this.isDelay()) {\n            return this;\n        }\n        /**\n             * This event is fired when the animator updates the time.\n             * @event Animator#timeupdate\n             * @param {Object} param The object of data to be sent to an event.\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Number} param.iterationCount The iteration count that the animator is running.\n             */\n        this.trigger(TIMEUPDATE, {\n            currentTime,\n            time: this.getIterationTime(),\n            iterationCount: state[ITERATION],\n        });\n\n        return this;\n    }\n    /**\n      * Get the animator's current time\n      * @return {number} current time\n      * @example\n  animator.getTime();\n      */\n    public getTime(): number {\n        return this.state[CURRENT_TIME];\n    }\n    public getUnitTime(time: string | number) {\n        if (isString(time)) {\n            const duration = this.getDuration() || 100;\n\n            if (time === \"from\") {\n                return 0;\n            } else if (time === \"to\") {\n                return duration;\n            }\n            const { unit, value } = splitUnit(time);\n\n            if (unit === \"%\") {\n                !this.getDuration() && (this.setDuration(duration));\n                return toFixed(parseFloat(time) / 100 * duration);\n            } else if (unit === \">\") {\n                return value + THRESHOLD;\n            } else {\n                return value;\n            }\n        } else {\n            return toFixed(time);\n        }\n    }\n    /**\n       * Check if the current state of animator is delayed.\n       * @return {boolean} check delay state\n       */\n    public isDelay() {\n        const state = this.state;\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n\n        return delay > 0 && (tickTime < delay);\n    }\n    public setIteration(iterationCount: number): this {\n        const state = this.state;\n        const passIterationCount = Math.floor(iterationCount);\n        const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n        if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n            /**\n                  * The event is fired when an iteration of an animation ends.\n                  * @event Animator#iteration\n                  * @param {Object} param The object of data to be sent to an event.\n                  * @param {Number} param.currentTime The total time that the animator is running.\n                  * @param {Number} param.iterationCount The iteration count that the animator is running.\n                  */\n            this.trigger(\"iteration\", {\n                currentTime: state[CURRENT_TIME],\n                iterationCount: passIterationCount,\n            });\n        }\n        state[ITERATION] = iterationCount;\n        return this;\n    }\n    protected calculate() {\n        const state = this.state;\n        const iterationCount = state[ITERATION_COUNT];\n        const fillMode = state[FILL_MODE];\n        const direction = state[DIRECTION];\n        const duration = this.getDuration();\n        const time = this.getTime();\n        const iteration = duration === 0 ? 0 : time / duration;\n        let currentIterationTime = duration ? time % duration : 0;\n\n        if (!duration) {\n            this.setIterationTime(0);\n            return this;\n        }\n        this.setIteration(iteration);\n\n        // direction : normal, reverse, alternate, alternate-reverse\n        // fillMode : forwards, backwards, both, none\n        const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n        const isFiniteDuration = isFinite(duration);\n        if (isFiniteDuration && isReverse) {\n            currentIterationTime = duration - currentIterationTime;\n        }\n        if (isFiniteDuration && iterationCount !== INFINITE) {\n            const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n            // fill forwards\n            if (iteration >= iterationCount) {\n                currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n                isReverse && (currentIterationTime = duration - currentIterationTime);\n            }\n        }\n        this.setIterationTime(currentIterationTime);\n        return this;\n    }\n    private tick(now: number, to?: number) {\n        if (this.isPaused()) {\n            return;\n        }\n        const state = this.state;\n        const playSpeed = state[PLAY_SPEED];\n        const prevTime = state[PREV_TIME];\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n        const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n        state[PREV_TIME] = now;\n        this.setTime(currentTime - delay, true);\n        if (to && to * 1000 < now) {\n            this.pause();\n        }\n        if (state[PLAY_STATE] === PAUSED) {\n            return;\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            this.tick(time, to);\n        });\n    }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator<T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> {\n    setId(id: number | string): this;\n    getId(): number | string;\n    getIterationTime(): number;\n    setIterationTime(time: number): this;\n    setDelay(delay: number): this;\n    getDelay(): number;\n    setFillMode(fillMode: FillModeType): this;\n    getFillMode(): FillModeType;\n    setIterationCount(iterationCount: IterationCountType): this;\n    getIterationCount(): IterationCountType;\n    setDirection(direction: DirectionType): this;\n    getDirection(): DirectionType;\n    setPlayState(playState: PlayStateType): this;\n    getPlayState(): PlayStateType;\n    setPlaySpeed(playSpeed: number): this;\n    getPlaySpeed(): number;\n    setDuration(duration: number): this;\n    getDuration(): number;\n    getEasing(): EasingType;\n    getEasingName(): string;\n}\nexport default Animator;\n","import {\n    ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames, isFixed, getNames, getEasing } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport {\n    isObject, isArray, isString,\n    ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined\n} from \"@daybrush/utils\";\nimport { NameType } from \"./types\";\n\nfunction toInnerProperties(obj: IObject<string>) {\n    if (!obj) {\n        return \"\";\n    }\n    const arrObj = [];\n\n    for (const name in obj) {\n        arrObj.push(`${name.replace(/\\d$/g, \"\")}(${obj[name]})`);\n    }\n    return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n    return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n    for (const name in from) {\n        const value = from[name];\n        const type = getType(value);\n\n        if (type === PROPERTY) {\n            to[name] = toValue ? value.toValue() : value.clone();\n        } else if (type === FUNCTION) {\n            to[name] = toValue ? getValue([name], value) : value;\n        } else if (type === ARRAY) {\n            to[name] = value.slice();\n        } else if (type === OBJECT) {\n            if (isObject(to[name]) && !isPropertyObject(to[name])) {\n                merge(to[name], value, toValue);\n            } else {\n                to[name] = clone(value, toValue);\n            }\n        } else {\n            to[name] = from[name];\n        }\n    }\n    return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n    return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n        return value.toValue();\n    } else if (type === FUNCTION) {\n        if (names[0] !== TIMING_FUNCTION) {\n            return getValue(names, value());\n        }\n    } else if (type === OBJECT) {\n        return clone(value, true);\n    }\n    return value;\n}\n/**\n* Animation's Frame\n*/\nclass Frame {\n    public properties: IObject<any>;\n    /**\n     * @param - properties\n     * @example\n  const frame = new Scene.Frame({\n      display: \"none\"\n      transform: {\n          translate: \"50px\",\n          scale: \"5, 5\",\n      }\n  });\n     */\n    constructor(properties: any = {}) {\n        this.properties = {};\n        this.set(properties);\n    }\n    /**\n      * get property value\n      * @param {...Number|String|PropertyObject} args - property name or value\n      * @example\n      frame.get(\"display\") // => \"none\", \"block\", ....\n      frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n      */\n    public get(...args: NameType[]) {\n        const value = this.raw(...args);\n\n        return getValue(getPropertyName(args), value);\n    }\n\n    public raw(...args: NameType[]) {\n        return getValueByNames(getPropertyName(args), this.properties);\n    }\n    /**\n      * remove property value\n      * @param {...String} args - property name\n      * @return {Frame} An instance itself\n      * @example\n      frame.remove(\"display\")\n      */\n    public remove(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return this;\n        }\n        const value = getValueByNames(params, this.properties, length - 1);\n\n        if (isObject(value)) {\n            delete value[params[length - 1]];\n        }\n        return this;\n    }\n    /**\n      * set property\n      * @param {...Number|String|PropertyObject} args - property names or values\n      * @return {Frame} An instance itself\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n      filter: {\n          brightness: \"50%\",\n          grayscale: \"100%\"\n      }\n  });\n\n  // two parameters\n  frame.set(\"transform\", {\n      translate: \"10px, 10px\",\n      scale: \"1\",\n  });\n\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n    */\n    public set(...args: any[]) {\n        const self = this;\n        const length = args.length;\n        const params = args.slice(0, -1);\n        const value = args[length - 1];\n        const firstParam = params[0];\n\n        if (length === 1 && value instanceof Frame) {\n            self.merge(value);\n        } else if (firstParam in ALIAS) {\n            self._set(ALIAS[firstParam], value);\n        } else if (length === 2 && isArray(firstParam)) {\n            self._set(firstParam, value);\n        } else if (isPropertyObject(value)) {\n            if (isRole(params)) {\n                self.set(...params, toObject(value));\n            } else {\n                self._set(params, value);\n            }\n        } else if (isArray(value)) {\n            self._set(params, value);\n        } else if (isObject(value)) {\n            if (!self.has(...params) && isRole(params)) {\n                self._set(params, {});\n            }\n            for (const name in value) {\n                self.set(...params, name, value[name]);\n            }\n        } else if (isString(value)) {\n            if (isRole(params, true)) {\n                if (isFixed(params) || !isRole(params)) {\n                    this._set(params, value);\n                } else {\n                    const obj = toPropertyObject(value);\n\n                    if (isObject(obj)) {\n                        self.set(...params, obj);\n                    }\n                }\n                return this;\n            } else {\n                const { styles, length: stylesLength } = splitStyle(value);\n\n                for (const name in styles) {\n                    self.set(...params, name, styles[name]);\n                }\n                if (stylesLength) {\n                    return this;\n                }\n            }\n            self._set(params, value);\n        } else {\n            self._set(params, value);\n        }\n        return self;\n    }\n    /**\n      * Gets the names of properties.\n      * @return the names of properties.\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n  });\n\n  // [[\"display\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n  console.log(frame.getNames());\n    */\n    public getNames(): string[][] {\n        return getNames(this.properties, []);\n    }\n    /**\n      * check that has property.\n      * @param {...String} args - property name\n      * @example\n      frame.has(\"property\", \"display\") // => true or false\n      */\n    public has(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return false;\n        }\n        return !isUndefined(getValueByNames(params, this.properties, length));\n    }\n    /**\n      * clone frame.\n      * @return {Frame} An instance of clone\n      * @example\n      frame.clone();\n      */\n    public clone() {\n        const frame = new Frame();\n\n        return frame.merge(this);\n    }\n    /**\n      * merge one frame to other frame.\n      * @param - target frame.\n      * @return {Frame} An instance itself\n      * @example\n      frame.merge(frame2);\n      */\n    public merge(frame: Frame) {\n        const properties = this.properties;\n        const frameProperties = frame.properties;\n\n        if (frameProperties) {\n            merge(properties, frameProperties);\n        }\n        return this;\n    }\n    /**\n      * Specifies an css object that coverted the frame.\n      * @return {object} cssObject\n      */\n    public toCSSObject() {\n        const properties = this.get();\n        const cssObject: IObject<string> = {};\n\n        for (const name in properties) {\n            if (isRole([name], true)) {\n                continue;\n            }\n            const value = properties[name];\n\n            if (name === TIMING_FUNCTION) {\n                cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n                    (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n            } else {\n                cssObject[name] = value;\n            }\n        }\n        const transform = toInnerProperties(properties[TRANSFORM_NAME]);\n        const filter = toInnerProperties(properties.filter);\n\n        TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n        FILTER && filter && (cssObject[FILTER] = filter);\n        return cssObject;\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * @return {string} cssText\n      */\n    public toCSS() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n\n        for (const name in cssObject) {\n            cssArray.push(`${name}:${cssObject[name]};`);\n        }\n        return cssArray.join(\"\");\n    }\n    private _set(args: NameType[], value: any) {\n        let properties = this.properties;\n        const length = args.length;\n\n        for (let i = 0; i < length - 1; ++i) {\n            const name = args[i];\n\n            !(name in properties) && (properties[name] = {});\n            properties = properties[name];\n        }\n        if (!length) {\n            return;\n        }\n        if (length === 1 && args[0] === TIMING_FUNCTION) {\n            properties[TIMING_FUNCTION] = getEasing(value);\n        } else {\n            const lastParam = args[length - 1];\n            properties[lastParam] = isString(value) && !isFixed(args)\n                ? toPropertyObject(value, lastParam)\n                : value;\n        }\n    }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY, dot as dotNumber } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n    toFixed,\n    isFixed,\n    playCSS,\n    toId,\n    exportCSS,\n    getRealId,\n    makeId,\n    isPausedCSS,\n    isRole,\n    isInProperties,\n    getValueByNames,\n    isEndedCSS,\n    setPlayCSS,\n    getNames,\n    updateFrame,\n} from \"./utils\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n    START_ANIMATION,\n    PREFIX, THRESHOLD,\n    TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, INFINITE,\n    REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n    EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION, DATA_SCENE_ID, SELECTOR, ROLES, CURRENT_TIME\n} from \"./consts\";\nimport {\n    isObject, isArray, isUndefined, decamelize,\n    ANIMATION, fromCSS, addClass, removeClass, hasClass,\n    KEYFRAMES, requestAnimationFrame, isFunction,\n    IObject, $, splitComma, toArray, isString, IArrayFormat,\n    dot as dotNumber,\n    find,\n    findIndex,\n} from \"@daybrush/utils\";\nimport {\n    NameType, RoleObject, AnimateElement, AnimatorState,\n    SceneItemState, SceneItemOptions, EasingType, PlayCondition, DirectionType\n} from \"./types\";\n\nfunction getNearTimeIndex(times: number[], time: number) {\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (times[i] === time) {\n            return [i, i];\n        } else if (times[i] > time) {\n            return [i > 0 ? i - 1 : 0, i];\n        }\n    }\n    return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: object) {\n    const cssArray = [];\n\n    for (const name in properties) {\n        cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n    }\n    return cssArray.join(\"\");\n}\nfunction addTime(times: number[], time: number) {\n    const length = times.length;\n    for (let i = 0; i < length; ++i) {\n        if (time < times[i]) {\n            times.splice(i, 0, time);\n            return;\n        }\n    }\n    times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (\n                    currentTime === lastTime\n                    && nextEntries.length\n                    && nextEntries[nextEntries.length - 1][0] === lastTime + delay\n                ) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemOptions, SceneItemState> {\n    public times: number[] = [];\n    public items: IObject<Frame> = {};\n    public names: RoleObject = {};\n    public elements: AnimateElement[] = [];\n    public temp: Frame;\n    private needUpdate: boolean = true;\n    private target: any;\n    private targetFunc: (frame: Frame) => void;\n\n    /**\n      * @param - properties\n      * @param - options\n      * @example\n      const item = new SceneItem({\n          0: {\n              display: \"none\",\n          },\n          1: {\n              display: \"block\",\n              opacity: 0,\n          },\n          2: {\n              opacity: 1,\n          }\n      });\n       */\n    constructor(properties?: any, options?: Partial<SceneItemOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const times = this.times;\n        const length = times.length;\n\n        return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n    }\n    /**\n      * get size of list\n      * @return {Number} length of list\n      */\n    public size() {\n        return this.times.length;\n    }\n    public setDuration(duration: number) {\n        if (!duration) {\n            return this;\n        }\n        const originalDuration = this.getDuration();\n\n        if (originalDuration > 0) {\n            const ratio = duration / originalDuration;\n            const { times, items } = this;\n            const obj: IObject<Frame> = {};\n\n            this.times = times.map(time => {\n                const time2 = toFixed(time * ratio);\n\n                obj[time2] = items[time];\n\n                return time2;\n            });\n            this.items = obj;\n        } else {\n            this.newFrame(duration);\n        }\n        return this;\n    }\n    public setId(id?: number | string) {\n        const state = this.state;\n\n        state.id = id || makeId(!!length);\n        const elements = this.elements;\n\n        if (elements.length && !state[SELECTOR]) {\n            const sceneId = toId(this.getId());\n\n            state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n            elements.forEach(element => {\n                element.setAttribute(DATA_SCENE_ID, sceneId);\n            });\n        }\n        return this;\n    }\n\n    /**\n      * Set properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n      */\n    public set(time: any, ...args: any[]) {\n        if (time instanceof SceneItem) {\n            return this.set(0, time);\n        } else if (isArray(time)) {\n            const length = time.length;\n\n            for (let i = 0; i < length; ++i) {\n                const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n                this.set(t, time[i]);\n            }\n        } else if (isObject(time)) {\n            for (const t in time) {\n                const value = time[t];\n\n                splitComma(t).forEach(eachTime => {\n                    const realTime = this.getUnitTime(eachTime);\n\n                    if (isNaN(realTime)) {\n                        getNames(value, [eachTime]).forEach(names => {\n                            const innerValue = getValueByNames(names.slice(1), value);\n                            const arr = isArray(innerValue) ?\n                                innerValue : [getValueByNames(names, this.target), innerValue];\n                            const length = arr.length;\n\n                            for (let i = 0; i < length; ++i) {\n                                this.newFrame(`${i / (length - 1) * 100}%`).set(...names, arr[i]);\n                            }\n                        });\n                    } else {\n                        this.set(realTime, value);\n                    }\n                });\n            }\n        } else if (!isUndefined(time)) {\n            const value = args[0];\n\n            splitComma(time + \"\").forEach(eachTime => {\n                const realTime = this.getUnitTime(eachTime);\n\n                if (value instanceof SceneItem) {\n                    const delay = value.getDelay();\n                    const frames = value.toObject(!this.hasFrame(realTime + delay));\n                    const duration = value.getDuration();\n                    const direction = value.getDirection();\n                    const isReverse = direction.indexOf(\"reverse\") > -1;\n\n                    for (const frameTime in frames) {\n                        const nextTime = isReverse ? duration - parseFloat(frameTime) : parseFloat(frameTime);\n                        this.set(realTime + nextTime, frames[frameTime]);\n                    }\n                } else if (args.length === 1 && isArray(value)) {\n                    value.forEach((item: any) => {\n                        this.set(realTime, item);\n                    });\n                } else {\n                    const frame = this.newFrame(realTime);\n\n                    frame.set(...args);\n                }\n            });\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Get properties of the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} args property's name or properties\n      * @return {Number|String|PropertyObejct} property value\n      * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n      */\n    public get(time: string | number, ...args: NameType[]) {\n        const frame = this.getFrame(time);\n\n        return frame && frame.get(...args);\n    }\n    public remove(time: string | number, ...args: any[]): this;\n    /**\n      * remove properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.remove(0, \"a\");\n      */\n    public remove(time: string | number, ...args: NameType[]) {\n        if (args.length) {\n            const frame = this.getFrame(time);\n\n            frame && frame.remove(...args);\n        } else {\n            this.removeFrame(time);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Append the item or object at the last time.\n      * @param - the scene item or item object\n      * @return An instance itself\n      * @example\n  item.append(new SceneItem({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  }));\n  item.append({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n  item.set(item.getDuration(), {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n      */\n    public append(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            this.set(this.getDuration(), item);\n        } else {\n            this.append(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n      * Push the front frames for the time and prepend the scene item or item object.\n      * @param - the scene item or item object\n      * @return An instance itself\n      */\n    public prepend(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            const unshiftTime = item.getDuration() + item.getDelay();\n            const firstFrame = this.getFrame(0);\n            // remove first frame\n            this.removeFrame(0);\n            this.unshift(unshiftTime);\n            this.set(0, item);\n            this.set(unshiftTime + THRESHOLD, firstFrame);\n        } else {\n            this.prepend(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n     * Push out the amount of time.\n     * @param - time to push\n     * @example\n   item.get(0); // frame 0\n   item.unshift(3);\n   item.get(3) // frame 0\n     */\n    public unshift(time: number) {\n        const { times, items } = this;\n        const obj: IObject<Frame> = {};\n\n        this.times = times.map(t => {\n            const time2 = toFixed(time + t);\n\n            obj[time2] = items[t];\n            return time2;\n        });\n        this.items = obj;\n        return this;\n    }\n    /**\n     * Get the frames in the item in object form.\n     * @return {}\n     * @example\n item.toObject();\n // {0: {display: \"none\"}, 1: {display: \"block\"}}\n     */\n    public toObject(isStartZero = true): IObject<Frame> {\n        const obj: IObject<Frame> = {};\n        const delay = this.getDelay();\n\n        this.forEach((frame: Frame, time: number) => {\n            obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + time] = frame.clone();\n        });\n        return obj;\n    }\n    /**\n     * Specifies an element to synchronize items' keyframes.\n     * @param {string} selectors - Selectors to find elements in items.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setSelector(\"#id.class\");\n     */\n    public setSelector(target: string | boolean | ((id: number | string) => string)) {\n        if (isFunction(target)) {\n            this.setElement(target(this.getId()));\n        } else {\n            this.setElement(target);\n        }\n        return this;\n    }\n    /**\n     * Get the elements connected to SceneItem.\n     */\n    public getElements(): AnimateElement[] {\n        return this.elements;\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElements(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>): this {\n        return this.setElement(target);\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n        const state = this.state;\n        let elements: AnimateElement[] = [];\n\n        if (!target) {\n            return this;\n        } else if (target === true || isString(target)) {\n            const selector = target === true ? `${state.id}` : target;\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n            elements = toArray($(matches ? matches[1] : selector, true));\n            state[SELECTOR] = selector;\n        } else {\n            elements = (target instanceof Element) ? [target] : toArray(target);\n        }\n        if (!elements.length) {\n            return this;\n        }\n        this.elements = elements;\n        this.setId(this.getId());\n        this.target = elements[0].style;\n        this.targetFunc = (frame: Frame) => {\n            const attributes = frame.get(\"attribute\");\n\n            if (attributes) {\n                for (const name in attributes) {\n                    elements.forEach(el => {\n                        el.setAttribute(name, attributes[name]);\n                    });\n                }\n            }\n            if (frame.has(\"html\")) {\n                const html = frame.get(\"html\");\n\n                elements.forEach(el => {\n                    el.innerHTML = html;\n                });\n            }\n            const cssText = frame.toCSS();\n\n            if (state.cssText !== cssText) {\n                state.cssText = cssText;\n\n                elements.forEach(el => {\n                    el.style.cssText += cssText;\n                });\n                return frame;\n            }\n        };\n        return this;\n    }\n    public setTarget(target: any): this {\n        this.target = target;\n        this.targetFunc = (frame: Frame) => {\n            const obj = frame.get();\n\n            for (const name in obj) {\n                target[name] = obj[name];\n            }\n        };\n        return this;\n    }\n    /**\n      * add css styles of items's element to the frame at that time.\n      * @param {Array} properties - elements to synchronize item's keyframes.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n      */\n    public setCSS(time: number, properties: string[]) {\n        this.set(time, fromCSS(this.elements, properties));\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frame = this.getNowFrame(iterationTime, easing);\n        const currentTime = this.getTime();\n\n        this.temp = frame;\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event SceneItem#animate\n         * @param {Number} param.currentTime The total time that the animator is running.\n         * @param {Number} param.time The iteration time during duration that the animator is running.\n         * @param {Frame} param.frame frame of that time.\n         */\n        this.trigger(\"animate\", {\n            frame,\n            currentTime,\n            time: iterationTime,\n        });\n        this.targetFunc && this.targetFunc(frame);\n        return this;\n    }\n    /**\n      * update property names used in frames.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.update();\n      */\n    public update() {\n        const names = {};\n        this.forEach(frame => {\n            updateFrame(names, frame.properties);\n        });\n        this.names = names;\n        this.needUpdate = false;\n        return this;\n    }\n    /**\n      * Create and add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} Created frame.\n      * @example\n  item.newFrame(time);\n      */\n    public newFrame(time: string | number) {\n        let frame = this.getFrame(time);\n\n        if (frame) {\n            return frame;\n        }\n        frame = new Frame();\n        this.setFrame(time, frame);\n        return frame;\n    }\n    /**\n      * Add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setFrame(time, frame);\n      */\n    public setFrame(time: string | number, frame: Frame) {\n        const realTime = this.getUnitTime(time);\n\n        this.items[realTime] = frame;\n        addTime(this.times, realTime);\n        this.needUpdate = true;\n        return this;\n    }\n    public getFrame(time: number | string, ...names: any[]): Frame;\n    /**\n      * get sceneItem's frame at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} sceneItem's frame at that time\n      * @example\n  const frame = item.getFrame(time);\n      */\n    public getFrame(time: number | string) {\n        return this.items[this.getUnitTime(time)];\n    }\n    public removeFrame(time: number | string, ...names: any[]): this;\n    /**\n      * remove sceneItem's frame at that time\n      * @param - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.removeFrame(time);\n      */\n    public removeFrame(time: number | string) {\n        const realTime = this.getUnitTime(time);\n        const items = this.items;\n        const index = this.times.indexOf(realTime);\n\n        delete items[realTime];\n\n        // remove time\n        if (index > -1) {\n            this.times.splice(index, 1);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * check if the item has a frame at that time\n      * @param {Number} time - frame's time\n      * @return {Boolean} true: the item has a frame // false: not\n      * @example\n  if (item.hasFrame(10)) {\n      // has\n  } else {\n      // not\n  }\n      */\n    public hasFrame(time: number | string) {\n        return this.getUnitTime(time) in this.items;\n    }\n    /**\n      * Check if keyframes has propery's name\n      * @param - property's time\n      * @return {boolean} true: if has property, false: not\n      * @example\n    item.hasName([\"transform\", \"translate\"]); // true or not\n      */\n    public hasName(args: string[]) {\n        this.needUpdate && this.update();\n        return isInProperties(this.names, args, true);\n    }\n    /**\n      * merge frame of the previous time at the next time.\n    * @param - The time of the frame to merge\n    * @param - The target frame\n      * @return {SceneItem} An instance itself\n      * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n      */\n    public mergeFrame(time: number | string, frame: Frame) {\n        if (frame) {\n            const toFrame = this.newFrame(time);\n\n            toFrame.merge(frame);\n        }\n        return this;\n    }\n    /**\n      * Get frame of the current time\n      * @param {Number} time - the current time\n      * @param {function} easing - the speed curve of an animation\n      * @return {Frame} frame of the current time\n      * @example\n  let item = new SceneItem({\n      0: {\n          display: \"none\",\n      },\n      1: {\n          display: \"block\",\n          opacity: 0,\n      },\n      2: {\n          opacity: 1,\n      }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n      */\n    public getNowFrame(time: number, easing?: EasingType, isAccurate?: boolean) {\n        this.needUpdate && this.update();\n        const frame = new Frame();\n        const [left, right] = getNearTimeIndex(this.times, time);\n        let realEasing = this.getEasing() || easing;\n        let nameObject = this.names;\n\n        if (this.hasName([TIMING_FUNCTION])) {\n            const nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n            isFunction(nowEasing) && (realEasing = nowEasing);\n        }\n        if (isAccurate) {\n            const prevFrame = this.getFrame(time);\n            const prevNames = updateFrame({}, prevFrame.properties);\n\n            for (const name in ROLES) {\n                if (name in prevNames) {\n                    prevNames[name] = nameObject[name];\n                }\n            }\n            nameObject = prevNames;\n        }\n        const names = getNames(nameObject, []);\n\n        names.forEach(properties => {\n            const value = this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n            if (isUndefined(value)) {\n                return;\n            }\n            frame.set(properties, value);\n        });\n        return frame;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        options && this.setOptions(options);\n\n        if (isArray(properties)) {\n            this.set(properties);\n        } else if (properties.keyframes) {\n            this.set(properties.keyframes);\n        } else {\n            for (const time in properties) {\n                if (time !== \"options\") {\n                    this.set({\n                        [time]: properties[time],\n                    });\n                }\n            }\n        }\n        if (options && options[DURATION]) {\n            this.setDuration(options[DURATION]);\n        }\n        return this;\n    }\n    /**\n       * clone SceneItem.\n       * @return {SceneItem} An instance of clone\n       * @example\n       * item.clone();\n       */\n    public clone() {\n        const item = new SceneItem();\n\n        item.setOptions(this.state);\n        this.forEach((frame: Frame, time: number) => {\n            item.setFrame(time, frame.clone());\n        });\n        return item;\n    }\n    /**\n       * executes a provided function once for each scene item.\n       * @param - Function to execute for each element, taking three arguments\n       * @return {Keyframes} An instance itself\n       */\n    public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n        const times = this.times;\n        const items = this.items;\n\n        times.forEach(time => {\n            callback(items[time], time, items);\n        });\n        return this;\n    }\n    public setOptions(options: Partial<SceneItemOptions> = {}) {\n        super.setOptions(options);\n        const { id, selector, elements, element, target } = options;\n\n        id && this.setId(id);\n        if (target) {\n            this.setTarget(target);\n        } else if (selector) {\n            this.setSelector(selector);\n        } else if (elements || element) {\n            this.setElement(elements || element);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition: PlayCondition = { className: START_ANIMATION },\n        parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n        const itemState = this.state;\n        const selector = itemState[SELECTOR];\n\n        if (!selector) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        itemState[DURATION] = originalDuration;\n        states.push(itemState);\n\n        const reversedStates = toArray(states).reverse();\n        const id = toId(getRealId(this));\n        const superParent = states[0];\n        const infiniteIndex = findIndex(reversedStates, state => {\n            return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n        }, states.length - 1);\n        const finiteStates = reversedStates.slice(0, infiniteIndex);\n        const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n            return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n        }, originalDuration);\n        const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n            return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n        }, 0);\n        const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n        const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n        const fillMode = superParent[FILL_MODE];\n        const direction = reversedStates[infiniteIndex][DIRECTION];\n        const cssText = makeAnimationProperties({\n            fillMode,\n            direction,\n            iterationCount,\n            delay: `${delay}s`,\n            name: `${PREFIX}KEYFRAMES_${id}`,\n            duration: `${duration / superParent[PLAY_SPEED]}s`,\n            timingFunction: easingName,\n        });\n        const selectors = splitComma(selector).map(sel => {\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n            if (matches) {\n                return [matches[1], matches[2]];\n            } else {\n                return [sel, \"\"];\n            }\n        });\n        const className = playCondition.className;\n        const selectorCallback = playCondition.selector;\n        const preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n\n        return `\n    ${preselector || selectors.map(([sel, peusdo]) => `${sel}.${className}${peusdo}`)} {${cssText}}\n    ${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {${ANIMATION}-play-state: paused;}\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{${this._toKeyframes(duration, finiteStates, direction)}}`;\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {SceneItem} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition,\n        duration?: number, options?: AnimatorState[]) {\n        if (!this.elements.length) {\n            return \"\";\n        }\n        const css = this.toCSS(playCondition, duration, options);\n        const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n        !isParent && exportCSS(getRealId(this), css);\n        return this;\n    }\n    public pause() {\n        super.pause();\n        isPausedCSS(this) && this.pauseCSS();\n        return this;\n    }\n    public pauseCSS() {\n        this.elements.forEach(element => {\n            addClass(element, PAUSE_ANIMATION);\n        });\n        return this;\n    }\n    public endCSS() {\n        this.elements.forEach(element => {\n            removeClass(element, PAUSE_ANIMATION);\n            removeClass(element, START_ANIMATION);\n        });\n        setPlayCSS(this, false);\n        return this;\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n      * Play using the css animation and keyframes.\n      * @param - Check if you want to export css.\n      * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n      * @param - The shorthand properties for six of the animation properties.\n      * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n      * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n      direction: \"reverse\",\n      fillMode: \"forwards\",\n  });\n      */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: object = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const elements = this.elements;\n        const length = elements.length;\n        const cssText = makeAnimationProperties(properties);\n\n        if (!length) {\n            return;\n        }\n        if (isPaused) {\n            elements.forEach(element => {\n                removeClass(element, PAUSE_ANIMATION);\n            });\n        } else {\n            elements.forEach(element => {\n                element.style.cssText += cssText;\n                if (hasClass(element, START_ANIMATION)) {\n                    removeClass(element, START_ANIMATION);\n                    requestAnimationFrame(() => {\n                        requestAnimationFrame(() => {\n                            addClass(element, START_ANIMATION);\n                        });\n                    });\n                } else {\n                    addClass(element, START_ANIMATION);\n                }\n            });\n        }\n        return elements[0];\n    }\n    public getNowValue(\n        time: number,\n        properties: string[],\n        left?: number,\n        right?: number,\n        isAccurate?: boolean,\n        easing?: EasingType,\n        usePrevValue?: boolean,\n    ) {\n        const times = this.times;\n        const length = times.length;\n\n        let prevTime: number;\n        let nextTime: number;\n        let prevFrame: Frame;\n        let nextFrame: Frame;\n        const isUndefinedLeft = isUndefined(left);\n        const isUndefinedRight = isUndefined(right);\n        if (isUndefinedLeft || isUndefinedRight) {\n            const indicies = getNearTimeIndex(times, time);\n            isUndefinedLeft && (left = indicies[0]);\n            isUndefinedRight && (right = indicies[1]);\n        }\n\n        for (let i = left; i >= 0; --i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                prevTime = times[i];\n                prevFrame = frame;\n                break;\n            }\n        }\n        const prevValue = prevFrame && prevFrame.raw(...properties);\n\n        if (isAccurate && !isRole([properties[0]])) {\n            return prevTime === time ? prevValue : undefined;\n        }\n        if (usePrevValue) {\n            return prevValue;\n        }\n        for (let i = right; i < length; ++i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                nextTime = times[i];\n                nextFrame = frame;\n                break;\n            }\n        }\n        const nextValue = nextFrame && nextFrame.raw(...properties);\n\n        if (!prevFrame || isUndefined(prevValue)) {\n            return nextValue;\n        }\n        if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n            return prevValue;\n        }\n        return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n    }\n    private _toKeyframes(duration: number, states: AnimatorState[], direction: DirectionType) {\n        const frames: IObject<string> = {};\n        const times = this.times.slice();\n\n        if (!times.length) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        (!this.getFrame(0)) && times.unshift(0);\n        (!this.getFrame(originalDuration)) && times.push(originalDuration);\n        const entries = getEntries(times, states);\n        const lastEntry = entries[entries.length - 1];\n\n        // end delay time\n        lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n        let prevTime = -1;\n\n        return entries.map(([time, keytime]) => {\n            if (!frames[keytime]) {\n                frames[keytime] =\n                    (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n                        this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSS();\n            }\n\n            let frameTime = time / duration * 100;\n\n            if (frameTime - prevTime < THRESHOLD) {\n                frameTime += THRESHOLD;\n            }\n            prevTime = frameTime;\n            return `${Math.min(frameTime, 100)}%{\n                ${time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime]}\n            }`;\n        }).join(\"\");\n    }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { SELECTOR, DURATION, DELAY, RUNNING } from \"./consts\";\nimport { playCSS, exportCSS, getRealId, isPausedCSS, isEndedCSS, setPlayCSS } from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport {\n    AnimateElement, SceneState, SceneOptions, EasingType,\n    AnimatorState, SceneItemOptions, PlayCondition\n} from \"./types\";\nimport Frame from \"./Frame\";\nimport ListMap from \"list-map\";\n\n/**\n * manage sceneItems and play Scene.\n * @sort 1\n */\nclass Scene extends Animator<SceneOptions, SceneState> {\n    /**\n    * version info\n    * @type {string}\n    * @example\n    * Scene.VERSION // #__VERSION__#\n    */\n    public static VERSION: string = \"#__VERSION__#\";\n    public items: ListMap<Scene | SceneItem> = new ListMap();\n    public temp: IObject<Frame>;\n    /**\n    * @param - properties\n    * @param - options\n    * @example\n    const scene = new Scene({\n      item1: {\n        0: {\n          display: \"none\",\n        },\n        1: {\n          display: \"block\",\n          opacity: 0,\n        },\n        2: {\n          opacity: 1,\n        },\n      },\n      item2: {\n        2: {\n          opacity: 1,\n        },\n      }\n    });\n      */\n    constructor(properties?: {options?: Partial<SceneOptions>} & IObject<any>, options?: Partial<SceneOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        let time = 0;\n\n        this.forEach(item => {\n            time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n        });\n        return time || this.state[DURATION];\n    }\n    public setDuration(duration: number) {\n        const items = this.items;\n        const sceneDuration = this.getDuration();\n\n        if (duration === 0 || !isFinite(sceneDuration)) {\n            return this;\n        }\n        if (sceneDuration === 0) {\n            this.forEach(item => {\n                item.setDuration(duration);\n            });\n        } else {\n            const ratio = duration / sceneDuration;\n\n            this.forEach(item => {\n                item.setDelay(item.getDelay() * ratio);\n                item.setDuration(item.getDuration() * ratio);\n            });\n        }\n        super.setDuration(duration);\n        return this;\n    }\n    public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n    /**\n    * get item in scene by name\n    * @param - The item's name\n    * @return {Scene | SceneItem} item\n    * @example\n    const item = scene.getItem(\"item1\")\n    */\n    public getItem(name: number | string) {\n        return this.items.get(name);\n    }\n    /**\n    * create item in scene\n    * @param {} name - name of item to create\n    * @param {} options - The option object of SceneItem\n    * @return {} Newly created item\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): Scene | SceneItem {\n        if (this.items.has(name)) {\n            return this.items.get(name);\n        }\n        const item = new SceneItem();\n\n        this.setItem(name, item);\n        item.setOptions(options);\n\n        return item;\n    }\n    /**\n    * remove item in scene\n    * @param - name of item to remove\n    * @return  An instance itself\n    * @example\n    const item = scene.newItem(\"item1\")\n\n    scene.removeItem(\"item1\");\n    */\n    public removeItem(name: number | string): this {\n        this.items.remove(name);\n        return this;\n    }\n    /**\n    * add a sceneItem to the scene\n    * @param - name of item to create\n    * @param - sceneItem\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public setItem(name: number | string, item: Scene | SceneItem) {\n        item.setId(name);\n        this.items.set(name, item);\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frames: IObject<any> = {};\n\n        this.forEach(item => {\n            item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, true, easing);\n\n            frames[item.getId()] = item.temp;\n        });\n        this.temp = frames;\n\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event Scene#animate\n         * @param {object} param The object of data to be sent to an event.\n         * @param {number} param.currentTime The total time that the animator is running.\n         * @param {number} param.time The iteration time during duration that the animator is running.\n         * @param {object} param.frames frames of that time.\n         * @example\nconst scene = new Scene({\n    a: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    },\n    b: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    }\n}).on(\"animate\", e => {\n    console.log(e.frames);\n    // {a: Frame, b: Frame}\n    console.log(e.frames.a.get(\"opacity\"));\n});\n             */\n        this.trigger(\"animate\", {\n            frames,\n            currentTime: this.getTime(),\n            time: iterationTime,\n        });\n\n        return this;\n    }\n    /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Scene} An instance itself\n     */\n    public forEach(\n        func: (\n            item: Scene | SceneItem,\n            id: string | number,\n            index: number,\n            items: IObject<Scene | SceneItem>,\n        ) => void,\n    ) {\n        const items = this.items;\n\n        items.forEach((item, id, index, obj) => {\n            func(item, id, index, obj);\n        });\n        return this;\n    }\n    public toCSS(\n        playCondition?: PlayCondition,\n        duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n        const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n        const styles: string[] = [];\n        const state = this.state;\n\n        state[DURATION] = this.getDuration();\n\n        this.forEach(item => {\n            styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n        });\n        return styles.join(\"\");\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {Scene} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]) {\n        const css = this.toCSS(playCondition, duration, parentStates);\n\n        (!parentStates || !parentStates.length) && exportCSS(getRealId(this), css);\n        return this;\n    }\n    public append(item: SceneItem | Scene) {\n        item.setDelay(item.getDelay() + this.getDuration());\n        this.setItem(getRealId(item), item);\n    }\n    public pauseCSS() {\n        return this.forEach(item => {\n            item.pauseCSS();\n        });\n    }\n    public pause() {\n        super.pause();\n\n        isPausedCSS(this) && this.pauseCSS();\n        this.forEach(item => {\n            item.pause();\n        });\n        return this;\n    }\n    public endCSS() {\n        this.forEach(item => {\n            item.endCSS();\n        });\n        setPlayCSS(this, false);\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.addPlayClass(isPaused, playClassName, properties);\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @return {Scene} An instance itself\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n    scene.playCSS();\n    scene.playCSS(false, {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n    });\n    */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: Partial<AnimatorState> = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public set(properties: any, ...args: any[]): this;\n    /**\n      * Set properties to the Scene.\n      * @param - properties\n      * @return An instance itself\n      * @example\nscene.set({\n    \".a\": {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        },\n    },\n});\n// 0\nconsole.log(scene.getItem(\".a\").get(0, \"opacity\"));\n// 1\nconsole.log(scene.getItem(\".a\").get(1, \"opacity\"));\n      */\n    public set(properties: any) {\n        this.load(properties);\n        return this;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        if (!properties) {\n            return this;\n        }\n        const selector = options && options[SELECTOR] || this.state[SELECTOR];\n        for (const name in properties) {\n            if (name === \"options\") {\n                continue;\n            }\n            const object = properties[name];\n            let item;\n\n            if (object instanceof Scene || object instanceof SceneItem) {\n                this.setItem(name, object);\n                item = object;\n            } else if (isFunction(object) && selector) {\n                const elements =\n                    IS_WINDOW\n                        ? $(`${isFunction(selector) ? selector(name) : name}`, true) as IArrayFormat<AnimateElement>\n                        : ([] as AnimateElement[]);\n                const length = elements.length;\n                const scene = new Scene();\n\n                for (let i = 0; i < length; ++i) {\n                    (scene.newItem(i) as SceneItem).setId().setElement(elements[i]).load(object(i, elements[i]));\n                }\n                this.setItem(name, scene);\n                continue;\n            } else {\n                item = this.newItem(name);\n                item.load(object);\n            }\n            selector && item.setSelector(selector);\n        }\n        this.setOptions(options);\n    }\n    public setOptions(options: Partial<SceneState> = {}): this {\n        super.setOptions(options);\n\n        const selector = options.selector;\n\n        if (selector) {\n            this.state[SELECTOR] = selector;\n        }\n        return this;\n    }\n    public setSelector(target?: string | boolean | ((id: number | string) => string)) {\n        const state = this.state;\n        const selector = target || state[SELECTOR];\n\n        state[SELECTOR] = selector;\n        const isItFunction = isFunction(target);\n        if (selector) {\n            this.forEach((item, name) => {\n                item.setSelector(isItFunction ? (target as (id: number | string) => string)(name) : selector);\n            });\n        }\n        return this;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const result = super.start(delay);\n\n        if (result) {\n            this.forEach(item => {\n                item.start(0);\n            });\n        } else {\n            this.forEach(item => {\n                item.setPlayState(RUNNING);\n            });\n        }\n        return result;\n    }\n}\n\nexport default Scene;\n","import { IObject } from \"@daybrush/utils\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { SceneOptions, SceneItemOptions } from \"./types\";\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    return new SceneItem(properties, options).play();\n}\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n    (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["cubic","y1","y2","t","t2","bezier","x1","x2","func","x","dx","Math","abs","solveFromX","max","min","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","html","ALIAS","easing","FIXED","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","EASINGS","OPTIONS","EVENTS","events","name","callback","once","this","isObject","n","_on","isArray","forEach","_this","push","callback2","_i","args","off","callbacks","index","indexOf","splice","data","target","type","currentTarget","toArray","apply","value","options","setOptions","isString","split","separator","newOptions","length","prefix","suffix","model","PropertyObject","map","v","clone","join","toValue","arrayToColorObject","arr","RGBA","arrayToPropertyObject","toPropertyObject","values","splitComma","splitSpace","exec","text","afterModel","COLOR_MODELS","stringToRGBA","obj","stringToBracketObject","charAt","result","stringToColorObject","isPropertyObject","getType","OBJECT","ARRAY","PROPERTY","STRING","NUMBER","isPureObject","constructor","Object","getNames","names","stack","concat","pop","slice","updateFrame","properties","toFixed","num","round","getValueByNames","i","isInProperties","roles","isCheckTrue","role","isRole","isFixed","setPlayCSS","item","isActivate","state","isPausedCSS","isPaused","isEndedCSS","isEnded","exportCSS","id","css","styleId","toId","styleElement","$","innerText","document","body","insertAdjacentHTML","makeId","selector","random","IS_WINDOW","getRealId","getId","setId","match","playCSS","isExportCSS","playClassName","ANIMATION","getPlayState","className","addPlayClass","setTime","el","animationend","finish","animationstart","trigger","duration","getDuration","isZeroDuration","isFinite","removeEvent","animationiteration","currentTime","iterationCount","setIteration","addEvent","addAnimationEvent","setPlayState","getEasing","curveArray","parseFloat","isDirectionReverse","iteration","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","tslib_1","setDuration","setEasing","getActiveDuration","Infinity","getTime","toTime","timerId","requestAnimationFrame","tick","start","cancelAnimationFrame","end","pause","isTick","isParent","activeDuration","getUnitTime","calculate","isDelay","getIterationTime","unit","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","isReverse","isFiniteDuration","now","to","Animator","getter","setter","parent","prototype","camelize","GetterSetter","EventTrigger","toInnerProperties","arrObj","replace","merge","from","FUNCTION","getValue","getPropertyName","set","raw","params","self","firstParam","Frame","_set","toObject","object","size","get","has","str","matches","trim","styles","stylesLength","isUndefined","frame","frameProperties","cssObject","TRANSFORM","FILTER","toCSSObject","cssArray","lastParam","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","colorModel","parseInt","dotColor","type1","type2","isFunction1","isFunction2","splitUnit","v2","isNaN","dotNumber","getNearTimeIndex","times","makeAnimationProperties","decamelize","addEntry","entries","keytime","prevEntry","load","originalDuration","ratio_1","items_1","obj_1","time2","items","newFrame","elements","sceneId_1","element","setAttribute","SceneItem","eachTime","realTime","innerValue","value_1","getDelay","frames","hasFrame","getDirection","frameTime","nextTime","needUpdate","getFrame","remove","removeFrame","append","unshiftTime","firstFrame","unshift","prepend","isStartZero","isFunction","setElement","Element","style","targetFunc","attributes","html_1","innerHTML","cssText","toCSS","fromCSS","parentEasing","getNowFrame","temp","setFrame","addTime","update","isAccurate","left","right","realEasing","nameObject","hasName","nowEasing","getNowValue","prevNames","keyframes","setTarget","setSelector","playCondition","parentDuration","states","itemState","reversedStates","reverse","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","find","timingFunction","selectors","sel","selectorCallback","peusdo","KEYFRAMES","_toKeyframes","pauseCSS","addClass","removeClass","endCSS","hasClass","usePrevValue","prevFrame","nextFrame","isUndefinedLeft","isUndefinedRight","indicies","prevValue","undefined","nextValue","ratio","dotValue","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","getEntries","lastEntry","ListMap","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","parentStates","totalDuration","animtionElement","Scene","scene","newItem","isItFunction","isProperty","isFixedProperty","fixed","alias","play","others"],"mappings":"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"}