{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../src/PropertyObject.ts","../src/utils.ts","../src/EventTrigger.ts","../src/easing.ts","../src/Animator.ts","../src/utils/color.ts","../src/utils/property.ts","../src/Frame.ts","../src/Keyframes.ts","../src/utils/dot.ts","../src/utils/css.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["export type Role = true | RoleInterface;\nexport interface RoleInterface {\n  [role: string]: Role;\n}\nexport interface ObjectInterface<T> {\n  [name: string]: T;\n}\nexport type NameType = string | number;\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleInterface = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: ObjectInterface<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { \"animation-timing-function\": true, \"contents\": true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\ntype OptionType = [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"];\ntype EventType = [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const RGBA = \"rgba\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const FUNCTION = \"function\";\nexport const PROPERTY = \"property\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n\nconst prefixes: string[] = [\"webkit\", \"ms\", \"moz\", \"o\"];\nconst checkProperties = (property: string) => {\n  const styles = (document.body || document.documentElement).style as any;\n  const length = prefixes.length;\n\n  if (typeof styles[property] !== \"undefined\") {\n    return property;\n  }\n  for (let i = 0; i < length; ++i) {\n    const name = `-${prefixes[i]}-${property}`;\n\n    if (typeof styles[name] !== \"undefined\") {\n      return name;\n    }\n  }\n  return \"\";\n};\n\nexport const TRANSFORM = /*#__PURE__*/checkProperties(\"transform\");\nexport const FILTER = /*#__PURE__*/checkProperties(\"filter\");\nexport const ANIMATION = /*#__PURE__*/checkProperties(\"animation\");\nexport const KEYFRAMES = /*#__PURE__*/ANIMATION.replace(\"animation\", \"keyframes\");\n","interface PropertyObjectInterface {\n  prefix?: string;\n  suffix?: string;\n  model?: string;\n  type?: string;\n  separator?: string;\n  [key: string]: any;\n}\n/**\n* Make string, array to PropertyObject for the dot product\n* @memberof Scene\n*/\nclass PropertyObject {\n  public value: any[];\n  public options: PropertyObjectInterface;\n\n  /**\n\t* @param {String|Array} value - This value is in the array format ..\n\t* @param {String} separator - Array separator.\n\t* @example\nvar obj1 = new PropertyObject(\"1,2,3\", \",\");\nvar obj2 = new PropertyObject([1,2,3], \" \");\nvar obj3 = new PropertyObject(\"1$2$3\", \"$\");\n\n// rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options: PropertyObjectInterface = {}) {\n    this.options = {\n      prefix: \"\",\n      suffix: \"\",\n      model: \"\",\n      type: \"\",\n      separator: \",\",\n    };\n    this.setOptions(options);\n    this.init(value);\n  }\n  public setOptions(options: PropertyObjectInterface) {\n    (Object as any).assign(this.options, options);\n    return this;\n  }\n  public getOption(name: string) {\n    return this.options[name];\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n\n    return new PropertyObject(arr, {\n      separator: this.options.separator,\n      prefix: this.options.prefix,\n      suffix: this.options.suffix,\n      model: this.options.model,\n      type: this.options.type,\n    });\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.options.prefix + this.join() + this.options.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.options.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n  private init(value: string | any[]) {\n    const type = typeof value;\n\n    if (type === \"string\") {\n      this.value = (value as string).split(this.options.separator);\n    } else if (type === \"object\") {\n      this.value = (value as any[]);\n    } else {\n      this.value = [value];\n    }\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, ObjectInterface, MAXIMUM, FIXED, ALIAS, PAUSED, RUNNING, PLAY, ANIMATION, ENDED } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\n\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === \"object\") {\n    if (isArray(value)) {\n      return \"array\";\n    } else if (value instanceof PropertyObject) {\n      return \"property\";\n    }\n  } else if (type === \"string\" || type === \"number\") {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function isInProperties(roles: ObjectInterface<any>, args: any[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: any[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: any[]) {\n  return isInProperties(FIXED, args, true);\n}\nexport function isUndefined(value: any): value is undefined {\n  return (typeof value === \"undefined\");\n}\nexport function isObject(value: any): value is ObjectInterface<any> {\n  return value && (typeof value === \"object\");\n}\nexport function isArray(value: any): value is any[] {\n  return Array.isArray(value);\n}\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\nexport function splitUnit(text: string) {\n  const matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return { prefix: \"\", unit: \"\", value: NaN };\n  }\n  const prefix = matches[1];\n  const value = matches[2];\n  const unit = matches[3];\n\n  return { prefix, unit, value: parseFloat(value) };\n}\n// export function camelize(str: string) {\n// \treturn str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n// }\nexport function decamelize(str: string) {\n  return str.replace(/([a-z])([A-Z])/g, (all, letter, letter2) => `${letter}-${letter2.toLowerCase()}`);\n}\n\nexport interface IterationInterface {\n  currentTime: number;\n  iterationCount: number;\n  elapsedTime: number;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n  return item.state.playCSS && item.getPlayState() === PAUSED;\n}\nexport function playCSS(item: Scene | SceneItem, exportCSS: boolean, properties = {}) {\n  if (!ANIMATION || item.getPlayState() === RUNNING) {\n    return;\n  }\n  if (isPausedCSS(item)) {\n    item.addPlayClass(true, properties);\n  } else {\n    if (item.isEnded()) {\n      item.setTime(0);\n    }\n    exportCSS && item.exportCSS();\n    const el = item.addPlayClass(false, properties);\n\n    if (!el) {\n      return;\n    }\n    addAnimationEvent(item, el);\n    item.setState({ playCSS: true });\n  }\n  item.setPlayState(RUNNING);\n  item.trigger(PLAY);\n}\n\nexport function addAnimationEvent(item: Scene | SceneItem, el: HTMLElement) {\n  const duration = item.getDuration();\n  const isZeroDuration = !duration || !isFinite(duration);\n\n  const animationend = () => {\n    if (!isZeroDuration) {\n      item.setState({ playCSS: false });\n      item.finish();\n    }\n  };\n  item.on(ENDED, () => {\n    el.removeEventListener(\"animationend\", animationend);\n    el.removeEventListener(\"animationiteration\", animationiteration);\n  });\n  const animationiteration = ({elapsedTime}: any) => {\n    const currentTime = elapsedTime;\n    const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n    item.state.currentTime = currentTime;\n    item.setCurrentIterationCount(iterationCount);\n  };\n  el.addEventListener(\"animationend\", animationend);\n  el.addEventListener(\"animationiteration\", animationiteration);\n}\n","import { isObject } from \"./utils\";\n\ntype CallbackType = (...args: any[]) => any;\ninterface EventParamterType {\n  [name: string]: CallbackType | CallbackType[];\n}\n/**\n* attach and trigger event handlers.\n* @memberof Scene\n*/\nclass EventTrigger {\n  private events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n\t*/\n  public on(name: string | EventParamterType, callback?: CallbackType | CallbackType[]) {\n    const events = this.events;\n\n    if (isObject(name)) {\n      for (const i in name) {\n        this.on(i, name[i]);\n      }\n      return this;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return this;\n    }\n    if (isObject(callback)) {\n      (callback as CallbackType[]).forEach(func => this.on(name, func));\n      return this;\n    }\n    const event = events[name];\n\n    event.push(callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param {String} name - event's name\n\t* @param {Function} [...data] - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const event = events[name];\n\n    if (data.length) {\n      const target = data[0];\n\n      target.type = name;\n      target.currentTarget = this;\n      !target.target && (target.target = this);\n    }\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n}\nexport default EventTrigger;\n","export interface EasingFunctionInterface extends Function {\n  easingName?: string;\n}\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunctionInterface = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunctionInterface = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import {\n  ObjectInterface, THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED, RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE } from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, EasingFunctionInterface } from \"./easing\";\nimport { toFixed, isString, splitUnit } from \"./utils\";\n\nlet lastTime = 0;\nfunction camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\nconst requestAnimFrame = /*#__PURE__*/(() => {\n  return (window as any).requestAnimationFrame ||\n    (window as any).webkitRequestAnimationFrame ||\n    (window as any).mozRequestAnimationFrame ||\n    ((callback: (time: number) => void) => {\n      const currTime = Date.now();\n      const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      const id = window.setTimeout(() => {\n        callback(currTime + timeToCall);\n      }, 1000 / 60);\n      lastTime = currTime + timeToCall;\n      return id;\n    });\n})();\n\nexport type FillModeType = \"forwards\" | \"backwards\" | \"both\";\nexport type IterationCountType = number | \"infinite\";\nexport type EasingType = 0 | EasingFunctionInterface;\nexport type DirectionType = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\nexport type PlayStateType = \"paused\" | \"running\";\n\nexport interface StateInterface {\n  id?: string;\n  easing?: EasingType;\n  easingName?: string;\n  iterationCount?: IterationCountType;\n  delay?: number;\n  fillMode?: FillModeType;\n  direction?: DirectionType;\n  playSpeed?: number;\n  iterationTime?: number;\n  currentTime?: number;\n  tickTime?: number;\n  currentIterationCount?: number;\n  prevTime?: number;\n  playState?: PlayStateType;\n  duration?: number;\n  [key: string]: any;\n}\nexport function isDirectionReverse(currentIterationCount: number,\n                                   iteraiontCount: IterationCountType, direction: DirectionType) {\n  if (direction === REVERSE) {\n    return true;\n  } else if (iteraiontCount !== \"infinite\" && currentIterationCount === iteraiontCount && iteraiontCount % 1 === 0) {\n    return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n  }\n  return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorOptions The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n/**\n* play video, animation, the others\n* @memberof Scene\n* @class Animator\n* @extends Scene.EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n* @param {AnimatorOptions} [options] - animator's options\n* @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n*/\n\nconst setters = [ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n@GetterSetter(getters, setters, \"state\")\nclass Animator extends EventTrigger {\n  public state: StateInterface;\n  public options: ObjectInterface<any>;\n\n  constructor(options?: StateInterface) {\n    super();\n    this.options = {};\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      currentIterationCount: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    };\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @method Scene.Animator#setEasing\n\t* @param {array| function} curverArray - The speed curve of an animation.\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | EasingFunctionInterface): this {\n    const easing = Array.isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    this.setState({ easing, easingName });\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @method Scene.Animator#setOptions\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param {Object} [AnimatorOptions] - animator's options\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: StateInterface = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      ((name in this.state ? this.state : this.options) as StateInterface)[name] = value;\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @method Scene.Animator#getTotalDuration\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.state[DELAY] + this.getActiveDuration();\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @method Scene.Animator#getActiveDuration\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getActiveDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.getDuration() * (this.state[ITERATION_COUNT] as number);\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @method Scene.Animator#isEnded\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state.tickTime === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @method Scene.Animator#isPaused\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public setNext(animator: Animator): this {\n    this.on(ENDED, () => {\n      animator.play();\n    });\n    return this;\n  }\n  /**\n\t* play animator\n\t* @method Scene.Animator#play\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public play() {\n    this.state[PLAY_STATE] = RUNNING;\n    if (this.isEnded()) {\n      this.setTickTime(0);\n    }\n    this.state.tickTime = this.getTime();\n\n    requestAnimFrame((time: number) => {\n      this.state.prevTime = time;\n      this.tick(time);\n    });\n    /**\n\t\t * This event is fired when play animator.\n\t\t * @event Scene.Animator#play\n\t\t */\n    this.trigger(PLAY);\n\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @method Scene.Animator#pause\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public pause(): this {\n    this.state[PLAY_STATE] = PAUSED;\n    /**\n\t\t * This event is fired when animator is paused.\n\t\t * @event Scene.Animator#paused\n\t\t */\n    this.trigger(PAUSED);\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#finish\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public finish() {\n    this.end();\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#end\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public end() {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Scene.Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* reset animator\n\t* @method Scene.Animator#reset\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public reset() {\n    this.state.tickTime = 0;\n    this.setTime(0);\n    this.pause();\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @method Scene.Animator#setTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    this.state.tickTime = this.state.delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    this.state.currentTime = currentTime;\n    this.calculateIterationTime();\n\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Scene.Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: this.getIterationCount(),\n    });\n\n    return this;\n  }\n  public getState(name: string): any {\n    return this.state[name];\n  }\n  public setState(object: StateInterface) {\n    for (const name in object) {\n      this.state[name] = object[name];\n    }\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @method Scene.Animator#getTime\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state.currentTime;\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state.duration = duration);\n        return parseFloat(time) / 100 * duration;\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @method Scene.Animator#isDelay\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const { delay, tickTime } = this.state;\n\n    return delay > 0 && (tickTime < delay);\n  }\n  public setCurrentIterationCount(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n\n    if (state.currentIterationCount < passIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Scene.Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state.currentTime,\n        iterationCount: passIterationCount,\n      });\n    }\n    state.currentIterationCount = iterationCount;\n    return this;\n  }\n  protected calculateIterationTime() {\n    const { iterationCount, fillMode, direction } = this.state;\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const currentIterationCount = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setCurrentIterationCount(currentIterationCount);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(currentIterationCount, iterationCount, direction);\n\n    if (isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (currentIterationCount >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n  protected tick(now: number) {\n    const state = this.state;\n    const { playSpeed, prevTime } = state;\n    const currentTime = this.state.tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state.prevTime = now;\n    this.setTickTime(currentTime);\n    if (this.isEnded()) {\n      this.end();\n      return;\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n\n    requestAnimFrame((time: number) => {\n      this.tick(time);\n    });\n  }\n  private setTickTime(time: number) {\n    this.setTime(time - this.state.delay, true);\n  }\n}\n\n/**\n * Get a delay for the start of an animation.\n * @method Scene.Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Scene.Animator#setDelay\n * @param {number} delay - delay\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#getFillMode\n * @return {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#setFillMode\n * @param {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode - fillMode\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Scene.Animator#getIterationCount\n * @return {\"inifnite\"|number} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Scene.Animator#setIterationCount\n * @param {\"inifnite\"|number} iterationCount - iterationCount\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#getDirection\n * @return {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#setDirection\n * @param {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction - direction\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Scene.Animator#getPlayState\n * @return {\"paused\"|\"running\"} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Scene.Animator#setPlayState\n * @param {\"paused\"|\"running\"} playState - playState\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Scene.Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Scene.Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Scene.Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Scene.Animator#setDuration\n * @param {number} duration - duration\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Scene.Animator#getEasing\n * @return {0|function} easing\n */\n/**\n * Get the speed curve's name\n * @method Scene.Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Scene.Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\ninterface Animator {\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: IterationCountType): this;\n  getDirection(): IterationCountType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","import { RGBA } from \"../consts\";\n\n/**\n* @namespace\n* @name Color\n*/\nexport const COLOR_MODELS = [\"rgb\", RGBA, \"hsl\", \"hsla\"];\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {String} hex color\n* @example\nconsole.log(cutHex(\"#000000\"))\n// \"000000\"\n*/\nexport function cutHex(hex: string) {\n  return (hex.charAt(0) === \"#\") ? hex.substring(1) : hex;\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {Array} rgb color\n* @example\nconsole.log(hexToRGB(\"#000000\"));\n// [0, 0, 0]\nconsole.log(hexToRGB(\"#201045\"));\n// [32, 16, 69]\n*/\nexport function hexToRGB(hex: string) {\n  const h = cutHex(hex);\n  const r = parseInt(h.substring(0, 2), 16);\n  const g = parseInt(h.substring(2, 4), 16);\n  const b = parseInt(h.substring(4, 6), 16);\n  let a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n  return [r, g, b, a];\n}\n\n/**\n* convert 3-digit hex color to 6-digit hex color.\n* @memberof Color\n* @param {String} hex - 3-digit hex color\n* @return {String} 6-digit hex color\n* @example\nconsole.log(hex3to6(\"#123\"));\n// \"#112233\"\n*/\nexport function hex3to6(h: string) {\n  const r = h.charAt(1);\n  const g = h.charAt(2);\n  const b = h.charAt(3);\n  const arr = [\"#\", r, r, g, g, b, b];\n\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgb color.\n* @memberof Color\n* @param {Array} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1)\n* @return {Array} rgb color\n* @example\nconsole.log(hslToRGB([150, 0.5, 0.4]));\n// [51, 153, 102]\n*/\nexport function hslToRGB(hsl: number[]) {\n  let h = hsl[0];\n  const s = hsl[1];\n  const l = hsl[2];\n\n  if (h < 0) {\n    h +=  Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n  h %= 360;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n  const m = l - c / 2;\n  let rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n  const result = [\n    Math.round((rgb[0] + m) * 255),\n    Math.round((rgb[1] + m) * 255),\n    Math.round((rgb[2] + m) * 255),\n  ];\n\n  if (hsl.length > 3) {\n    result[3] = hsl[3];\n  }\n  return result;\n}\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {COLOR_MODELS, hexToRGB, hex3to6, hslToRGB} from \"./color\";\nimport {isString, isArray} from \"../utils\";\nimport { ObjectInterface, RGBA } from \"../consts\";\n\n/**\n* divide text by space.\n* @memberof Property\n* @function splitSpace\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitSpace(text: string) {\n  // divide comma(,)\n  const matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Property\n* @function splitComma\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitComma(text: string) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  const matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n\n  return matches ? matches.map(str => str.trim()) : [];\n}\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const length = properties.length;\n  const obj = [];\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      continue;\n    }\n    obj.push({[matches[1].trim()]: toPropertyObject(matches[2].trim())});\n  }\n  return obj;\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n\t* convert text with parentheses to PropertyObject[type=color].\n\t* If the values are not RGBA model, change them RGBA mdoel.\n\t* @memberof Property\n\t* @function toColorObject\n\t* @param {String|PropertyObject} value - color value \"rgba(0,0,0,1)\"\n\t* @return {PropertyObject} PropertyObject[type=color]\n\t* @example\ntoColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function toColorObject(value: PropertyObject | number[] | string) {\n  let colorObject;\n\n  if (value instanceof PropertyObject) {\n    colorObject = value;\n  } else if (isArray(value)) {\n    colorObject = arrayToColorObject(value);\n  } else if (isString(value)) {\n    return stringToColorObject(value);\n  }\n  let colorArray = colorObject.value;\n  const length = colorArray.length;\n\n  if (length === 4) {\n    colorArray[3] = parseFloat(colorArray[3]);\n  } else if (length === 3) {\n    colorArray[3] = 1;\n  }\n  colorObject.setOptions({type: \"color\"});\n  const colorModel = colorObject.getOption(\"model\").toLowerCase();\n\n  // rgb hsl model to CHANGE rgba hsla\n  // string -> number\n  if (colorModel === \"rgb\") {\n    colorObject.setOptions({\n      type: \"color\",\n      model: RGBA,\n      prefix: `${RGBA}(`,\n      suffix: \")\",\n    });\n  }\n  switch (colorModel) {\n    case \"rgb\":\n    case RGBA:\n      for (let i = 0; i < 3; ++i) {\n        colorArray[i] = parseInt(colorArray[i], 10);\n      }\n      break;\n    case \"hsl\":\n    case \"hsla\":\n      for (let i = 1; i < 3; ++i) {\n        if (colorArray[i].indexOf(\"%\") !== -1) {\n          colorArray[i] = parseFloat(colorArray[i]) / 100;\n        }\n      }\n      // hsl, hsla to rgba\n      colorArray = hslToRGB(colorArray);\n      return arrayToColorObject(colorArray);\n    default:\n  }\n  return colorObject;\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(value: string) {\n  // [prefix, value, other]\n  const matches = (/([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g).exec(value);\n\n  if (!matches || matches.length < 4) {\n    return value;\n  }\n  const model = matches[1] || \"\";\n  const text = matches[2];\n  let prefix = `${model}(`;\n  let suffix = `)${matches[3]}`;\n  let separator = \",\";\n  let values;\n  // divide comma(,)\n  const obj = toPropertyObject(text);\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.getOption(\"separator\");\n    values = obj.value;\n    prefix += obj.getOption(\"prefix\");\n    suffix = obj.getOption(\"suffix\") + suffix;\n  } else {\n    values = [text];\n  }\n  const result = new PropertyObject(values, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return toColorObject(result);\n  } else {\n    return result;\n  }\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  let colorArray: number[];\n\n  if (value.charAt(0) === \"#\") {\n    if (value.length === 4) {\n      colorArray = hexToRGB(hex3to6(value));\n    } else {\n      colorArray = hexToRGB(value);\n    }\n    return arrayToColorObject(colorArray);\n  } else if (value.indexOf(\"(\") !== -1) {\n    // in bracket.\n    return stringToBracketObject(value);\n  } else {\n    throw new Error(`Invalid Format : Not a Color - ${value}`);\n  }\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: string | ObjectInterface<any> | any[]): any {\n  if (!isString(value)) {\n    if (Array.isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: ObjectInterface<any> = {}) {\n  const model = object.getOption(\"model\");\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => toObject(obj, result));\n  }\n  return result;\n}\n","import {\n  TRANSFORM, FILTER, ObjectInterface, NameType,\n  ANIMATION, ALIAS, TIMING_FUNCTION, PROPERTY, FUNCTION} from \"./consts\";\nimport {isObject, isString, isArray, isRole, getType} from \"./utils\";\nimport {toPropertyObject, splitStyle, toObject} from \"./utils/property\";\nimport PropertyObject from \"./PropertyObject\";\n\nfunction toInnerProperties(obj: ObjectInterface<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\nfunction isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\n/* eslint-disable */\nfunction clone(target: ObjectInterface<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: ObjectInterface<any>, from: ObjectInterface<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name] = toValue ? getValue([name], value()) : value;\n    } else if (type === \"array\") {\n      to[name] = value.slice();\n    } else if (type === \"object\") {\n      if (isObject(to[name]) && !isPropertyObject(to[name])) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n\nfunction getValue(names: NameType[], value: any): any {\n  const type = getType(value);\n\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === \"object\") {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n* @class Scene.Frame\n* @param {Object} properties - properties\n* @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n */\nclass Frame {\n  public properties: ObjectInterface<any>;\n  constructor(properties: ObjectInterface<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @method Scene.Frame#get\n\t* @param {...Number|String|Scene.PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n\n    return getValue(args[0] in ALIAS ? ALIAS[args[0]] : args, value);\n  }\n\n  public raw(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties)) {\n        return undefined;\n      }\n      properties = properties[params[i]];\n    }\n    return properties;\n  }\n  /**\n\t* remove property value\n\t* @method Scene.Frame#remove\n\t* @param {...String} args - property name\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length - 1; ++i) {\n      if (!isObject(properties)) {\n        return this;\n      }\n      properties = properties[params[i]];\n    }\n    delete properties[params[length - 1]];\n    return this;\n  }\n  /**\n\t* set property\n\t* @method Scene.Frame#set\n\t* @param {...Number|String|Scene.PropertyObject} args - property names or values\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n\t*/\n  public set(...args: any[]) {\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      this._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      this._set(params[0], value);\n    } else if (isObject(value)) {\n      if (isArray(value)) {\n        this._set(params, value);\n      } else if (isPropertyObject(value)) {\n        if (isRole(params)) {\n          this.set(...params, toObject(value));\n        } else {\n          this._set(params, value);\n        }\n      } else if (value instanceof Frame) {\n        this.merge(value);\n      } else {\n        for (const name in value) {\n          this.set(...params, name, value[name]);\n        }\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          this.set(...params, obj);\n        }\n        return this;\n      } else {\n        const styles = splitStyle(value);\n\n        styles.forEach(style => {\n          this.set(...params, style);\n        });\n        if (styles.length) {\n          return this;\n        }\n      }\n      this._set(params, value);\n    } else {\n      this._set(params, value);\n    }\n    return this;\n  }\n  /**\n\t* check that has property.\n\t* @method Scene.Frame#has\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties) || !(params[i] in properties)) {\n        return false;\n      }\n      properties = properties[params[i]];\n    }\n    return true;\n  }\n  /**\n\t* clone frame.\n\t* @method Scene.Frame#clone\n\t* @return {Scene.Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    frame.merge(this);\n    return frame;\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @method Scene.Frame#merge\n\t* @param {Scene.Frame} frame - target frame.\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  public toObject() {\n    return clone(this.properties, true);\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @method Scene.Frame#toCSSObject\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.toObject();\n    const cssObject: ObjectInterface<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === TIMING_FUNCTION) {\n        cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value.easingName) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties.transform);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @method Scene.Frame#toCSS\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","import { ObjectInterface, RoleInterface } from \"./consts\";\nimport { isObject, isArray, isInProperties, toFixed } from \"./utils\";\nimport PropertyObject from \"./PropertyObject\";\nimport Frame from \"./Frame\";\n\nfunction getNames(names: ObjectInterface<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  for (const name in names) {\n    stack.push(name);\n\n    if (isObject(names[name])) {\n      arr = arr.concat(getNames(names[name], stack));\n    } else {\n      arr.push(stack.slice());\n    }\n    stack.pop();\n  }\n  return arr;\n}\nfunction updateFrame(names: ObjectInterface<any>, properties: ObjectInterface<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isObject(value) || isArray(value) || value instanceof PropertyObject) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n}\n/**\n* a list of objects in chronological order.\n* @memberof Scene\n*/\nclass Keyframes {\n  public times: number[];\n  public items: ObjectInterface<any>;\n  public names: RoleInterface;\n  /**\n\t */\n  constructor() {\n    this.times = [];\n    this.items = {};\n    this.names = {};\n  }\n  /**\n\t* A list of names\n\t* @return {string[][]} names\n\t* @example\nkeyframes.getNames(); // [[\"a\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n\t*/\n  public getNames() {\n    const names = this.names;\n\n    return getNames(names, []);\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param {...string[]} name - property's time\n\t* @return {Boolean} true: if has property, false: not\n\t* @example\nkeyframes.hasName(\"transform\", \"translate\"); // true or not\n\t*/\n  public hasName(...args: string[]) {\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t * update property names used in frames.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public update() {\n    const items = this.items;\n\n    for (const time in items) {\n      this.updateFrame(items[time]);\n    }\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} callback Function to execute for each element, taking three arguments\n\t * @param {Scene.Frame} [callback.item] The value of the item being processed in the keyframes.\n\t * @param {string} [callback.time] The time of the item being processed in the keyframes.\n\t * @param {object} [callback.items] The object that forEach() is being applied to.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: any, time: number, items: ObjectInterface<any>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n  }\n  /**\n\t* update property names used in frame.\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.Keyframes} An instance itself\n\t* @example\nkeyframes.updateFrame(frame);\n\t*/\n  public updateFrame(frame: Frame) {\n    if (!frame) {\n      return this;\n    }\n    const properties = frame.properties;\n    const names = this.names;\n\n    updateFrame(names, properties);\n    return this;\n  }\n  /**\n\t * Get how long an animation should take to complete one cycle.\n\t * @return {number} duration\n\t */\n  public getDuration() {\n    const times = this.times;\n\n    return times.length === 0 ? 0 : times[times.length - 1];\n  }\n  /**\n\t * Set how long an animation should take to complete one cycle.\n\t * @param {number} duration - duration\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public setDuration(duration: number, originalDuration: number = this.getDuration()) {\n    const ratio = duration / originalDuration;\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(time => {\n      const time2 = toFixed(time * ratio);\n\n      obj[time2] = items[time];\n\n      return time2;\n    });\n    this.items = obj;\n  }\n  /**\n\t * Set how much time you want to push ahead.\n\t * @param {number} time - time\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  /**\n\t* add object in list\n\t* @param {Number} time - frame's time\n\t* @param {Object} object - target\n\t* @return {Scene.Keyframes} An instance itself\n\t*/\n  public add(time: number, object: any) {\n    this.items[time] = object;\n    this.addTime(time);\n    return this;\n  }\n  /**\n\t* Check if keyframes has object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Boolean} true: if has time, false: not\n\t*/\n  public has(time: number) {\n    return time in this.items;\n  }\n  /**\n\t* get object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Object} object at that time\n\t*/\n  public get(time: number) {\n    return this.items[time];\n  }\n  /**\n\t* remove object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Keyframes} An instance itself\n\t*/\n  public remove(time: number) {\n    const items = this.items;\n\n    delete items[time];\n    this.removeTime(time);\n    return this;\n  }\n  private addTime(time: number) {\n    const times = this.times;\n    const length = times.length;\n    let pushIndex = length;\n\n    for (let i = 0; i < length; ++i) {\n      // if time is smaller than times[i], add time to index\n      if (time === times[i]) {\n        return this;\n      } else if (time < times[i]) {\n        pushIndex = i;\n        break;\n      }\n    }\n    this.times.splice(pushIndex, 0, time);\n    return this;\n  }\n  private removeTime(time: number) {\n    const index = this.times.indexOf(time);\n\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n}\nexport default Keyframes;\n","/**\n* @namespace\n* @name Dot\n*/\n\nimport { isArray, splitUnit } from \"../utils\";\nimport PropertyObject from \"../PropertyObject\";\nimport { EasingType } from \"../Animator\";\nimport { getType } from \"../utils\";\nimport { PROPERTY, FUNCTION } from \"../consts\";\nimport { toPropertyObject } from \"./property\";\n\n/**\n* The dot product of Arrays\n* @memberof Dot\n* @function dotArray\n* @param {Array} a1 value1\n* @param {Array} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {Array|Object} Array.\n* @example\ndotArray([0, 0, 0, 1],[50, 50, 50, 1],0.5, 0.5);\n// => [25, 25, 25, 1]\n*/\nexport function dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  }\n  if (!isArray(a2)) {\n    return a1;\n  }\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\n/**\n* The dot product of PropertyObject(type=color)\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Dot\n* @function dotColor\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} PropertyObject(type=color).\n* @example\nvar colorObject = ......; //PropertyObject(type=color, model=\"rgba\", value=[254, 254, 254, 1]);\ndotColor(\"#000\",  colorObject, 0.5, 0.5);\n// \"#000\" => PropertyObject(type=color, model=\"rgba\", value=[0, 0, 0, 1]);\n// return => PropertyObject(type=color, model=\"rgba\", value=[127, 127, 127, 1]);\n*/\nexport function dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  if (b2 === 0) {\n    return color2;\n  }\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.getOption(\"model\");\n  const model2 = color2.getOption(\"model\");\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n/**\n* The dot product of Objects\n* @memberof Dot\n* @function dotObject\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} Array with Separator.\n* @example\ndotObject(PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)]),\nPropertyObject([\"9px\", \"solid\", rgba(50, 50, 50, 1)]),\n0.5, 0.5);\n// => PropertyObject([\"5px\", \"solid\", rgba(25, 25, 25, 1)])\n*/\nexport function dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.getOption(\"type\");\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.getOption(\"separator\") || a2.getOption(\"separator\"),\n    prefix: a1.getOption(\"prefix\") || a2.getOption(\"prefix\"),\n    suffix: a1.getOption(\"suffix\") || a2.getOption(\"suffix\"),\n    model: a1.getOption(\"model\") || a2.getOption(\"model\"),\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === \"array\") {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  // split number and unit of the value.\n  const r1 = b1 / (b1 + b2);\n  const r2 = 1 - r1;\n\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = v1.value * r2 + v2.value * r1;\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import { ObjectInterface } from \"../consts\";\n\nexport function hasClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n  return !!element.className.match(new RegExp(`(\\\\s|^)${className}(\\\\s|$)`));\n}\n\nexport function addClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += ` ${className}`;\n  }\n}\n\nexport function removeClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    const reg = new RegExp(`(\\\\s|^)${className}(\\\\s|$)`);\n\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n\nexport function fromCSS(elements: HTMLElement | HTMLElement[] | NodeListOf<HTMLElement>, properties: string[]) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n  let element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n  const cssObject: ObjectInterface<any> = {};\n  const styles = window.getComputedStyle(element) as any;\n  const length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n  return cssObject;\n}\n","import Animator, { StateInterface, EasingType, isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  isUndefined,\n  isObject,\n  isArray,\n  decamelize,\n  toFixed,\n  isFixed,\n  playCSS,\n} from \"./utils\";\nimport Keyframes from \"./Keyframes\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n  KEYFRAMES, ANIMATION, START_ANIMATION,\n  PREFIX, THRESHOLD, ObjectInterface, NameType,\n  TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n  EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION\n} from \"./consts\";\nimport { addClass, removeClass, hasClass, fromCSS } from \"./utils/css\";\n\nfunction toId(text: string) {\n  return text.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nfunction makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 100000)}`;\n\n    if (!selector) {\n      return id;\n    }\n    const checkElement = document.querySelector(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nfunction makeAnimationProperties(properties: ObjectInterface<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)} : ${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\n\ntype ElementsType = HTMLElement[] | NodeListOf<HTMLElement>;\n/**\n* manage Frame Keyframes and play keyframes.\n* @memberof Scene\n* @extends Scene.Animator\n* @example\nconst item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator {\n  public keyframes: Keyframes;\n  private elements: ElementsType;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst item = new Scene.SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.keyframes = new Keyframes();\n    this.elements = [];\n    this.load(properties, options);\n  }\n  public getDuration() {\n    return Math.max(this.state[DURATION], this.keyframes.getDuration());\n  }\n  public setDuration(duration: number) {\n    if (duration === 0) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      this.keyframes.setDuration(duration, originalDuration);\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  /**\n\t* set the unique indicator of the item.\n\t* @method Scene.SceneItem#setId\n\t* @param {String} [id] - the indicator of the item.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nconst item = new SceneItem();\n\nitem.setId(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public setId(id?: string) {\n    const elements = this.elements;\n    const length = elements.length;\n\n    this.setState({ id: id || makeId(!!length) });\n    const sceneId = toId(this.getId());\n\n    this.options.selector || (this.options.selector = `[data-scene-id=\"${sceneId}\"]`);\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      elements[i].setAttribute(\"data-scene-id\", sceneId);\n    }\n    return this;\n  }\n  /**\n\t* Specifies the unique indicator of the item.\n\t* @method Scene.SceneItem#getId\n\t* @return {String} the indicator of the item.\n\t* @example\nconst item = scene.newItem(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public getId() {\n    return this.state.id;\n  }\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @method Scene.SceneItem#set\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any[] | number | string | ObjectInterface<any>, ...args: any[]) {\n    if (isObject(time)) {\n      this.load(time);\n      return this;\n    } else if (args[0]) {\n      if (args[0] instanceof SceneItem) {\n        const item: SceneItem = args[0];\n        const delay = item.getDelay();\n        const realTime = this.getUnitTime(time) + delay;\n        const { keys, values, frames } = item.getAllTimes(!!delay || !this.hasFrame(time));\n        const easing = this.getEasingName() !== item.getEasingName() ? item.getEasing() : 0;\n\n        keys.forEach(t => {\n          this.set(realTime + t, frames[values[t]]);\n        });\n        if (easing) {\n          this.set(realTime + keys[0], EASING, easing);\n          this.set(realTime + keys[keys.length - 1], EASING, \"initial\");\n        }\n        return this;\n      } else if (args.length === 1 && isArray(args[0])) {\n        args[0].forEach((item: any) => {\n          this.set(time, item);\n        });\n        return this;\n      }\n    }\n    const frame = this.newFrame(time);\n\n    frame.set(...args);\n    this.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|Scene.PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.update();\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | object) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t*/\n  public prepend(item: SceneItem | object) {\n    if (item instanceof SceneItem) {\n      const delay = item.getDelay();\n      const duration = item.getIterationCount() === INFINITE ? item.getDuration() : item.getActiveDuration();\n      const unshiftTime = duration + delay;\n      const firstFrame = this.keyframes.get(0);\n\n      if (firstFrame) {\n        this.keyframes.remove(0);\n      }\n      this.keyframes.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @method Scene.SceneItem#setSelector\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(selector: boolean | string) {\n    this.options.selector = selector === true ? this.state.id :\n      (selector || `[data-scene-id=\"${this.state.id}\"]`);\n    this.setElement(document.querySelectorAll(this.options.selector));\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n\t* @method Scene.SceneItem#setElement\n\t* @param {Element|Array|string} elements - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(elements: HTMLElement | ElementsType) {\n    if (!elements) {\n      return this;\n    }\n    this.elements = (elements instanceof Element) ? [elements] : elements;\n    this.setId(this.getId());\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @method Scene.SceneItem#setCSS\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @method Scene.SceneItem#update\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* update property names used in frame.\n\t* @method Scene.SceneItem#updateFrame\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.updateFrame(time, this.get(time));\n\t*/\n  public updateFrame(frame: Frame) {\n    this.keyframes.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#newFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#setFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    this.keyframes.add(this.getUnitTime(time), frame);\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @method Scene.SceneItem#getFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.keyframes.get(this.getUnitTime(time));\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @method Scene.SceneItem#hasFrame\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.keyframes.has(this.getUnitTime(time));\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @method Scene.SceneItem#removeFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const keyframes = this.keyframes;\n\n    keyframes.remove(time);\n    keyframes.update();\n\n    return this;\n  }\n  /**\n\t* Copy frame of the previous time at the next time.\n\t* @method Scene.SceneItem#copyFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(0) equal getFrame(1)\nitem.copyFrame(0, 1);\n\t*/\n  public copyFrame(fromTime: ObjectInterface<number> | number | string, toTime: number) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.copyFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const copyFrame = frame.clone();\n\n    this.setFrame(toTime, copyFrame);\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n\t* @method Scene.SceneItem#mergeFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number|string} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(fromTime: ObjectInterface<number> | number | string, toTime: number | string) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.mergeFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const toFrame = this.newFrame(toTime);\n\n    toFrame.merge(frame);\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @method Scene.SceneItem#getNowFrame\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Scene.Frame} frame of the current time\n\t* @example\nlet item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType) {\n    const frame = new Frame();\n    const names = this.keyframes.getNames();\n    const { left, right } = this._getNearTimeIndex(time);\n    const realEasing = this._getEasing(time, left, right, this.getEasing() || easing);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, left, right, properties, realEasing);\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (isArray(properties)) {\n      const length = properties.length;\n\n      for (let i = 0; i < length; ++i) {\n        const time = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(time, properties[i]);\n      }\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\" || time === \"keyframes\") {\n          continue;\n        }\n        const value = properties[time];\n        const realTime = this.getUnitTime(time);\n\n        if (typeof value === \"number\") {\n          this.mergeFrame(value, realTime);\n          continue;\n        }\n        this.set(realTime, value);\n      }\n    }\n    options && this.setOptions(options);\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @method Scene.SceneItem#clone\n\t * @param {AnimatorOptions} [options] animator options\n\t * @return {Scene.SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone(options = {}) {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    item.setOptions(options);\n    this.keyframes.forEach((frame: Frame, time: number) => item.setFrame(time, frame.clone()));\n    return item;\n  }\n  public setOptions(options: StateInterface = {}) {\n    super.setOptions(options);\n    const { id, selector, duration, elements } = options;\n\n    duration && this.setDuration(duration);\n    id && this.setId(id);\n    if (elements) {\n      this.setElement(elements);\n    } else if (selector) {\n      this.setSelector(selector === true ? this.state.id : selector);\n    }\n    return this;\n  }\n  public getAllTimes(isStartZero = true, options: StateInterface = {}) {\n    const times = this.keyframes.times.slice();\n    let length = times.length;\n    const keys: number[] = [];\n    const values: ObjectInterface<number> = {};\n\n    if (!length) {\n      return { keys: [], values: {}, frames: {} };\n    }\n    const frames: ObjectInterface<Frame> = {};\n    const duration = this.getDuration();\n    const direction = options[DIRECTION] || this.state[DIRECTION];\n    const isShuffle = direction === ALTERNATE || direction === ALTERNATE_REVERSE;\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(duration)) && times.push(duration);\n    length = times.length;\n    let iterationCount = options[ITERATION_COUNT] || this.state[ITERATION_COUNT];\n\n    iterationCount = iterationCount !== INFINITE ? iterationCount : 1;\n    const totalDuration = iterationCount * duration;\n\n    for (let i = 0; i < iterationCount; ++i) {\n      const isReverse = isDirectionReverse(i, iterationCount, direction);\n      const start = i * duration;\n\n      for (let j = 0; j < length; ++j) {\n        if (isShuffle && i !== 0 && j === 0) {\n          // pass duplicate\n          continue;\n        }\n        // isStartZero is keytimes[0] is 0 (i === 0 & j === 0)\n        const threshold = j === 0 && (i === 0 ? !isStartZero : !isShuffle) ? THRESHOLD : 0;\n        const keyvalue = toFixed(isReverse ? times[length - 1 - j] : times[j]);\n        const time = toFixed(isReverse ? duration - keyvalue : keyvalue);\n        const keytime = toFixed(start + time + threshold);\n\n        if (totalDuration < keytime) {\n          break;\n        }\n        keys.push(keytime);\n        values[keytime] = keyvalue;\n\n        if (!frames[keyvalue]) {\n          const frame = this.getFrame(keyvalue);\n\n          if (!frame || j === 0 || j === length - 1 || frame.has(\"transform\") || frame.has(\"filter\")) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n          } else {\n            frames[keyvalue] = frame;\n          }\n        }\n      }\n    }\n    if (keys[keys.length - 1] < totalDuration) {\n      // last time === totalDuration\n      const isReverse = isDirectionReverse(iterationCount, iterationCount, direction);\n      const keyvalue = toFixed(duration * (isReverse ? 1 - iterationCount % 1 : iterationCount % 1));\n\n      keys.push(totalDuration);\n      values[totalDuration] = keyvalue;\n      !frames[keyvalue] && (frames[keyvalue] = this.getNowFrame(keyvalue));\n    }\n    return { keys, values, frames };\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(parentDuration = this.getDuration(), options: StateInterface = {}) {\n    const state = this.state;\n    const selector = state.selector || this.options.selector;\n\n    if (!selector) {\n      return \"\";\n    }\n    const id = this._getId();\n    // infinity or zero\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n    const isZeroDuration = parentDuration === 0;\n    const duration = isZeroDuration ? this.getDuration() : parentDuration;\n    const playSpeed = (options[PLAY_SPEED] || 1);\n    const delay = ((options[DELAY] || 0) + (isZeroDuration ? state[DELAY] : 0)) / playSpeed;\n    const easingName = (state[EASING] && state[EASING_NAME]) ||\n      (isParent && options[EASING] && options[EASING_NAME]) || state[EASING_NAME];\n    const iterationCount = (!isZeroDuration && options[ITERATION_COUNT]) || state[ITERATION_COUNT];\n    const fillMode = (options[FILL_MODE] !== \"forwards\" && options[FILL_MODE]) || state[FILL_MODE];\n    const direction = options[DIRECTION] || state[DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${toId(id)}`,\n      duration: `${duration / playSpeed}s`,\n      timingFunction: easingName,\n    });\n\n    const css = `${selector}.${START_ANIMATION} {\n\t\t\t${cssText}\n\t\t}${selector}.${PAUSE_ANIMATION} {\n      ${ANIMATION}-play-state: paused;\n    }\n\t\t${this._toKeyframes(duration, !isZeroDuration && isParent)}`;\n\n    return css;\n  }\n  public exportCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    if (!this.elements.length) {\n      return;\n    }\n    const id = this._getId();\n    const styleElement: HTMLElement = document.querySelector(`#${PREFIX}${id}`);\n    const css = this.toCSS(duration, options);\n\n    if (styleElement) {\n      styleElement.innerText = css;\n    } else {\n      document.body.insertAdjacentHTML(\"beforeend\",\n        `<style id=\"${PREFIX}STYLE_${toId(id)}\">${css}</style>`);\n    }\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      addClass(elements[i], PAUSE_ANIMATION);\n    }\n  }\n  public endCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      const element = elements[i];\n\n      removeClass(element, PAUSE_ANIMATION);\n      removeClass(element, START_ANIMATION);\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem.playCSS();\nitem.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    playCSS(this, exportCSS, properties);\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const elements = this.elements;\n    const length = elements.length;\n    const cssText = makeAnimationProperties(properties);\n\n    if (!length) {\n      return;\n    }\n    if (isPaused) {\n      for (let i = 0; i < length; ++i) {\n        removeClass(elements[i], PAUSE_ANIMATION);\n      }\n    } else {\n      for (let i = 0; i < length; ++i) {\n        const element = elements[i];\n\n        element.style.cssText += cssText;\n        if (hasClass(element, START_ANIMATION)) {\n          removeClass(element, START_ANIMATION);\n          (el => {\n            requestAnimationFrame(() => {\n              requestAnimationFrame(() => {\n                addClass(el, START_ANIMATION);\n              });\n            });\n          })(element);\n        } else {\n          addClass(element, START_ANIMATION);\n        }\n      }\n    }\n    return elements[0];\n  }\n  private _getId() {\n    return this.state.id || this.setId().getId();\n  }\n  private _getEasing(time: number, left: number, right: number, easing: EasingType) {\n    if (this.keyframes.hasName(TIMING_FUNCTION)) {\n      const nowEasing = this._getNowValue(time, left, right, [TIMING_FUNCTION], 0, true);\n\n      return typeof nowEasing === \"function\" ? nowEasing : easing;\n    }\n    return easing;\n  }\n  private _toKeyframes(duration = this.getDuration(), isParent: boolean) {\n    const id = this._getId();\n    const state = this.state;\n    const playSpeed = state[PLAY_SPEED];\n    const iterationCount = state[ITERATION_COUNT];\n    const fillMode = state[FILL_MODE];\n    const delay = isParent ? state[DELAY] : 0;\n    const direction = isParent ? state[DIRECTION] : NORMAL;\n    const isReverse = direction === REVERSE || direction === ALTERNATE_REVERSE;\n    const { keys, values, frames } = this.getAllTimes(true, {\n      duration,\n      delay,\n      direction,\n      iterationCount: isParent && iterationCount !== INFINITE ? iterationCount : 1,\n      isCSS: true,\n    });\n    const length = keys.length;\n    const css: ObjectInterface<string> = {};\n    const keyframes: string[] = [];\n\n    if (!keys.length) {\n      return \"\";\n    }\n    for (const time in frames) {\n      css[time] = frames[time].toCSS();\n    }\n    const lastTime = keys[length - 1];\n    const lastCSS = css[values[lastTime]];\n\n    if (delay) {\n      const delayCSS = isReverse && (fillMode === \"both\" || fillMode === \"backwards\") ? lastCSS : css[0];\n      keyframes.push(`0%{${delayCSS}}`);\n      isReverse && keyframes.push(`${delay / playSpeed / duration * 100 - THRESHOLD}%{${delayCSS}}`);\n    }\n    keys.forEach(time => {\n      keyframes.push(`${(delay + time) / playSpeed / duration * 100}%{${css[values[time]]}}`);\n    });\n    // if (afterDelay) {\n    //   keyframes.push(`${lastTime / playSpeed / duration * 100 + THRESHOLD}%{${lastCSS}}`);\n    //   keyframes.push(`100%{${lastCSS}`);\n    // } else {\n    if ((delay + lastTime) / playSpeed < duration) {\n      // not 100%\n      keyframes.push(`100%{${lastCSS}`);\n    }\n    // }\n    return `@${KEYFRAMES} ${PREFIX}KEYFRAMES_${toId(id)}{\n\t\t\t${keyframes.join(\"\\n\")}\n\t\t}`;\n  }\n  private _getNowValue(\n    time: number,\n    left: number,\n    right: number,\n    properties: string[],\n    easing: EasingType = this.getEasing(),\n    usePrevValue: boolean = isFixed(properties),\n  ) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    let prevTime;\n    let nextTime;\n    let prevFrame;\n    let nextFrame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n  private _getNearTimeIndex(time: number) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (times[i] === time) {\n        return { left: i, right: i };\n      } else if (times[i] > time) {\n        return { left: i === 0 ? 0 : i - 1, right: i };\n      }\n    }\n    return { left: length - 1, right: length - 1 };\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event Scene.SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Scene.Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return frame;\n    }\n    const attributes = frame.get(\"attribute\");\n\n    if (attributes) {\n      for (const name in (attributes as any)) {\n        for (let i = 0; i < length; ++i) {\n          elements[i].setAttribute(name, attributes[name]);\n        }\n      }\n    }\n    const cssText = frame.toCSS();\n\n    if (this.state.cssText !== cssText) {\n      this.state.cssText = cssText;\n\n      for (let i = 0; i < length; ++i) {\n        elements[i].style.cssText += cssText;\n      }\n      return frame;\n    }\n  }\n}\n\nexport default SceneItem;\n","import Animator, { StateInterface, EasingType } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface, ANIMATE } from \"./consts\";\nimport Frame from \"./Frame\";\nimport { playCSS } from \"./utils\";\n\n/**\n* manage sceneItems and play Scene.\n* @extends Scene.Animator\n*/\nclass Scene extends Animator {\n\n  public items: ObjectInterface<Scene | SceneItem>;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst scene = new Scene({\n\t\titem1: {\n\t\t\t0: {\n\t\t\t\tdisplay: \"none\",\n\t\t\t},\n\t\t\t1: {\n\t\t\t\tdisplay: \"block\",\n\t\t\t\topacity: 0,\n\t\t\t},\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t},\n\t\titem2: {\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public setId(id: string = `scene${Math.floor(Math.random() * 100000)}`) {\n    this.state.id = id;\n    return this;\n  }\n  public getId() {\n    return this.state.id;\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  /**\n\t* get item in scene by name\n\t* @method Scene#getItem\n\t* @param {string} name - item's name\n\t* @return {Scene.SceneItem} item\n\t* @example\nconst item = scene.getItem(\"item1\")\n\t*/\n  public getItem(name: string) {\n    return this.items[name];\n  }\n  /**\n\t* create item in scene\n\t* @method Scene#newItem\n\t* @param {String} name - name of item to create\n\t* @param {StateOptions} options - The option object of SceneItem\n\t* @return {Sceme.SceneItem} Newly created item\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public newItem(name: string, options = {}) {\n    if (name in this.items) {\n      return this.items[name];\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n\t* add a sceneItem to the scene\n\t* @param {String} name - name of item to create\n\t* @param {Scene.SceneItem} item - sceneItem\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public setItem(name: string, item?: Scene | SceneItem) {\n    if (item instanceof Animator) {\n      item.setId(name);\n    }\n    this.items[name] = item;\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} func Function to execute for each element, taking three arguments\n\t * @param {Scene | Scene.SceneItem} [func.item] The value of the item being processed in the scene.\n\t * @param {string} [func.name] The name of the item being processed in the scene.\n\t * @param {object} [func.items] The object that forEach() is being applied to.\n\t * @return {Scene} An instance itself\n\t */\n  public forEach(func: (item?: Scene | SceneItem, name?: string, items?: ObjectInterface<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  /**\n\t * Export the CSS of the items to the style.\n\t * @return {Scene} An instance itself\n\t */\n  public exportCSS(duration: number = this.getDuration(), state?: StateInterface) {\n    const items = this.items;\n    let totalDuration = state ? this.getDuration() : duration;\n\n    if (!totalDuration || !isFinite(totalDuration)) {\n      totalDuration = 0;\n    }\n    for (const id in items) {\n      const item = items[id];\n\n      item.exportCSS(totalDuration, this.state);\n    }\n    return this;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(item.getId() || item.setId().getId(), item);\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].pauseCSS();\n    }\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public endCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].endCSS();\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const items = this.items;\n    let animtionElement: HTMLElement;\n\n    for (const id in items) {\n      const el = items[id].addPlayClass(isPaused, properties);\n\n      !animtionElement && (animtionElement = el);\n    }\n    return animtionElement;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @return {Scene} An instance itself\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nscene.playCSS();\nscene.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    playCSS(this, exportCSS, properties);\n    return this;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options.selector;\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setSelector(_: string | boolean) {\n    const isSelector = this.options.selector;\n\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n    const frames: ObjectInterface<ObjectInterface<any> | Frame> = {};\n\n    for (const id in items) {\n      const item = items[id];\n\n      frames[id] = item.animate(Math.max(iterationTime * item.getPlaySpeed() - item.getDelay(), 0), easing);\n    }\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frames frame of that time.\n\t\t */\n    this.trigger(ANIMATE, {\n      currentTime: this.getTime(),\n      time: iterationTime,\n      frames,\n    });\n    return frames;\n  }\n}\n\nexport default Scene;\n","\nimport { StateInterface } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface } from \"./consts\";\n\n/**\n * @namespace presets\n */\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func set\n * @param {string | string[]} property - property to set effect\n * @param {any[]} values - values of 100%\n * @param {AnimatorOptions} [options]\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function set(property: string | string[], values: any[], options: StateInterface) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @func zoomIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @func zoomOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @func wipeIn\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @func wipeOut\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func transition\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: ObjectInterface<any>, to: ObjectInterface<any>, duration?: number, time: number }) {\n  item1.set({\n    [time]: from,\n    [time + duration]: to,\n  });\n  item2.set({\n    0: to,\n    [duration]: from,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @func fadeIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @func fadeOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @func blink\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport Frame from \"./Frame\";\nimport Keyframes from \"./Keyframes\";\nimport PropertyObject from \"./PropertyObject\";\nimport Animator from \"./Animator\";\nimport * as _presets from \"./presets\";\n\n/**\n* version info\n* @name Scene.VERSION\n* @memberof Scene\n* @static\n* @type {string}\n* @example\n* Scene.VERSION // #__VERSION__#\n*/\nexport const VERSION: string = \"#__VERSION__#\";\nexport { SceneItem, Frame, Animator, Keyframes, PropertyObject };\nexport { bezier, EASE_IN_OUT, EASE_IN, EASE_OUT, EASE, LINEAR, steps, STEP_START, STEP_END } from \"./easing\";\nexport { set, transition, wipeIn, wipeOut, fadeIn, fadeOut, blink, zoomIn, zoomOut} from \"./presets\";\nexport { OPTIONS, EVENTS } from \"./consts\";\nexport { setRole, setAlias } from \"./utils\";\nexport { Scene as default };\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","RGBA","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","FUNCTION","PROPERTY","OPTIONS","EVENTS","prefixes","checkProperties","property","styles","document","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","value","options","prefix","suffix","model","type","separator","setOptions","init","Object","assign","this","index","PropertyObject","map","v","clone","join","toValue","func","forEach","split","getType","isArray","toFixed","num","Math","round","isInProperties","roles","args","isCheckTrue","role","isRole","isUndefined","isObject","Array","isString","splitUnit","text","matches","exec","unit","NaN","parseFloat","playCSS","item","exportCSS","properties","getPlayState","state","addPlayClass","isEnded","setTime","el","duration","getDuration","isZeroDuration","isFinite","animationend","setState","finish","on","removeEventListener","animationiteration","_a","elapsedTime","currentTime","iterationCount","setCurrentIterationCount","addEventListener","addAnimationEvent","setPlayState","trigger","events","callback","_this","push","callbacks","indexOf","splice","_i","data","event","target","currentTarget","apply","cubic","y1","y2","t","t2","bezier","x1","x2","x","dx","abs","solveFromX","max","min","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","lastTime","camelize","str","all","letter","toUpperCase","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","currTime","Date","now","timeToCall","id","setTimeout","isDirectionReverse","currentIterationCount","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","tslib_1","getter","setter","parent","curveArray","setDuration","setEasing","Infinity","getActiveDuration","getTime","animator","play","setTickTime","tick","end","pause","isTick","activeDuration","getUnitTime","calculateIterationTime","isDelay","getIterationTime","getIterationCount","object","passIterationCount","currentIterationTime","setIterationTime","isReverse","Animator","constructor","prototype","EventTrigger","COLOR_MODELS","hexToRGB","hex","h","charAt","substring","r","parseInt","g","b","a","isNaN","arrayToColorObject","arr","toColorObject","colorObject","stringToColorObject","colorArray","colorModel","getOption","toLowerCase","hsl","s","l","rgb","c","m","result","hslToRGB","stringToBracketObject","values","obj","toPropertyObject","arrayToPropertyObject","Error","match","trim","toInnerProperties","arrObj","isPropertyObject","merge","to","from","getValue","slice","names","set","raw","params","_set","toObject","size","get","Frame","splitStyle","frame","frameProperties","cssObject","toCSSObject","cssArray","times","items","getNames","stack","concat","pop","updateFrame","originalDuration","ratio","time2","addTime","removeTime","pushIndex","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","dotColor","type1","type2","isFunction1","isFunction2","r1","r2","v2","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","toId","makeAnimationProperties","letter2","keyframes","Keyframes","elements","load","selector","random","querySelector","makeId","sceneId","getId","setAttribute","SceneItem","getDelay","realTime_1","keys","values_1","frames_1","getEasingName","getEasing","newFrame","getFrame","update","unshiftTime","firstFrame","unshift","prepend","setElement","querySelectorAll","Element","setId","getComputedStyle","fromCSS","parentEasing","_animate","isNumber","setFrame","has","fromTime","toTime","copyFrame","mergeFrame","left","right","realEasing","_getEasing","_getNowValue","realTime","setSelector","isStartZero","frames","isShuffle","totalDuration","start","j","threshold","keyvalue","keytime","getNowFrame","parentDuration","_getId","isParent","cssText","timingFunction","_toKeyframes","styleElement","css","toCSS","innerText","insertAdjacentHTML","isPausedCSS","pauseCSS","isPaused","endCSS","contains","hasName","nowEasing","lastCSS","delayCSS","usePrevValue","nextTime","prevFrame","nextFrame","prevValue","nextValue","dotValue","attributes","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","animtionElement","isSelector","Scene","newItem","_","animate","item1","item2","_b","_c","_d","isProperty","isFixedProperty","fixed","alias","others"],"mappings":"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"}