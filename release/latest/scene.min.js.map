{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../node_modules/@daybrush/utils/dist/utils.esm.js","../src/EventTrigger.ts","../src/easing.ts","../src/PropertyObject.ts","../src/utils.ts","../src/Animator.ts","../src/utils/property.ts","../src/Frame.ts","../src/Keyframes.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["export type Role = true | RoleInterface;\nexport interface RoleInterface {\n  [role: string]: Role;\n}\nexport interface ObjectInterface<T> {\n  [name: string]: T;\n}\nexport type NameType = string | number;\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleInterface = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: ObjectInterface<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { \"animation-timing-function\": true, \"contents\": true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\ntype OptionType = [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"];\ntype EventType = [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const FUNCTION = \"function\";\nexport const PROPERTY = \"property\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","var prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n\nvar checkProperties =\n/*#__PURE__*/\nfunction (property) {\n  var styles = (document.body || document.documentElement).style;\n  var length = prefixes.length;\n\n  if (typeof styles[property] !== \"undefined\") {\n    return property;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n\n    if (typeof styles[name] !== \"undefined\") {\n      return name;\n    }\n  }\n\n  return \"\";\n};\n\nvar RGB = \"rgb\";\nvar RGBA = \"rgba\";\nvar HSL = \"hsl\";\nvar HSLA = \"hsla\";\nvar TRANSFORM =\n/*#__PURE__*/\ncheckProperties(\"transform\");\nvar FILTER =\n/*#__PURE__*/\ncheckProperties(\"filter\");\nvar ANIMATION =\n/*#__PURE__*/\ncheckProperties(\"animation\");\nvar KEYFRAMES =\n/*#__PURE__*/\nANIMATION.replace(\"animation\", \"keyframes\");\n\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\nfunction isObject(value) {\n  return value && typeof value === \"object\";\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isString(value) {\n  return typeof value === \"string\";\n}\n/**\n* divide text by space.\n* @memberof Property\n* @function splitSpace\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitSpace(text) {\n  // divide comma(,)\n  var matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Property\n* @function splitComma\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  var matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n  return matches ? matches.map(function (str) {\n    return str.trim();\n  }) : [];\n}\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\nfunction decamelize(str) {\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return letter + \"-\" + letter2.toLowerCase();\n  });\n}\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\nvar requestAnimationFrame =\n/*#__PURE__*/\nfunction () {\n  var firstTime = now();\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n    var currTime = now();\n    var id = window.setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n\n/**\n* @namespace\n* @name Color\n*/\n\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {String} hex color\n* @example\nconsole.log(cutHex(\"#000000\"))\n// \"000000\"\n*/\n\nfunction cutHex(hex) {\n  return hex.charAt(0) === \"#\" ? hex.substring(1) : hex;\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {Array} rgb color\n* @example\nconsole.log(hexToRGB(\"#000000\"));\n// [0, 0, 0]\nconsole.log(hexToRGB(\"#201045\"));\n// [32, 16, 69]\n*/\n\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n\n  return [r, g, b, a];\n}\n/**\n* convert 3-digit hex color to 6-digit hex color.\n* @memberof Color\n* @param {String} hex - 3-digit hex color\n* @return {String} 6-digit hex color\n* @example\nconsole.log(hex3to6(\"#123\"));\n// \"#112233\"\n*/\n\nfunction hex3to6(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var arr = [\"#\", r, r, g, g, b, b];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgb color.\n* @memberof Color\n* @param {Array} hsl(a) - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {Array} rgb color\n* @example\nconsole.log(hslToRGB([150, 0.5, 0.4]));\n// [51, 153, 102]\n*/\n\nfunction hslToRGBA(hsl) {\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n\n  var result = [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), hsl.length > 3 ? hsl[3] : 1];\n  return result;\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {String} - Hex(rgb, rgba) or RGB(A), or HSL(A)\n* @return {Array} rgba color\n*/\n\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4) {\n      return hexToRGBA(hex3to6(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n        prefix = _a.prefix,\n        value = _a.value;\n\n    if (!prefix || !value) {\n      return;\n    }\n\n    var arr = splitComma(value);\n    var colorArr = [];\n    var length = arr.length;\n\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n\n        return colorArr;\n\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        } // hsl, hsla to rgba\n\n\n        return hslToRGBA(colorArr);\n    }\n  }\n\n  return;\n}\n\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n\n  var element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n\n  var cssObject = {};\n  var styles = window.getComputedStyle(element);\n  var length = properties.length;\n\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n\n  return cssObject;\n}\n\nexport { COLOR_MODELS, cutHex, hexToRGBA, hex3to6, hslToRGBA, stringToRGBA, RGB, RGBA, HSL, HSLA, TRANSFORM, FILTER, ANIMATION, KEYFRAMES, isUndefined, isObject, isArray, isString, splitSpace, splitComma, splitBracket, splitUnit, camelize, decamelize, now, requestAnimationFrame, hasClass, addClass, removeClass, fromCSS };\n//# sourceMappingURL=utils.esm.js.map\n","import { isObject } from \"@daybrush/utils\";\n\ntype CallbackType = (...args: any[]) => any;\ninterface EventParamterType {\n  [name: string]: CallbackType | CallbackType[];\n}\n/**\n* attach and trigger event handlers.\n* @memberof Scene\n*/\nclass EventTrigger {\n  private events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n\t*/\n  public on(name: string | EventParamterType, callback?: CallbackType | CallbackType[]) {\n    const events = this.events;\n\n    if (isObject(name)) {\n      for (const i in name) {\n        this.on(i, name[i]);\n      }\n      return this;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return this;\n    }\n    if (isObject(callback)) {\n      (callback as CallbackType[]).forEach(func => this.on(name, func));\n      return this;\n    }\n    const event = events[name];\n\n    event.push(callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param {String} name - event's name\n\t* @param {Function} [...data] - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const event = events[name];\n\n    if (data.length) {\n      const target = data[0];\n\n      target.type = name;\n      target.currentTarget = this;\n      !target.target && (target.target = this);\n    }\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n}\nexport default EventTrigger;\n","export interface EasingFunctionInterface extends Function {\n  easingName?: string;\n}\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunctionInterface = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunctionInterface = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","interface PropertyObjectInterface {\n  prefix?: string;\n  suffix?: string;\n  model?: string;\n  type?: string;\n  separator?: string;\n}\n/**\n* Make string, array to PropertyObject for the dot product\n* @memberof Scene\n*/\nclass PropertyObject {\n  public value: any[];\n  public options: PropertyObjectInterface;\n\n  /**\n\t* @param {String|Array} value - This value is in the array format ..\n\t* @param {String} separator - Array separator.\n\t* @example\nvar obj1 = new PropertyObject(\"1,2,3\", \",\");\nvar obj2 = new PropertyObject([1,2,3], \" \");\nvar obj3 = new PropertyObject(\"1$2$3\", \"$\");\n\n// rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options: PropertyObjectInterface) {\n    this.options = {\n      prefix: \"\",\n      suffix: \"\",\n      model: \"\",\n      type: \"\",\n      separator: \",\",\n    };\n    options && this.setOptions(options);\n    this.init(value);\n  }\n  public setOptions(newOptions: PropertyObjectInterface) {\n    const options = this.options;\n\n    for (const name in newOptions) {\n      options[name as keyof PropertyObjectInterface] = newOptions[name as keyof PropertyObjectInterface];\n    }\n    options && (this.options = {...this.options, ...options});\n    return this;\n  }\n  public getOption(name: keyof PropertyObjectInterface) {\n    return this.options[name];\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n    return new PropertyObject(arr, this.options);\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.options.prefix + this.join() + this.options.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.options.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n  private init(value: string | any[]) {\n    const type = typeof value;\n\n    if (type === \"string\") {\n      this.value = (value as string).split(this.options.separator);\n    } else if (type === \"object\") {\n      this.value = (value as any[]);\n    } else {\n      this.value = [value];\n    }\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, ObjectInterface, MAXIMUM, FIXED, ALIAS, PAUSED, RUNNING, PLAY, ENDED, PREFIX } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { isArray, ANIMATION } from \"@daybrush/utils\";\n\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === \"object\") {\n    if (isArray(value)) {\n      return \"array\";\n    } else if (value instanceof PropertyObject) {\n      return \"property\";\n    }\n  } else if (type === \"string\" || type === \"number\") {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function isInProperties(roles: ObjectInterface<any>, args: any[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: any[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: any[]) {\n  return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n  currentTime: number;\n  iterationCount: number;\n  elapsedTime: number;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n  return item.state.playCSS && item.getPlayState() === PAUSED;\n}\nexport function exportCSS(id: string, css: string) {\n  const styleId = `${PREFIX}STYLE_${toId(id)}`;\n  const styleElement: HTMLElement = document.querySelector(`#${styleId}`);\n\n  if (styleElement) {\n    styleElement.innerText = css;\n  } else {\n    document.body.insertAdjacentHTML(\"beforeend\",\n      `<style id=\"${styleId}\">${css}</style>`);\n  }\n}\nexport function toId(text: string) {\n  return text.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(item: Scene | SceneItem, isExportCSS: boolean, properties = {}) {\n  if (!ANIMATION || item.getPlayState() === RUNNING) {\n    return;\n  }\n  if (isPausedCSS(item)) {\n    item.addPlayClass(true, properties);\n  } else {\n    if (item.isEnded()) {\n      item.setTime(0);\n    }\n    isExportCSS && item.exportCSS();\n    const el = item.addPlayClass(false, properties);\n\n    if (!el) {\n      return;\n    }\n    !item.state.peusdo && addAnimationEvent(item, el);\n    item.setState({ playCSS: true });\n  }\n  item.setPlayState(RUNNING);\n  item.trigger(PLAY);\n}\n\nexport function addAnimationEvent(item: Scene | SceneItem, el: HTMLElement) {\n  const duration = item.getDuration();\n  const isZeroDuration = !duration || !isFinite(duration);\n\n  const animationend = () => {\n    if (!isZeroDuration) {\n      item.setState({ playCSS: false });\n      item.finish();\n    }\n  };\n  item.on(ENDED, () => {\n    el.removeEventListener(\"animationend\", animationend);\n    el.removeEventListener(\"animationiteration\", animationiteration);\n  });\n  const animationiteration = ({elapsedTime}: any) => {\n    const currentTime = elapsedTime;\n    const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n    item.state.currentTime = currentTime;\n    item.setCurrentIterationCount(iterationCount);\n  };\n  el.addEventListener(\"animationend\", animationend);\n  el.addEventListener(\"animationiteration\", animationiteration);\n}\n","import {\n  ObjectInterface, THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED, RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE } from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, EasingFunctionInterface } from \"./easing\";\nimport { toFixed } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame } from \"@daybrush/utils\";\n\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\n\nexport type FillModeType = \"forwards\" | \"backwards\" | \"both\";\nexport type IterationCountType = number | \"infinite\";\nexport type EasingType = 0 | EasingFunctionInterface;\nexport type DirectionType = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\nexport type PlayStateType = \"paused\" | \"running\";\n\nexport interface StateInterface {\n  id?: string;\n  easing?: EasingType;\n  easingName?: string;\n  iterationCount?: IterationCountType;\n  delay?: number;\n  fillMode?: FillModeType;\n  direction?: DirectionType;\n  playSpeed?: number;\n  iterationTime?: number;\n  currentTime?: number;\n  tickTime?: number;\n  currentIterationCount?: number;\n  prevTime?: number;\n  playState?: PlayStateType;\n  duration?: number;\n  [key: string]: any;\n}\nexport function isDirectionReverse(currentIterationCount: number,\n                                   iteraiontCount: IterationCountType, direction: DirectionType) {\n  if (direction === REVERSE) {\n    return true;\n  } else if (iteraiontCount !== \"infinite\" && currentIterationCount === iteraiontCount && iteraiontCount % 1 === 0) {\n    return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n  }\n  return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorOptions The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n/**\n* play video, animation, the others\n* @memberof Scene\n* @class Animator\n* @extends Scene.EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n* @param {AnimatorOptions} [options] - animator's options\n* @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n*/\n\nconst setters = [ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n@GetterSetter(getters, setters, \"state\")\nclass Animator extends EventTrigger {\n  public state: StateInterface;\n  public options: ObjectInterface<any>;\n\n  constructor(options?: StateInterface) {\n    super();\n    this.options = {};\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      currentIterationCount: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    };\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @method Scene.Animator#setEasing\n\t* @param {array| function} curverArray - The speed curve of an animation.\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | EasingFunctionInterface): this {\n    const easing = Array.isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    this.setState({ easing, easingName });\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @method Scene.Animator#setOptions\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param {Object} [AnimatorOptions] - animator's options\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: StateInterface = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      ((name in this.state ? this.state : this.options) as StateInterface)[name] = value;\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @method Scene.Animator#getTotalDuration\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.state[DELAY] + this.getActiveDuration();\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @method Scene.Animator#getActiveDuration\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getActiveDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.getDuration() * (this.state[ITERATION_COUNT] as number);\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @method Scene.Animator#isEnded\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state.tickTime === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @method Scene.Animator#isPaused\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public setNext(animator: Animator): this {\n    this.on(ENDED, () => {\n      animator.play();\n    });\n    return this;\n  }\n  /**\n\t* play animator\n\t* @method Scene.Animator#play\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public play() {\n    this.state[PLAY_STATE] = RUNNING;\n    if (this.isEnded()) {\n      this.setTickTime(0);\n    }\n    this.state.tickTime = this.getTime();\n\n    requestAnimationFrame((time: number) => {\n      this.state.prevTime = time;\n      this.tick(time);\n    });\n    /**\n\t\t * This event is fired when play animator.\n\t\t * @event Scene.Animator#play\n\t\t */\n    this.trigger(PLAY);\n\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @method Scene.Animator#pause\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public pause(): this {\n    this.state[PLAY_STATE] = PAUSED;\n    /**\n\t\t * This event is fired when animator is paused.\n\t\t * @event Scene.Animator#paused\n\t\t */\n    this.trigger(PAUSED);\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#finish\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public finish() {\n    this.state.tickTime = 0;\n    this.setTime(0);\n    this.end();\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#end\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public end() {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Scene.Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @method Scene.Animator#setTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    this.state.tickTime = this.state.delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    this.state.currentTime = currentTime;\n    this.calculateIterationTime();\n\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Scene.Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: this.getIterationCount(),\n    });\n\n    return this;\n  }\n  public getState(name: string): any {\n    return this.state[name];\n  }\n  public setState(object: StateInterface) {\n    for (const name in object) {\n      this.state[name] = object[name];\n    }\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @method Scene.Animator#getTime\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state.currentTime;\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state.duration = duration);\n        return parseFloat(time) / 100 * duration;\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @method Scene.Animator#isDelay\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const { delay, tickTime } = this.state;\n\n    return delay > 0 && (tickTime < delay);\n  }\n  public setCurrentIterationCount(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n\n    if (state.currentIterationCount < passIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Scene.Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state.currentTime,\n        iterationCount: passIterationCount,\n      });\n    }\n    state.currentIterationCount = iterationCount;\n    return this;\n  }\n  protected calculateIterationTime() {\n    const { iterationCount, fillMode, direction } = this.state;\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const currentIterationCount = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setCurrentIterationCount(currentIterationCount);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(currentIterationCount, iterationCount, direction);\n\n    if (isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (currentIterationCount >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n  protected tick(now: number) {\n    const state = this.state;\n    const { playSpeed, prevTime } = state;\n    const currentTime = this.state.tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state.prevTime = now;\n    this.setTickTime(currentTime);\n    if (this.isEnded()) {\n      this.end();\n      return;\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n\n    requestAnimationFrame((time: number) => {\n      this.tick(time);\n    });\n  }\n  private setTickTime(time: number) {\n    this.setTime(time - this.state.delay, true);\n  }\n}\n\n/**\n * Get a delay for the start of an animation.\n * @method Scene.Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Scene.Animator#setDelay\n * @param {number} delay - delay\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#getFillMode\n * @return {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#setFillMode\n * @param {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode - fillMode\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Scene.Animator#getIterationCount\n * @return {\"inifnite\"|number} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Scene.Animator#setIterationCount\n * @param {\"inifnite\"|number} iterationCount - iterationCount\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#getDirection\n * @return {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#setDirection\n * @param {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction - direction\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Scene.Animator#getPlayState\n * @return {\"paused\"|\"running\"} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Scene.Animator#setPlayState\n * @param {\"paused\"|\"running\"} playState - playState\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Scene.Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Scene.Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Scene.Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Scene.Animator#setDuration\n * @param {number} duration - duration\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Scene.Animator#getEasing\n * @return {0|function} easing\n */\n/**\n * Get the speed curve's name\n * @method Scene.Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Scene.Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\ninterface Animator {\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: IterationCountType): this;\n  getDirection(): IterationCountType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport { COLOR_MODELS, isString, splitComma, splitSpace, stringToRGBA, RGBA, splitBracket } from \"@daybrush/utils\";\nimport { ObjectInterface } from \"../consts\";\n\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const length = properties.length;\n  const obj = [];\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      continue;\n    }\n    obj.push({ [matches[1].trim()]: toPropertyObject(matches[2].trim()) });\n  }\n  return obj;\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n  // [prefix, value, other]\n  const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  const obj = toPropertyObject(value);\n\n  let arr = [value];\n  let separator = \",\";\n  let prefix = `${model}(`;\n  let suffix = `)${afterModel}`;\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.getOption(\"separator\");\n    arr = obj.value;\n    prefix += obj.getOption(\"prefix\");\n    suffix = obj.getOption(\"suffix\") + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  const result = stringToRGBA(value);\n\n  return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: string | ObjectInterface<any> | any[]): any {\n  if (!isString(value)) {\n    if (Array.isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: ObjectInterface<any> = {}) {\n  const model = object.getOption(\"model\");\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => toObject(obj, result));\n  }\n  return result;\n}\n","import {\n  ObjectInterface, NameType,\n  ALIAS, TIMING_FUNCTION, PROPERTY, FUNCTION\n} from \"./consts\";\nimport { isRole, getType } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport PropertyObject from \"./PropertyObject\";\nimport { isObject, isArray, isString, ANIMATION, TRANSFORM, FILTER } from \"@daybrush/utils\";\n\nfunction toInnerProperties(obj: ObjectInterface<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\nfunction isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\n/* eslint-disable */\nfunction clone(target: ObjectInterface<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: ObjectInterface<any>, from: ObjectInterface<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name] = toValue ? getValue([name], value()) : value;\n    } else if (type === \"array\") {\n      to[name] = value.slice();\n    } else if (type === \"object\") {\n      if (isObject(to[name]) && !isPropertyObject(to[name])) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n\nfunction getValue(names: NameType[], value: any): any {\n  const type = getType(value);\n\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === \"object\") {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n* @class Scene.Frame\n* @param {Object} properties - properties\n* @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n */\nclass Frame {\n  public properties: ObjectInterface<any>;\n  constructor(properties: ObjectInterface<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @method Scene.Frame#get\n\t* @param {...Number|String|Scene.PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n\n    return getValue(args[0] in ALIAS ? ALIAS[args[0]] : args, value);\n  }\n\n  public raw(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties)) {\n        return undefined;\n      }\n      properties = properties[params[i]];\n    }\n    return properties;\n  }\n  /**\n\t* remove property value\n\t* @method Scene.Frame#remove\n\t* @param {...String} args - property name\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length - 1; ++i) {\n      if (!isObject(properties)) {\n        return this;\n      }\n      properties = properties[params[i]];\n    }\n    delete properties[params[length - 1]];\n    return this;\n  }\n  /**\n\t* set property\n\t* @method Scene.Frame#set\n\t* @param {...Number|String|Scene.PropertyObject} args - property names or values\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n\t*/\n  public set(...args: any[]) {\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      this._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      this._set(params[0], value);\n    } else if (isObject(value)) {\n      if (isArray(value)) {\n        this._set(params, value);\n      } else if (isPropertyObject(value)) {\n        if (isRole(params)) {\n          this.set(...params, toObject(value));\n        } else {\n          this._set(params, value);\n        }\n      } else if (value instanceof Frame) {\n        this.merge(value);\n      } else {\n        for (const name in value) {\n          this.set(...params, name, value[name]);\n        }\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          this.set(...params, obj);\n        }\n        return this;\n      } else {\n        const styles = splitStyle(value);\n\n        styles.forEach(style => {\n          this.set(...params, style);\n        });\n        if (styles.length) {\n          return this;\n        }\n      }\n      this._set(params, value);\n    } else {\n      this._set(params, value);\n    }\n    return this;\n  }\n  /**\n\t* check that has property.\n\t* @method Scene.Frame#has\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties) || !(params[i] in properties)) {\n        return false;\n      }\n      properties = properties[params[i]];\n    }\n    return true;\n  }\n  /**\n\t* clone frame.\n\t* @method Scene.Frame#clone\n\t* @return {Scene.Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    frame.merge(this);\n    return frame;\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @method Scene.Frame#merge\n\t* @param {Scene.Frame} frame - target frame.\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  public toObject() {\n    return clone(this.properties, true);\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @method Scene.Frame#toCSSObject\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.toObject();\n    const cssObject: ObjectInterface<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === TIMING_FUNCTION) {\n        cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value.easingName) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties.transform);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @method Scene.Frame#toCSS\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","import { ObjectInterface, RoleInterface } from \"./consts\";\nimport { isInProperties, toFixed } from \"./utils\";\nimport PropertyObject from \"./PropertyObject\";\nimport Frame from \"./Frame\";\nimport { isObject, isArray } from \"@daybrush/utils\";\n\nfunction getNames(names: ObjectInterface<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  for (const name in names) {\n    stack.push(name);\n\n    if (isObject(names[name])) {\n      arr = arr.concat(getNames(names[name], stack));\n    } else {\n      arr.push(stack.slice());\n    }\n    stack.pop();\n  }\n  return arr;\n}\nfunction updateFrame(names: ObjectInterface<any>, properties: ObjectInterface<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isObject(value) || isArray(value) || value instanceof PropertyObject) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n}\n/**\n* a list of objects in chronological order.\n* @memberof Scene\n*/\nclass Keyframes {\n  public times: number[];\n  public items: ObjectInterface<any>;\n  public names: RoleInterface;\n  /**\n\t */\n  constructor() {\n    this.times = [];\n    this.items = {};\n    this.names = {};\n  }\n  /**\n\t* A list of names\n\t* @return {string[][]} names\n\t* @example\nkeyframes.getNames(); // [[\"a\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n\t*/\n  public getNames() {\n    const names = this.names;\n\n    return getNames(names, []);\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param {...string[]} name - property's time\n\t* @return {Boolean} true: if has property, false: not\n\t* @example\nkeyframes.hasName(\"transform\", \"translate\"); // true or not\n\t*/\n  public hasName(...args: string[]) {\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t * update property names used in frames.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public update() {\n    const items = this.items;\n\n    for (const time in items) {\n      this.updateFrame(items[time]);\n    }\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} callback Function to execute for each element, taking three arguments\n\t * @param {Scene.Frame} [callback.item] The value of the item being processed in the keyframes.\n\t * @param {string} [callback.time] The time of the item being processed in the keyframes.\n\t * @param {object} [callback.items] The object that forEach() is being applied to.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: any, time: number, items: ObjectInterface<any>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n  }\n  /**\n\t* update property names used in frame.\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.Keyframes} An instance itself\n\t* @example\nkeyframes.updateFrame(frame);\n\t*/\n  public updateFrame(frame: Frame) {\n    if (!frame) {\n      return this;\n    }\n    const properties = frame.properties;\n    const names = this.names;\n\n    updateFrame(names, properties);\n    return this;\n  }\n  /**\n\t * Get how long an animation should take to complete one cycle.\n\t * @return {number} duration\n\t */\n  public getDuration() {\n    const times = this.times;\n\n    return times.length === 0 ? 0 : times[times.length - 1];\n  }\n  /**\n\t * Set how long an animation should take to complete one cycle.\n\t * @param {number} duration - duration\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public setDuration(duration: number, originalDuration: number = this.getDuration()) {\n    const ratio = duration / originalDuration;\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(time => {\n      const time2 = toFixed(time * ratio);\n\n      obj[time2] = items[time];\n\n      return time2;\n    });\n    this.items = obj;\n  }\n  /**\n\t * Set how much time you want to push ahead.\n\t * @param {number} time - time\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  /**\n\t* add object in list\n\t* @param {Number} time - frame's time\n\t* @param {Object} object - target\n\t* @return {Scene.Keyframes} An instance itself\n\t*/\n  public add(time: number, object: any) {\n    this.items[time] = object;\n    this.addTime(time);\n    return this;\n  }\n  /**\n\t* Check if keyframes has object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Boolean} true: if has time, false: not\n\t*/\n  public has(time: number) {\n    return time in this.items;\n  }\n  /**\n\t* get object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Object} object at that time\n\t*/\n  public get(time: number) {\n    return this.items[time];\n  }\n  /**\n\t* remove object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Keyframes} An instance itself\n\t*/\n  public remove(time: number) {\n    const items = this.items;\n\n    delete items[time];\n    this.removeTime(time);\n    return this;\n  }\n  private addTime(time: number) {\n    const times = this.times;\n    const length = times.length;\n    let pushIndex = length;\n\n    for (let i = 0; i < length; ++i) {\n      // if time is smaller than times[i], add time to index\n      if (time === times[i]) {\n        return this;\n      } else if (time < times[i]) {\n        pushIndex = i;\n        break;\n      }\n    }\n    this.times.splice(pushIndex, 0, time);\n    return this;\n  }\n  private removeTime(time: number) {\n    const index = this.times.indexOf(time);\n\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n}\nexport default Keyframes;\n","/**\n* @namespace\n* @name Dot\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport { EasingType } from \"../Animator\";\nimport { getType } from \"../utils\";\nimport { PROPERTY, FUNCTION } from \"../consts\";\nimport { toPropertyObject } from \"./property\";\nimport { isArray, splitUnit } from \"@daybrush/utils\";\n\n/**\n* The dot product of Arrays\n* @memberof Dot\n* @function dotArray\n* @param {Array} a1 value1\n* @param {Array} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {Array|Object} Array.\n* @example\ndotArray([0, 0, 0, 1],[50, 50, 50, 1],0.5, 0.5);\n// => [25, 25, 25, 1]\n*/\nexport function dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  }\n  if (!isArray(a2)) {\n    return a1;\n  }\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\n/**\n* The dot product of PropertyObject(type=color)\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Dot\n* @function dotColor\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} PropertyObject(type=color).\n* @example\nvar colorObject = ......; //PropertyObject(type=color, model=\"rgba\", value=[254, 254, 254, 1]);\ndotColor(\"#000\",  colorObject, 0.5, 0.5);\n// \"#000\" => PropertyObject(type=color, model=\"rgba\", value=[0, 0, 0, 1]);\n// return => PropertyObject(type=color, model=\"rgba\", value=[127, 127, 127, 1]);\n*/\nexport function dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  if (b2 === 0) {\n    return color2;\n  }\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.getOption(\"model\");\n  const model2 = color2.getOption(\"model\");\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n/**\n* The dot product of Objects\n* @memberof Dot\n* @function dotObject\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} Array with Separator.\n* @example\ndotObject(PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)]),\nPropertyObject([\"9px\", \"solid\", rgba(50, 50, 50, 1)]),\n0.5, 0.5);\n// => PropertyObject([\"5px\", \"solid\", rgba(25, 25, 25, 1)])\n*/\nexport function dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.getOption(\"type\");\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.getOption(\"separator\") || a2.getOption(\"separator\"),\n    prefix: a1.getOption(\"prefix\") || a2.getOption(\"prefix\"),\n    suffix: a1.getOption(\"suffix\") || a2.getOption(\"suffix\"),\n    model: a1.getOption(\"model\") || a2.getOption(\"model\"),\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === \"array\") {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  // split number and unit of the value.\n  const r1 = b1 / (b1 + b2);\n  const r2 = 1 - r1;\n\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = v1.value * r2 + v2.value * r1;\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { StateInterface, EasingType, isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  toFixed,\n  isFixed,\n  playCSS,\n  toId,\n  exportCSS,\n} from \"./utils\";\nimport Keyframes from \"./Keyframes\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n  START_ANIMATION,\n  PREFIX, THRESHOLD, ObjectInterface, NameType,\n  TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n  EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION\n} from \"./consts\";\nimport { isObject, isArray, isUndefined, decamelize,\n  ANIMATION, fromCSS, addClass, removeClass, hasClass, KEYFRAMES } from \"@daybrush/utils\";\n\nfunction makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 100000)}`;\n\n    if (!selector) {\n      return id;\n    }\n    const checkElement = document.querySelector(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nfunction makeAnimationProperties(properties: ObjectInterface<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)} : ${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\n\ntype ElementsType = HTMLElement[] | NodeListOf<HTMLElement>;\n/**\n* manage Frame Keyframes and play keyframes.\n* @memberof Scene\n* @extends Scene.Animator\n* @example\nconst item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator {\n  public keyframes: Keyframes;\n  private elements: ElementsType;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst item = new Scene.SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.keyframes = new Keyframes();\n    this.elements = [];\n    this.load(properties, options);\n  }\n  public getDuration() {\n    return Math.max(this.state[DURATION], this.keyframes.getDuration());\n  }\n  public setDuration(duration: number) {\n    if (duration === 0) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      this.keyframes.setDuration(duration, originalDuration);\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  /**\n\t* set the unique indicator of the item.\n\t* @method Scene.SceneItem#setId\n\t* @param {String} [id] - the indicator of the item.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nconst item = new SceneItem();\n\nitem.setId(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public setId(id?: string) {\n    const elements = this.elements;\n    const length = elements.length;\n\n    this.setState({ id: id || makeId(!!length) });\n    const sceneId = toId(this.getId());\n\n    this.state.selector || (this.state.selector = `[data-scene-id=\"${sceneId}\"]`);\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      elements[i].setAttribute(\"data-scene-id\", sceneId);\n    }\n    return this;\n  }\n  /**\n\t* Specifies the unique indicator of the item.\n\t* @method Scene.SceneItem#getId\n\t* @return {String} the indicator of the item.\n\t* @example\nconst item = scene.newItem(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public getId() {\n    return this.state.id;\n  }\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @method Scene.SceneItem#set\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any[] | number | string | ObjectInterface<any>, ...args: any[]) {\n    if (isObject(time)) {\n      this.load(time);\n      return this;\n    } else if (args[0]) {\n      if (args[0] instanceof SceneItem) {\n        const item: SceneItem = args[0];\n        const delay = item.getDelay();\n        const realTime = this.getUnitTime(time) + delay;\n        const { keys, values, frames } = item.getAllTimes(!!delay || !this.hasFrame(time));\n        const easing = this.getEasingName() !== item.getEasingName() ? item.getEasing() : 0;\n\n        keys.forEach(t => {\n          this.set(realTime + t, frames[values[t]]);\n        });\n        if (easing) {\n          this.set(realTime + keys[0], EASING, easing);\n          this.set(realTime + keys[keys.length - 1], EASING, \"initial\");\n        }\n        return this;\n      } else if (args.length === 1 && isArray(args[0])) {\n        args[0].forEach((item: any) => {\n          this.set(time, item);\n        });\n        return this;\n      }\n    }\n    const frame = this.newFrame(time);\n\n    frame.set(...args);\n    this.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|Scene.PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.update();\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | object) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t*/\n  public prepend(item: SceneItem | object) {\n    if (item instanceof SceneItem) {\n      const delay = item.getDelay();\n      const duration = item.getIterationCount() === INFINITE ? item.getDuration() : item.getActiveDuration();\n      const unshiftTime = duration + delay;\n      const firstFrame = this.keyframes.get(0);\n\n      if (firstFrame) {\n        this.keyframes.remove(0);\n      }\n      this.keyframes.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @method Scene.SceneItem#setSelector\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(selector: boolean | string) {\n    this.state.selector = selector === true ? this.state.id :\n      (selector || `[data-scene-id=\"${this.state.id}\"]`);\n\n    const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(this.state.selector);\n\n    if (matches) {\n      this.state.selector = matches[1];\n      this.state.peusdo = matches[2];\n    }\n    this.setElement(document.querySelectorAll(this.state.selector));\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n\t* @method Scene.SceneItem#setElement\n\t* @param {Element|Array|string} elements - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(elements: HTMLElement | ElementsType) {\n    if (!elements) {\n      return this;\n    }\n    this.elements = (elements instanceof Element) ? [elements] : elements;\n    this.setId(this.getId());\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @method Scene.SceneItem#setCSS\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @method Scene.SceneItem#update\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* update property names used in frame.\n\t* @method Scene.SceneItem#updateFrame\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.updateFrame(time, this.get(time));\n\t*/\n  public updateFrame(frame: Frame) {\n    this.keyframes.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#newFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#setFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    this.keyframes.add(this.getUnitTime(time), frame);\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @method Scene.SceneItem#getFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.keyframes.get(this.getUnitTime(time));\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @method Scene.SceneItem#hasFrame\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.keyframes.has(this.getUnitTime(time));\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @method Scene.SceneItem#removeFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const keyframes = this.keyframes;\n\n    keyframes.remove(time);\n    keyframes.update();\n\n    return this;\n  }\n  /**\n\t* Copy frame of the previous time at the next time.\n\t* @method Scene.SceneItem#copyFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(0) equal getFrame(1)\nitem.copyFrame(0, 1);\n\t*/\n  public copyFrame(fromTime: ObjectInterface<number> | number | string, toTime: number) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.copyFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const copyFrame = frame.clone();\n\n    this.setFrame(toTime, copyFrame);\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n\t* @method Scene.SceneItem#mergeFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number|string} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(fromTime: ObjectInterface<number> | number | string, toTime: number | string) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.mergeFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const toFrame = this.newFrame(toTime);\n\n    toFrame.merge(frame);\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @method Scene.SceneItem#getNowFrame\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Scene.Frame} frame of the current time\n\t* @example\nlet item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType) {\n    const frame = new Frame();\n    const names = this.keyframes.getNames();\n    const { left, right } = this._getNearTimeIndex(time);\n    const realEasing = this._getEasing(time, left, right, this.getEasing() || easing);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, left, right, properties, realEasing);\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (isArray(properties)) {\n      const length = properties.length;\n\n      for (let i = 0; i < length; ++i) {\n        const time = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(time, properties[i]);\n      }\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\" || time === \"keyframes\") {\n          continue;\n        }\n        const value = properties[time];\n        const realTime = this.getUnitTime(time);\n\n        if (typeof value === \"number\") {\n          this.mergeFrame(value, realTime);\n          continue;\n        }\n        this.set(realTime, value);\n      }\n    }\n    options && this.setOptions(options);\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @method Scene.SceneItem#clone\n\t * @param {AnimatorOptions} [options] animator options\n\t * @return {Scene.SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone(options = {}) {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    item.setOptions(options);\n    this.keyframes.forEach((frame: Frame, time: number) => item.setFrame(time, frame.clone()));\n    return item;\n  }\n  public setOptions(options: StateInterface = {}) {\n    super.setOptions(options);\n    const { id, selector, duration, elements } = options;\n\n    duration && this.setDuration(duration);\n    id && this.setId(id);\n    if (elements) {\n      this.setElement(elements);\n    } else if (selector) {\n      this.setSelector(selector === true ? this.state.id : selector);\n    }\n    return this;\n  }\n  public getAllTimes(isStartZero = true, options: StateInterface = {}) {\n    const times = this.keyframes.times.slice();\n    let length = times.length;\n    const keys: number[] = [];\n    const values: ObjectInterface<number> = {};\n\n    if (!length) {\n      return { keys: [], values: {}, frames: {} };\n    }\n    const frames: ObjectInterface<Frame> = {};\n    const duration = this.getDuration();\n    const direction = options[DIRECTION] || this.state[DIRECTION];\n    const isShuffle = direction === ALTERNATE || direction === ALTERNATE_REVERSE;\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(duration)) && times.push(duration);\n    length = times.length;\n    let iterationCount = options[ITERATION_COUNT] || this.state[ITERATION_COUNT];\n\n    iterationCount = iterationCount !== INFINITE ? iterationCount : 1;\n    const totalDuration = iterationCount * duration;\n\n    for (let i = 0; i < iterationCount; ++i) {\n      const isReverse = isDirectionReverse(i, iterationCount, direction);\n      const start = i * duration;\n\n      for (let j = 0; j < length; ++j) {\n        if (isShuffle && i !== 0 && j === 0) {\n          // pass duplicate\n          continue;\n        }\n        // isStartZero is keytimes[0] is 0 (i === 0 & j === 0)\n        const threshold = j === 0 && (i === 0 ? !isStartZero : !isShuffle) ? THRESHOLD : 0;\n        const keyvalue = toFixed(isReverse ? times[length - 1 - j] : times[j]);\n        const time = toFixed(isReverse ? duration - keyvalue : keyvalue);\n        const keytime = toFixed(start + time + threshold);\n\n        if (totalDuration < keytime) {\n          break;\n        }\n        keys.push(keytime);\n        values[keytime] = keyvalue;\n\n        if (!frames[keyvalue]) {\n          const frame = this.getFrame(keyvalue);\n\n          if (!frame || j === 0 || j === length - 1 || frame.has(\"transform\") || frame.has(\"filter\")) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n          } else {\n            frames[keyvalue] = frame;\n          }\n        }\n      }\n    }\n    if (keys[keys.length - 1] < totalDuration) {\n      // last time === totalDuration\n      const isReverse = isDirectionReverse(iterationCount, iterationCount, direction);\n      const keyvalue = toFixed(duration * (isReverse ? 1 - iterationCount % 1 : iterationCount % 1));\n\n      keys.push(totalDuration);\n      values[totalDuration] = keyvalue;\n      !frames[keyvalue] && (frames[keyvalue] = this.getNowFrame(keyvalue));\n    }\n    return { keys, values, frames };\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(parentDuration = this.getDuration(), options: StateInterface = {}) {\n    const state = this.state;\n    const selector = state.selector || this.options.selector;\n    if (!selector) {\n      return \"\";\n    }\n    const peusdo = state.peusdo || \"\";\n    const id = this._getId();\n    // infinity or zero\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n    const isZeroDuration = parentDuration === 0;\n    const duration = isZeroDuration ? this.getDuration() : parentDuration;\n    const playSpeed = (options[PLAY_SPEED] || 1);\n    const delay = ((options[DELAY] || 0) + (isZeroDuration ? state[DELAY] : 0)) / playSpeed;\n    const easingName = (state[EASING] && state[EASING_NAME]) ||\n      (isParent && options[EASING] && options[EASING_NAME]) || state[EASING_NAME];\n    const iterationCount = (!isZeroDuration && options[ITERATION_COUNT]) || state[ITERATION_COUNT];\n    const fillMode = (options[FILL_MODE] !== \"forwards\" && options[FILL_MODE]) || state[FILL_MODE];\n    const direction = options[DIRECTION] || state[DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${toId(id)}`,\n      duration: `${duration / playSpeed}s`,\n      timingFunction: easingName,\n    });\n\n    const css = `${selector}.${START_ANIMATION}${peusdo} {\n\t\t\t${cssText}\n\t\t}${selector}.${PAUSE_ANIMATION}${peusdo} {\n      ${ANIMATION}-play-state: paused;\n    }\n\t\t${this._toKeyframes(duration, !isZeroDuration && isParent)}`;\n\n    return css;\n  }\n  public exportCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    if (!this.elements.length) {\n      return \"\";\n    }\n    const css = this.toCSS(duration, options);\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n\n    !isParent && exportCSS(this._getId(), css);\n    return css;\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      addClass(elements[i], PAUSE_ANIMATION);\n    }\n  }\n  public endCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      const element = elements[i];\n\n      removeClass(element, PAUSE_ANIMATION);\n      removeClass(element, START_ANIMATION);\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem.playCSS();\nitem.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const elements = this.elements;\n    const length = elements.length;\n    const cssText = makeAnimationProperties(properties);\n\n    if (!length) {\n      return;\n    }\n    if (isPaused) {\n      for (let i = 0; i < length; ++i) {\n        removeClass(elements[i], PAUSE_ANIMATION);\n      }\n    } else {\n      for (let i = 0; i < length; ++i) {\n        const element = elements[i];\n\n        element.style.cssText += cssText;\n        if (hasClass(element, START_ANIMATION)) {\n          removeClass(element, START_ANIMATION);\n          (el => {\n            requestAnimationFrame(() => {\n              requestAnimationFrame(() => {\n                addClass(el, START_ANIMATION);\n              });\n            });\n          })(element);\n        } else {\n          addClass(element, START_ANIMATION);\n        }\n      }\n    }\n    return elements[0];\n  }\n  private _getId() {\n    return this.state.id || this.setId().getId();\n  }\n  private _getEasing(time: number, left: number, right: number, easing: EasingType) {\n    if (this.keyframes.hasName(TIMING_FUNCTION)) {\n      const nowEasing = this._getNowValue(time, left, right, [TIMING_FUNCTION], 0, true);\n\n      return typeof nowEasing === \"function\" ? nowEasing : easing;\n    }\n    return easing;\n  }\n  private _toKeyframes(duration = this.getDuration(), isParent: boolean) {\n    const id = this._getId();\n    const state = this.state;\n    const playSpeed = state[PLAY_SPEED];\n    const iterationCount = state[ITERATION_COUNT];\n    const fillMode = state[FILL_MODE];\n    const delay = isParent ? state[DELAY] : 0;\n    const direction = isParent ? state[DIRECTION] : NORMAL;\n    const isReverse = direction === REVERSE || direction === ALTERNATE_REVERSE;\n    const { keys, values, frames } = this.getAllTimes(true, {\n      duration,\n      delay,\n      direction,\n      iterationCount: isParent && iterationCount !== INFINITE ? iterationCount : 1,\n      isCSS: true,\n    });\n    const length = keys.length;\n    const css: ObjectInterface<string> = {};\n    const keyframes: string[] = [];\n\n    if (!keys.length) {\n      return \"\";\n    }\n    for (const time in frames) {\n      css[time] = frames[time].toCSS();\n    }\n    const lastTime = keys[length - 1];\n    const lastCSS = css[values[lastTime]];\n\n    if (delay) {\n      const delayCSS = isReverse && (fillMode === \"both\" || fillMode === \"backwards\") ? lastCSS : css[0];\n      keyframes.push(`0%{}`);\n      isReverse && keyframes.push(`${delay / playSpeed / duration * 100 - THRESHOLD}%{${delayCSS}}`);\n    }\n    keys.forEach(time => {\n      const keyTime = (delay + time) / playSpeed / duration * 100;\n      keyframes.push(`${keyTime}%{${keyTime === 0 ? \"\" : css[values[time]]}}`);\n    });\n    // if (afterDelay) {\n    //   keyframes.push(`${lastTime / playSpeed / duration * 100 + THRESHOLD}%{${lastCSS}}`);\n    //   keyframes.push(`100%{${lastCSS}`);\n    // } else {\n    if ((delay + lastTime) / playSpeed < duration) {\n      // not 100%\n      keyframes.push(`100%{${lastCSS}}`);\n    }\n    // }\n    return `@${KEYFRAMES} ${PREFIX}KEYFRAMES_${toId(id)}{\n\t\t\t${keyframes.join(\"\\n\")}\n\t\t}`;\n  }\n  private _getNowValue(\n    time: number,\n    left: number,\n    right: number,\n    properties: string[],\n    easing: EasingType = this.getEasing(),\n    usePrevValue: boolean = isFixed(properties),\n  ) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    let prevTime;\n    let nextTime;\n    let prevFrame;\n    let nextFrame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n  private _getNearTimeIndex(time: number) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (times[i] === time) {\n        return { left: i, right: i };\n      } else if (times[i] > time) {\n        return { left: i === 0 ? 0 : i - 1, right: i };\n      }\n    }\n    return { left: length - 1, right: length - 1 };\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event Scene.SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Scene.Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length || this.state.peusdo) {\n      return frame;\n    }\n    const attributes = frame.get(\"attribute\");\n\n    if (attributes) {\n      for (const name in (attributes as any)) {\n        for (let i = 0; i < length; ++i) {\n          elements[i].setAttribute(name, attributes[name]);\n        }\n      }\n    }\n    const cssText = frame.toCSS();\n\n    if (this.state.cssText !== cssText) {\n      this.state.cssText = cssText;\n\n      for (let i = 0; i < length; ++i) {\n        elements[i].style.cssText += cssText;\n      }\n      return frame;\n    }\n  }\n}\n\nexport default SceneItem;\n","import Animator, { StateInterface, EasingType } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface, ANIMATE } from \"./consts\";\nimport Frame from \"./Frame\";\nimport { playCSS, exportCSS } from \"./utils\";\n\n/**\n* manage sceneItems and play Scene.\n* @extends Scene.Animator\n*/\nclass Scene extends Animator {\n\n  public items: ObjectInterface<Scene | SceneItem>;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst scene = new Scene({\n\t\titem1: {\n\t\t\t0: {\n\t\t\t\tdisplay: \"none\",\n\t\t\t},\n\t\t\t1: {\n\t\t\t\tdisplay: \"block\",\n\t\t\t\topacity: 0,\n\t\t\t},\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t},\n\t\titem2: {\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public setId(id: string = `scene${Math.floor(Math.random() * 100000)}`) {\n    this.state.id = id;\n    return this;\n  }\n  public getId() {\n    return this.state.id;\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  /**\n\t* get item in scene by name\n\t* @method Scene#getItem\n\t* @param {string} name - item's name\n\t* @return {Scene.SceneItem} item\n\t* @example\nconst item = scene.getItem(\"item1\")\n\t*/\n  public getItem(name: string) {\n    return this.items[name];\n  }\n  /**\n\t* create item in scene\n\t* @method Scene#newItem\n\t* @param {String} name - name of item to create\n\t* @param {StateOptions} options - The option object of SceneItem\n\t* @return {Sceme.SceneItem} Newly created item\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public newItem(name: string, options = {}) {\n    if (name in this.items) {\n      return;\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n\t* add a sceneItem to the scene\n\t* @param {String} name - name of item to create\n\t* @param {Scene.SceneItem} item - sceneItem\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public setItem(name: string, item?: Scene | SceneItem) {\n    if (item instanceof Animator) {\n      item.setId(name);\n    }\n    this.items[name] = item;\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} func Function to execute for each element, taking three arguments\n\t * @param {Scene | Scene.SceneItem} [func.item] The value of the item being processed in the scene.\n\t * @param {string} [func.name] The name of the item being processed in the scene.\n\t * @param {object} [func.items] The object that forEach() is being applied to.\n\t * @return {Scene} An instance itself\n\t */\n  public forEach(func: (item?: Scene | SceneItem, name?: string, items?: ObjectInterface<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  /**\n\t * Export the CSS of the items to the style.\n\t * @return {Scene} An instance itself\n\t */\n  public exportCSS(duration: number = this.getDuration(), state?: StateInterface) {\n    const items = this.items;\n    let totalDuration = state ? this.getDuration() : duration;\n\n    if (!totalDuration || !isFinite(totalDuration)) {\n      totalDuration = 0;\n    }\n    const isParent = !!state;\n    const styles = [];\n\n    for (const id in items) {\n      const item = items[id];\n\n      styles.push(item.exportCSS(totalDuration, this.state));\n    }\n    const css: string = styles.join(\"\");\n    !isParent && exportCSS(this.getId() || this.setId().getId(), css);\n    return css;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(item.getId() || item.setId().getId(), item);\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].pauseCSS();\n    }\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public endCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].endCSS();\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const items = this.items;\n    let animtionElement: HTMLElement;\n\n    for (const id in items) {\n      const el = items[id].addPlayClass(isPaused, properties);\n\n      !animtionElement && (animtionElement = el);\n    }\n    return animtionElement;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @return {Scene} An instance itself\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nscene.playCSS();\nscene.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public set(properties: any = {}) {\n    this.load(properties);\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options.selector;\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setSelector(_: string | boolean) {\n    const isSelector = this.options.selector;\n\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n    const frames: ObjectInterface<ObjectInterface<any> | Frame> = {};\n\n    for (const id in items) {\n      const item = items[id];\n\n      frames[id] = item.animate(Math.max(iterationTime * item.getPlaySpeed() - item.getDelay(), 0), easing);\n    }\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frames frame of that time.\n\t\t */\n    this.trigger(ANIMATE, {\n      currentTime: this.getTime(),\n      time: iterationTime,\n      frames,\n    });\n    return frames;\n  }\n}\n\nexport default Scene;\n","\nimport { StateInterface } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface } from \"./consts\";\n\n/**\n * @namespace presets\n */\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func set\n * @param {string | string[]} property - property to set effect\n * @param {any[]} values - values of 100%\n * @param {AnimatorOptions} [options]\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function set(property: string | string[], values: any[], options: StateInterface) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @func zoomIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @func zoomOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @func wipeIn\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @func wipeOut\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func transition\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: ObjectInterface<any>, to: ObjectInterface<any>, duration?: number, time: number }) {\n  item1.set({\n    [time]: from,\n    [time + duration]: to,\n  });\n  item2.set({\n    0: to,\n    [duration]: from,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @func fadeIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @func fadeOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @func blink\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport Frame from \"./Frame\";\nimport Keyframes from \"./Keyframes\";\nimport PropertyObject from \"./PropertyObject\";\nimport Animator from \"./Animator\";\nimport * as _presets from \"./presets\";\n\n/**\n* version info\n* @name Scene.VERSION\n* @memberof Scene\n* @static\n* @type {string}\n* @example\n* Scene.VERSION // #__VERSION__#\n*/\nexport const VERSION: string = \"#__VERSION__#\";\nexport { SceneItem, Frame, Animator, Keyframes, PropertyObject };\nexport { bezier, EASE_IN_OUT, EASE_IN, EASE_OUT, EASE, LINEAR, steps, STEP_START, STEP_END } from \"./easing\";\nexport { set, transition, wipeIn, wipeOut, fadeIn, fadeOut, blink, zoomIn, zoomOut} from \"./presets\";\nexport { OPTIONS, EVENTS } from \"./consts\";\nexport { setRole, setAlias } from \"./utils\";\nexport { Scene as default };\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","FUNCTION","PROPERTY","OPTIONS","EVENTS","prefixes","checkProperties","property","styles","document","body","documentElement","style","length","i","name","RGB","RGBA","HSL","HSLA","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","isUndefined","value","isObject","isArray","Array","isString","splitComma","text","matches","match","map","str","trim","splitBracket","exec","prefix","suffix","splitUnit","unit","NaN","parseFloat","camelize","all","letter","toUpperCase","now","Date","getTime","requestAnimationFrame","firstTime","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","currTime","setTimeout","COLOR_MODELS","hexToRGBA","hex","h","charAt","substring","r","parseInt","g","b","a","isNaN","stringToRGBA","color","join","indexOf","_a","arr","colorArr","hsl","s","l","Math","floor","abs","rgb","c","x","m","round","hslToRGBA","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","events","this","on","forEach","func","_this","push","callbacks","index","splice","_i","data","event","target","type","currentTarget","apply","cubic","y1","y2","t","t2","bezier","x1","x2","dx","solveFromX","max","min","easingName","steps","count","position","time","level","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","options","model","separator","setOptions","init","newOptions","PropertyObject","v","clone","toValue","split","getType","toFixed","num","isInProperties","roles","args","isCheckTrue","role","isRole","exportCSS","id","css","styleId","toId","styleElement","querySelector","innerText","insertAdjacentHTML","playCSS","item","isExportCSS","properties","getPlayState","state","addPlayClass","isEnded","setTime","el","peusdo","duration","getDuration","isZeroDuration","isFinite","animationend","setState","finish","removeEventListener","animationiteration","elapsedTime","currentTime","iterationCount","setCurrentIterationCount","addEventListener","addAnimationEvent","setPlayState","trigger","isDirectionReverse","currentIterationCount","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","tslib_1","getter","setter","parent","curveArray","setDuration","setEasing","Infinity","getActiveDuration","animator","play","setTickTime","tick","end","pause","isTick","activeDuration","getUnitTime","calculateIterationTime","isDelay","getIterationTime","getIterationCount","object","passIterationCount","currentIterationTime","setIterationTime","isReverse","Animator","constructor","prototype","EventTrigger","arrayToColorObject","arrayToPropertyObject","toPropertyObject","result","values","afterModel","obj","getOption","stringToBracketObject","toInnerProperties","arrObj","isPropertyObject","merge","to","from","getValue","slice","names","set","raw","params","_set","toObject","size","get","Frame","splitStyle","frame","frameProperties","cssObject","toCSSObject","cssArray","times","items","getNames","stack","concat","pop","updateFrame","originalDuration","ratio","time2","addTime","removeTime","pushIndex","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","colorModel","dotColor","type1","type2","isFunction1","isFunction2","r1","r2","v2","makeAnimationProperties","letter2","toLowerCase","keyframes","Keyframes","elements","load","selector","random","makeId","sceneId","getId","setAttribute","SceneItem","getDelay","realTime_1","keys","values_1","frames_1","getEasingName","getEasing","newFrame","getFrame","update","unshiftTime","firstFrame","unshift","prepend","setElement","querySelectorAll","Element","setId","getComputedStyle","fromCSS","parentEasing","_animate","isNumber","setFrame","has","fromTime","toTime","copyFrame","mergeFrame","left","right","realEasing","_getEasing","_getNowValue","realTime","setSelector","isStartZero","frames","isShuffle","totalDuration","start","j","threshold","keyvalue","keytime","getNowFrame","parentDuration","_getId","isParent","cssText","timingFunction","_toKeyframes","toCSS","isPausedCSS","pauseCSS","isPaused","endCSS","contains","hasName","nowEasing","lastTime","lastCSS","delayCSS","keyTime","usePrevValue","nextTime","prevFrame","nextFrame","prevValue","nextValue","dotValue","attributes","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","animtionElement","isSelector","Scene","newItem","_","animate","item1","item2","_b","_c","_d","isProperty","isFixedProperty","fixed","alias","others"],"mappings":"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"}