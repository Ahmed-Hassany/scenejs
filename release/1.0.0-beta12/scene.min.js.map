{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../node_modules/@daybrush/utils/dist/utils.esm.js","../src/EventTrigger.ts","../src/easing.ts","../src/PropertyObject.ts","../src/utils.ts","../src/Animator.ts","../src/utils/property.ts","../src/Frame.ts","../src/Keyframes.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["export type Role = true | RoleInterface;\nexport interface RoleInterface {\n  [role: string]: Role;\n}\nexport interface ObjectInterface<T> {\n  [name: string]: T;\n}\nexport type NameType = string | number;\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleInterface = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: ObjectInterface<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { \"animation-timing-function\": true, \"contents\": true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\ntype OptionType = [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"];\ntype EventType = [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","/*\nCopyright (c) 2018 Daybrush\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 0.3.0\n*/\n/**\n* @namespace\n* @name Consts\n*/\n\n/**\n* get string \"rgb\"\n* @memberof Color\n* @example\nimport {RGB} from \"@daybrush/utils\";\n\nconsole.log(RGB); // \"rgb\"\n*/\nvar RGB = \"rgb\";\n/**\n* get string \"rgba\"\n* @memberof Color\n* @example\nimport {RGBA} from \"@daybrush/utils\";\n\nconsole.log(RGBA); // \"rgba\"\n*/\n\nvar RGBA = \"rgba\";\n/**\n* get string \"hsl\"\n* @memberof Color\n* @example\nimport {HSL} from \"@daybrush/utils\";\n\nconsole.log(HSL); // \"hsl\"\n*/\n\nvar HSL = \"hsl\";\n/**\n* get string \"hsla\"\n* @memberof Color\n* @example\nimport {HSLA} from \"@daybrush/utils\";\n\nconsole.log(HSLA); // \"hsla\"\n*/\n\nvar HSLA = \"hsla\";\n/**\n* gets an array of color models.\n* @memberof Color\n* @example\nimport {COLOR_MODELS} from \"@daybrush/utils\";\n\nconsole.log(COLOR_MODELS); // [\"rgb\", \"rgba\", \"hsl\", \"hsla\"];\n*/\n\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* get string \"function\"\n* @memberof Consts\n* @example\nimport {FUNCTION} from \"@daybrush/utils\";\n\nconsole.log(FUNCTION); // \"function\"\n*/\n\nvar FUNCTION = \"function\";\n/**\n* get string \"property\"\n* @memberof Consts\n* @example\nimport {PROPERTY} from \"@daybrush/utils\";\n\nconsole.log(PROPERTY); // \"property\"\n*/\n\nvar PROPERTY = \"property\";\n/**\n* get string \"array\"\n* @memberof Consts\n* @example\nimport {ARRAY} from \"@daybrush/utils\";\n\nconsole.log(ARRAY); // \"array\"\n*/\n\nvar ARRAY = \"array\";\n/**\n* get string \"object\"\n* @memberof Consts\n* @example\nimport {OBJECT} from \"@daybrush/utils\";\n\nconsole.log(OBJECT); // \"object\"\n*/\n\nvar OBJECT = \"object\";\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\n\nvar STRING = \"string\";\n/**\n* get string \"number\"\n* @memberof Consts\n* @example\nimport {NUMBER} from \"@daybrush/utils\";\n\nconsole.log(NUMBER); // \"number\"\n*/\n\nvar NUMBER = \"number\";\n/**\n* get string \"undefined\"\n* @memberof Consts\n* @example\nimport {UNDEFINED} from \"@daybrush/utils\";\n\nconsole.log(UNDEFINED); // \"undefined\"\n*/\n\nvar UNDEFINED = \"undefined\";\nvar prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n/**\n * @namespace CrossBrowser\n */\n\n/**\n* Get a CSS property with a vendor prefix that supports cross browser.\n* @function\n* @param {string} property - A CSS property\n* @return {string} CSS property with cross-browser vendor prefix\n* @memberof CrossBrowser\n* @example\nimport {getCrossBrowserProperty} from \"@daybrush/utils\";\n\nconsole.log(getCrossBrowserProperty(\"transform\")); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\nconsole.log(getCrossBrowserProperty(\"filter\")); // \"filter\", \"-webkit-filter\"\n*/\n\nvar getCrossBrowserProperty =\n/*#__PURE__*/\nfunction (property) {\n  if (typeof document === UNDEFINED) {\n    return \"\";\n  }\n\n  var styles = (document.body || document.documentElement).style;\n  var length = prefixes.length;\n\n  if (typeof styles[property] !== UNDEFINED) {\n    return property;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n\n    if (typeof styles[name] !== UNDEFINED) {\n      return name;\n    }\n  }\n\n  return \"\";\n};\n/**\n* get string \"transfrom\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {TRANSFORM} from \"@daybrush/utils\";\n\nconsole.log(TRANSFORM); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\n*/\n\nvar TRANSFORM =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"transform\");\n/**\n* get string \"filter\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {FILTER} from \"@daybrush/utils\";\n\nconsole.log(FILTER); // \"filter\", \"-ms-filter\", \"-webkit-filter\"\n*/\n\nvar FILTER =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"filter\");\n/**\n* get string \"animation\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {ANIMATION} from \"@daybrush/utils\";\n\nconsole.log(ANIMATION); // \"animation\", \"-ms-animation\", \"-webkit-animation\"\n*/\n\nvar ANIMATION =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"animation\");\n/**\n* get string \"keyframes\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {KEYFRAMES} from \"@daybrush/utils\";\n\nconsole.log(KEYFRAMES); // \"keyframes\", \"-ms-keyframes\", \"-webkit-keyframes\"\n*/\n\nvar KEYFRAMES =\n/*#__PURE__*/\nANIMATION.replace(\"animation\", \"keyframes\");\n\n/**\n* @namespace\n* @name Utils\n*/\n\n/**\n* Check the type that the value is undefined.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isUndefined} from \"@daybrush/utils\";\n\nconsole.log(isUndefined(undefined)); // true\nconsole.log(isUndefined(\"\")); // false\nconsole.log(isUndefined(1)); // false\nconsole.log(isUndefined(null)); // false\n*/\n\nfunction isUndefined(value) {\n  return typeof value === UNDEFINED;\n}\n/**\n* Check the type that the value is object.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isObject} from \"@daybrush/utils\";\n\nconsole.log(isObject({})); // true\nconsole.log(isObject(undefined)); // false\nconsole.log(isObject(\"\")); // false\nconsole.log(isObject(null)); // false\n*/\n\nfunction isObject(value) {\n  return value && typeof value === OBJECT;\n}\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\n\nfunction isString(value) {\n  return typeof value === STRING;\n}\n/**\n* Check the type that the value is function.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isFunction} from \"@daybrush/utils\";\n\nconsole.log(isFunction(function a() {})); // true\nconsole.log(isFunction(() => {})); // true\nconsole.log(isFunction(\"1234\")); // false\nconsole.log(isFunction(1)); // false\nconsole.log(isFunction(null)); // false\n*/\n\nfunction isFunction(value) {\n  return typeof value === FUNCTION;\n}\n/**\n* divide text by space.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {spliceSpace} from \"@daybrush/utils\";\n\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitSpace(text) {\n  // divide comma(,)\n  var matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {splitComma} from \"@daybrush/utils\";\n\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  var matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n  return matches ? matches.map(function (str) {\n    return str.trim();\n  }) : [];\n}\n/**\n* divide text by bracket \"(\", \")\".\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitBracket} from \"@daybrush/utils\";\n\nconsole.log(splitBracket(\"a(1, 2)\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"\"}\nconsole.log(splitBracket(\"a(1, 2)b\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"b\"}\n*/\n\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\n/**\n* divide text by number and unit.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitUnit} from \"@daybrush/utils\";\n\nconsole.log(splitUnit(\"10px\"));\n// {prefix: \"\", value: 10, unit: \"px\"}\nconsole.log(splitUnit(\"-10px\"));\n// {prefix: \"\", value: -10, unit: \"px\"}\nconsole.log(splitUnit(\"a10%\"));\n// {prefix: \"a\", value: 10, unit: \"%\"}\n*/\n\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\n/**\n* transform strings to camel-case\n* @memberof Utils\n* @param {String} text - string\n* @return {String} camel-case string\n* @example\nimport {camelize} from \"@daybrush/utils\";\n\nconsole.log(camelize(\"transform-origin\")); // transformOrigin\nconsole.log(camelize(\"abcd_efg\")); // abcdEfg\nconsole.log(camelize(\"abcd efg\")); // abcdEfg\n*/\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n* transform a camelized string into a lowercased string.\n* @memberof Utils\n* @param {string} text - a camel-cased string\n* @param {string} [separator=\"-\"] - a separator\n* @return {string}  a lowercased string\n* @example\nimport {decamelize} from \"@daybrush/utils\";\n\nconsole.log(decamelize(\"transformOrigin\")); // transform-origin\nconsole.log(decamelize(\"abcdEfg\", \"_\")); // abcd_efg\n*/\n\nfunction decamelize(str, separator) {\n  if (separator === void 0) {\n    separator = \"-\";\n  }\n\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return \"\" + letter + separator + letter2.toLowerCase();\n  });\n}\n/**\n* Date.now() method\n* @memberof CrossBrowser\n* @return {number} milliseconds\n* @example\nimport {now} from \"@daybrush/utils\";\n\nconsole.log(now()); // 12121324241(milliseconds)\n*/\n\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\n/**\n* window.requestAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {FrameRequestCallback} callback - The function to call when it's time to update your animation for the next repaint.\n* @return {number} id\n* @example\nimport {requestAnimationFrame} from \"@daybrush/utils\";\n\nrequestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n*/\n\nvar requestAnimationFrame =\n/*#__PURE__*/\nfunction () {\n  var firstTime = now();\n  var raf = typeof window !== UNDEFINED && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame);\n  return raf ? raf.bind(window) : function (callback) {\n    var currTime = now();\n    var id = window.setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n\n/**\n* @namespace\n* @name Color\n*/\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {string} hex - hex color\n* @return {string} hex color\n* @example\nimport {cutHex} from \"@daybrush/utils\";\n\nconsole.log(cutHex(\"#000000\")) // \"000000\"\n*/\n\nfunction cutHex(hex) {\n  return hex.replace(\"#\", \"\");\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {Array} rgb color\n* @example\nimport {hexToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hexToRGBA(\"#00000005\"));\n// [0, 0, 0, 1]\nconsole.log(hexToRGBA(\"#201045\"));\n// [32, 16, 69, 1]\n*/\n\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n\n  return [r, g, b, a];\n}\n/**\n* convert 3(or 4)-digit hex color to 6(or 8)-digit hex color.\n* @memberof Color\n* @param {String} hex - 3(or 4)-digit hex color\n* @return {String} 6(or 8)-digit hex color\n* @example\nimport {toFullHex} from \"@daybrush/utils\";\n\nconsole.log(toFullHex(\"#123\")); // \"#112233\"\nconsole.log(toFullHex(\"#123a\")); // \"#112233aa\"\n*/\n\nfunction toFullHex(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var a = h.charAt(4);\n  var arr = [\"#\", r, r, g, g, b, b, a, a];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgba color.\n* @memberof Color\n* @param {Array} hsl(a) - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {Array} rgba color\n* @example\nimport {hslToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hslToRGBA([150, 0.5, 0.4]));\n// [51, 153, 102, 1]\n*/\n\nfunction hslToRGBA(hsl) {\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n\n  var result = [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), hsl.length > 3 ? hsl[3] : 1];\n  return result;\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {String} - 3-hex(#000), 4-hex(#0000) 6-hex(#000000), 8-hex(#00000000) or RGB(A), or HSL(A)\n* @return {Array} rgba color\n* @example\nimport {stringToRGBA} from \"@daybrush/utils\";\n\nconsole.log(stringToRGBA(\"#000000\")); // [0, 0, 0, 1]\nconsole.log(stringToRGBA(\"rgb(100, 100, 100)\")); // [100, 100, 100, 1]\nconsole.log(stringToRGBA(\"hsl(150, 0.5, 0.4)\")); // [51, 153, 102, 1]\n*/\n\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4 || color.length === 5) {\n      return hexToRGBA(toFullHex(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n        prefix = _a.prefix,\n        value = _a.value;\n\n    if (!prefix || !value) {\n      return;\n    }\n\n    var arr = splitComma(value);\n    var colorArr = [];\n    var length = arr.length;\n\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n\n        return colorArr;\n\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        } // hsl, hsla to rgba\n\n\n        return hslToRGBA(colorArr);\n    }\n  }\n\n  return;\n}\n\n/**\n * @namespace DOM\n */\n\n/**\n* Checks if the specified class value exists in the element's class attribute.\n* @memberof DOM\n* @param {HTMLElement} element - target\n* @param {string} className - the class name to search\n* @return {boolean} return false if the class is not found.\n* @example\nimport {hasClass} from \"@daybrush/utils\";\n\nconsole.log(hasClass(element, \"start\")); // true or false\n*/\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\n/**\n* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.\n* @memberof DOM\n* @param {HTMLElement} element - target\n* @param {string} className - the class name to add\n* @example\nimport {addClass} from \"@daybrush/utils\";\n\naddClass(element, \"start\");\n*/\n\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\n/**\n* Removes the specified class value.\n* @memberof DOM\n* @param {HTMLElement} element - target\n* @param {string} className - the class name to remove\n* @example\nimport {removeClass} from \"@daybrush/utils\";\n\nremoveClass(element, \"start\");\n*/\n\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n/**\n* Gets the CSS properties from the element.\n* @memberof DOM\n* @param {HTMLElement | HTMLElement[]} elements - elements\n* @param {string[]} properites - the CSS properties\n* @return {object} returns CSS properties and values.\n* @example\nimport {fromCSS} from \"@daybrush/utils\";\n\nconsole.log(fromCSS(element, [\"left\", \"opacity\", \"top\"])); // {\"left\": \"10px\", \"opacity\": 1, \"top\": \"10px\"}\n*/\n\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n\n  var element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n\n  var cssObject = {};\n  var styles = window.getComputedStyle(element);\n  var length = properties.length;\n\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n\n  return cssObject;\n}\n\nexport { RGB, RGBA, HSL, HSLA, COLOR_MODELS, FUNCTION, PROPERTY, ARRAY, OBJECT, STRING, NUMBER, UNDEFINED, getCrossBrowserProperty, TRANSFORM, FILTER, ANIMATION, KEYFRAMES, cutHex, hexToRGBA, toFullHex, hslToRGBA, stringToRGBA, isUndefined, isObject, isArray, isString, isFunction, splitSpace, splitComma, splitBracket, splitUnit, camelize, decamelize, now, requestAnimationFrame, hasClass, addClass, removeClass, fromCSS };\n//# sourceMappingURL=utils.esm.js.map\n","import { isObject } from \"@daybrush/utils\";\n\ntype CallbackType = (...args: any[]) => any;\ninterface EventParamterType {\n  [name: string]: CallbackType | CallbackType[];\n}\n/**\n* attach and trigger event handlers.\n* @memberof Scene\n*/\nclass EventTrigger {\n  private events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n\t*/\n  public on(name: string | EventParamterType, callback?: CallbackType | CallbackType[]) {\n    const events = this.events;\n\n    if (isObject(name)) {\n      for (const i in name) {\n        this.on(i, name[i]);\n      }\n      return this;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return this;\n    }\n    if (isObject(callback)) {\n      (callback as CallbackType[]).forEach(func => this.on(name, func));\n      return this;\n    }\n    const event = events[name];\n\n    event.push(callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param {String} name - event's name\n\t* @param {Function} [...data] - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const event = events[name];\n\n    if (data.length) {\n      const target = data[0];\n\n      target.type = name;\n      target.currentTarget = this;\n      !target.target && (target.target = this);\n    }\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n}\nexport default EventTrigger;\n","export interface EasingFunctionInterface extends Function {\n  easingName?: string;\n}\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunctionInterface = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunctionInterface = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { OBJECT, STRING } from \"@daybrush/utils\";\n\ninterface PropertyObjectInterface {\n  prefix?: string;\n  suffix?: string;\n  model?: string;\n  type?: string;\n  separator?: string;\n}\n/**\n* Make string, array to PropertyObject for the dot product\n* @memberof Scene\n*/\nclass PropertyObject {\n  public value: any[];\n  public options: PropertyObjectInterface;\n\n  /**\n\t* @param {String|Array} value - This value is in the array format ..\n\t* @param {String} separator - Array separator.\n\t* @example\nvar obj1 = new PropertyObject(\"1,2,3\", \",\");\nvar obj2 = new PropertyObject([1,2,3], \" \");\nvar obj3 = new PropertyObject(\"1$2$3\", \"$\");\n\n// rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options: PropertyObjectInterface) {\n    this.options = {\n      prefix: \"\",\n      suffix: \"\",\n      model: \"\",\n      type: \"\",\n      separator: \",\",\n    };\n    options && this.setOptions(options);\n    this.init(value);\n  }\n  public setOptions(newOptions: PropertyObjectInterface) {\n    const options = this.options;\n\n    for (const name in newOptions) {\n      options[name as keyof PropertyObjectInterface] = newOptions[name as keyof PropertyObjectInterface];\n    }\n    options && (this.options = {...this.options, ...options});\n    return this;\n  }\n  public getOption(name: keyof PropertyObjectInterface) {\n    return this.options[name];\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n    return new PropertyObject(arr, this.options);\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.options.prefix + this.join() + this.options.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.options.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n  private init(value: string | any[]) {\n    const type = typeof value;\n\n    if (type === STRING) {\n      this.value = (value as string).split(this.options.separator);\n    } else if (type === OBJECT) {\n      this.value = (value as any[]);\n    } else {\n      this.value = [value];\n    }\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, ObjectInterface, MAXIMUM, FIXED, ALIAS,\n  PAUSED, RUNNING, PLAY, ENDED, PREFIX } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { isArray, ANIMATION, ARRAY, OBJECT, PROPERTY, STRING, NUMBER } from \"@daybrush/utils\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === OBJECT) {\n    if (isArray(value)) {\n      return ARRAY;\n    } else if (isPropertyObject(value)) {\n      return PROPERTY;\n    }\n  } else if (type === STRING || type === NUMBER) {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function isInProperties(roles: ObjectInterface<any>, args: any[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: any[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: any[]) {\n  return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n  currentTime: number;\n  iterationCount: number;\n  elapsedTime: number;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n  return item.state.playCSS && item.getPlayState() === PAUSED;\n}\nexport function exportCSS(id: number | string, css: string) {\n  const styleId = `${PREFIX}STYLE_${toId(id)}`;\n  const styleElement: HTMLElement = document.querySelector(`#${styleId}`);\n\n  if (styleElement) {\n    styleElement.innerText = css;\n  } else {\n    document.body.insertAdjacentHTML(\"beforeend\",\n      `<style id=\"${styleId}\">${css}</style>`);\n  }\n}\nexport function makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 10000000)}`;\n\n    if (!selector) {\n      return id;\n    }\n    const checkElement = document.querySelector(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nexport function getRealId(item: Scene | SceneItem) {\n  return item.state.id || item.setId().getId();\n}\nexport function toId(text: number | string) {\n  return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(item: Scene | SceneItem, isExportCSS: boolean, properties = {}) {\n  if (!ANIMATION || item.getPlayState() === RUNNING) {\n    return;\n  }\n  if (isPausedCSS(item)) {\n    item.addPlayClass(true, properties);\n  } else {\n    if (item.isEnded()) {\n      item.setTime(0);\n    }\n    isExportCSS && item.exportCSS();\n    const el = item.addPlayClass(false, properties);\n\n    if (!el) {\n      return;\n    }\n    !item.state.peusdo && addAnimationEvent(item, el);\n    item.setState({ playCSS: true });\n  }\n  item.setPlayState(RUNNING);\n  item.trigger(PLAY);\n}\n\nexport function addAnimationEvent(item: Scene | SceneItem, el: HTMLElement) {\n  const duration = item.getDuration();\n  const isZeroDuration = !duration || !isFinite(duration);\n\n  const animationend = () => {\n    if (!isZeroDuration) {\n      item.setState({ playCSS: false });\n      item.finish();\n    }\n  };\n  item.on(ENDED, () => {\n    el.removeEventListener(\"animationend\", animationend);\n    el.removeEventListener(\"animationiteration\", animationiteration);\n  });\n  const animationiteration = ({elapsedTime}: any) => {\n    const currentTime = elapsedTime;\n    const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n    item.state.currentTime = currentTime;\n    item.setCurrentIterationCount(iterationCount);\n  };\n  el.addEventListener(\"animationend\", animationend);\n  el.addEventListener(\"animationiteration\", animationiteration);\n}\n","import {\n  ObjectInterface, THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED, RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE } from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, EasingFunctionInterface } from \"./easing\";\nimport { toFixed } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame } from \"@daybrush/utils\";\n\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\n\nexport type FillModeType = \"forwards\" | \"backwards\" | \"both\";\nexport type IterationCountType = number | \"infinite\";\nexport type EasingType = 0 | EasingFunctionInterface;\nexport type DirectionType = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\nexport type PlayStateType = \"paused\" | \"running\";\n\nexport interface StateInterface {\n  id?: number | string;\n  easing?: EasingType;\n  easingName?: string;\n  iterationCount?: IterationCountType;\n  delay?: number;\n  fillMode?: FillModeType;\n  direction?: DirectionType;\n  playSpeed?: number;\n  iterationTime?: number;\n  currentTime?: number;\n  tickTime?: number;\n  currentIterationCount?: number;\n  prevTime?: number;\n  playState?: PlayStateType;\n  duration?: number;\n  [key: string]: any;\n}\nexport function isDirectionReverse(currentIterationCount: number,\n                                   iteraiontCount: IterationCountType, direction: DirectionType) {\n  if (direction === REVERSE) {\n    return true;\n  } else if (iteraiontCount !== \"infinite\" && currentIterationCount === iteraiontCount && iteraiontCount % 1 === 0) {\n    return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n  }\n  return  direction === (currentIterationCount % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorOptions The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n/**\n* play video, animation, the others\n* @memberof Scene\n* @class Animator\n* @extends Scene.EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n* @param {AnimatorOptions} [options] - animator's options\n* @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n*/\n\nconst setters = [ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n@GetterSetter(getters, setters, \"state\")\nclass Animator extends EventTrigger {\n  public state: StateInterface;\n  public options: ObjectInterface<any>;\n\n  constructor(options?: StateInterface) {\n    super();\n    this.options = {};\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      currentIterationCount: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    };\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @method Scene.Animator#setEasing\n\t* @param {array| function} curverArray - The speed curve of an animation.\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | EasingFunctionInterface): this {\n    const easing = Array.isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    this.setState({ easing, easingName });\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @method Scene.Animator#setOptions\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param {Object} [AnimatorOptions] - animator's options\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: StateInterface = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      ((name in this.state ? this.state : this.options) as StateInterface)[name] = value;\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @method Scene.Animator#getTotalDuration\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.state[DELAY] + this.getActiveDuration();\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @method Scene.Animator#getActiveDuration\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getActiveDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.getDuration() * (this.state[ITERATION_COUNT] as number);\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @method Scene.Animator#isEnded\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state.tickTime === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @method Scene.Animator#isPaused\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public setNext(animator: Animator): this {\n    this.on(ENDED, () => {\n      animator.play();\n    });\n    return this;\n  }\n  /**\n\t* play animator\n\t* @method Scene.Animator#play\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public play() {\n    this.state[PLAY_STATE] = RUNNING;\n    if (this.isEnded()) {\n      this.setTickTime(0);\n    }\n    this.state.tickTime = this.getTime();\n\n    requestAnimationFrame((time: number) => {\n      this.state.prevTime = time;\n      this.tick(time);\n    });\n    /**\n\t\t * This event is fired when play animator.\n\t\t * @event Scene.Animator#play\n\t\t */\n    this.trigger(PLAY);\n\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @method Scene.Animator#pause\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public pause(): this {\n    this.state[PLAY_STATE] = PAUSED;\n    /**\n\t\t * This event is fired when animator is paused.\n\t\t * @event Scene.Animator#paused\n\t\t */\n    this.trigger(PAUSED);\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#finish\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public finish() {\n    this.state.tickTime = 0;\n    this.setTime(0);\n    this.end();\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#end\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public end() {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Scene.Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @method Scene.Animator#setTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    this.state.tickTime = this.state.delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    this.state.currentTime = currentTime;\n    this.calculateIterationTime();\n\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Scene.Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: this.getIterationCount(),\n    });\n\n    return this;\n  }\n  public getState(name: string): any {\n    return this.state[name];\n  }\n  public setState(object: StateInterface) {\n    for (const name in object) {\n      this.state[name] = object[name];\n    }\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @method Scene.Animator#getTime\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state.currentTime;\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state.duration = duration);\n        return parseFloat(time) / 100 * duration;\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @method Scene.Animator#isDelay\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const { delay, tickTime } = this.state;\n\n    return delay > 0 && (tickTime < delay);\n  }\n  public setCurrentIterationCount(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n\n    if (state.currentIterationCount < passIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Scene.Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state.currentTime,\n        iterationCount: passIterationCount,\n      });\n    }\n    state.currentIterationCount = iterationCount;\n    return this;\n  }\n  protected calculateIterationTime() {\n    const { iterationCount, fillMode, direction } = this.state;\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const currentIterationCount = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setCurrentIterationCount(currentIterationCount);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(currentIterationCount, iterationCount, direction);\n\n    if (isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (currentIterationCount >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n  protected tick(now: number) {\n    const state = this.state;\n    const { playSpeed, prevTime } = state;\n    const currentTime = this.state.tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state.prevTime = now;\n    this.setTickTime(currentTime);\n    if (this.isEnded()) {\n      this.end();\n      return;\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n\n    requestAnimationFrame((time: number) => {\n      this.tick(time);\n    });\n  }\n  private setTickTime(time: number) {\n    this.setTime(time - this.state.delay, true);\n  }\n}\n\n/**\n * Get a delay for the start of an animation.\n * @method Scene.Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Scene.Animator#setDelay\n * @param {number} delay - delay\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#getFillMode\n * @return {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#setFillMode\n * @param {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode - fillMode\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Scene.Animator#getIterationCount\n * @return {\"inifnite\"|number} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Scene.Animator#setIterationCount\n * @param {\"inifnite\"|number} iterationCount - iterationCount\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#getDirection\n * @return {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#setDirection\n * @param {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction - direction\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Scene.Animator#getPlayState\n * @return {\"paused\"|\"running\"} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Scene.Animator#setPlayState\n * @param {\"paused\"|\"running\"} playState - playState\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Scene.Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Scene.Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Scene.Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Scene.Animator#setDuration\n * @param {number} duration - duration\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Scene.Animator#getEasing\n * @return {0|function} easing\n */\n/**\n * Get the speed curve's name\n * @method Scene.Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Scene.Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\ninterface Animator {\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: IterationCountType): this;\n  getDirection(): IterationCountType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport { COLOR_MODELS, isString, splitComma, splitSpace, stringToRGBA, RGBA, splitBracket } from \"@daybrush/utils\";\nimport { ObjectInterface } from \"../consts\";\n\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const length = properties.length;\n  const obj = [];\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      continue;\n    }\n    obj.push({ [matches[1].trim()]: toPropertyObject(matches[2].trim()) });\n  }\n  return obj;\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n  // [prefix, value, other]\n  const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  const obj = toPropertyObject(value);\n\n  let arr = [value];\n  let separator = \",\";\n  let prefix = `${model}(`;\n  let suffix = `)${afterModel}`;\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.getOption(\"separator\");\n    arr = obj.value;\n    prefix += obj.getOption(\"prefix\");\n    suffix = obj.getOption(\"suffix\") + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  const result = stringToRGBA(value);\n\n  return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: string | ObjectInterface<any> | any[]): any {\n  if (!isString(value)) {\n    if (Array.isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: ObjectInterface<any> = {}) {\n  const model = object.getOption(\"model\");\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => toObject(obj, result));\n  }\n  return result;\n}\n","import {\n  ObjectInterface, NameType,\n  ALIAS, TIMING_FUNCTION\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport { isObject, isArray, isString,\n  ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT } from \"@daybrush/utils\";\n\nfunction toInnerProperties(obj: ObjectInterface<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: ObjectInterface<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: ObjectInterface<any>, from: ObjectInterface<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name] = toValue ? getValue([name], value()) : value;\n    } else if (type === ARRAY) {\n      to[name] = value.slice();\n    } else if (type === OBJECT) {\n      if (isObject(to[name]) && !isPropertyObject(to[name])) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n  return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n  const type = getType(value);\n\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === OBJECT) {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n* @class Scene.Frame\n* @param {Object} properties - properties\n* @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n */\nclass Frame {\n  public properties: ObjectInterface<any>;\n  constructor(properties: ObjectInterface<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @method Scene.Frame#get\n\t* @param {...Number|String|Scene.PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n\n    return getValue(getPropertyName(args), value);\n  }\n\n  public raw(...args: NameType[]) {\n    let properties = this.properties;\n    const params = getPropertyName(args);\n    const length = params.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties)) {\n        return undefined;\n      }\n      properties = properties[params[i]];\n    }\n    return properties;\n  }\n  /**\n\t* remove property value\n\t* @method Scene.Frame#remove\n\t* @param {...String} args - property name\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    let properties = this.properties;\n    const params = getPropertyName(args);\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length - 1; ++i) {\n      if (!isObject(properties)) {\n        return this;\n      }\n      properties = properties[params[i]];\n    }\n    delete properties[params[length - 1]];\n    return this;\n  }\n  /**\n\t* set property\n\t* @method Scene.Frame#set\n\t* @param {...Number|String|Scene.PropertyObject} args - property names or values\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n\t*/\n  public set(...args: any[]) {\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      this._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      this._set(params[0], value);\n    } else if (isObject(value)) {\n      if (isArray(value)) {\n        this._set(params, value);\n      } else if (isPropertyObject(value)) {\n        if (isRole(params)) {\n          this.set(...params, toObject(value));\n        } else {\n          this._set(params, value);\n        }\n      } else if (value instanceof Frame) {\n        this.merge(value);\n      } else {\n        for (const name in value) {\n          this.set(...params, name, value[name]);\n        }\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          this.set(...params, obj);\n        }\n        return this;\n      } else {\n        const styles = splitStyle(value);\n\n        styles.forEach(style => {\n          this.set(...params, style);\n        });\n        if (styles.length) {\n          return this;\n        }\n      }\n      this._set(params, value);\n    } else {\n      this._set(params, value);\n    }\n    return this;\n  }\n  /**\n\t* check that has property.\n\t* @method Scene.Frame#has\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    let properties = this.properties;\n    const params = getPropertyName(args);\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties) || !(params[i] in properties)) {\n        return false;\n      }\n      properties = properties[params[i]];\n    }\n    return true;\n  }\n  /**\n\t* clone frame.\n\t* @method Scene.Frame#clone\n\t* @return {Scene.Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    return frame.merge(this);\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @method Scene.Frame#merge\n\t* @param {Scene.Frame} frame - target frame.\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  public toObject() {\n    return clone(this.properties, true);\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @method Scene.Frame#toCSSObject\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.toObject();\n    const cssObject: ObjectInterface<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === TIMING_FUNCTION) {\n        cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value.easingName) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties.transform);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @method Scene.Frame#toCSS\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","import { ObjectInterface, RoleInterface } from \"./consts\";\nimport { isInProperties, toFixed } from \"./utils\";\nimport PropertyObject from \"./PropertyObject\";\nimport Frame from \"./Frame\";\nimport { isObject, isArray } from \"@daybrush/utils\";\n\nfunction getNames(names: ObjectInterface<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  for (const name in names) {\n    stack.push(name);\n\n    if (isObject(names[name])) {\n      arr = arr.concat(getNames(names[name], stack));\n    } else {\n      arr.push(stack.slice());\n    }\n    stack.pop();\n  }\n  return arr;\n}\nfunction updateFrame(names: ObjectInterface<any>, properties: ObjectInterface<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isObject(value) || isArray(value) || value instanceof PropertyObject) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n}\n/**\n* a list of objects in chronological order.\n* @memberof Scene\n*/\nclass Keyframes {\n  public times: number[];\n  public items: ObjectInterface<Frame>;\n  public names: RoleInterface;\n  /**\n\t */\n  constructor() {\n    this.times = [];\n    this.items = {};\n    this.names = {};\n  }\n  /**\n\t* A list of names\n\t* @return {string[][]} names\n\t* @example\nkeyframes.getNames(); // [[\"a\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n\t*/\n  public getNames() {\n    const names = this.names;\n\n    return getNames(names, []);\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param {...string[]} name - property's time\n\t* @return {Boolean} true: if has property, false: not\n\t* @example\nkeyframes.hasName(\"transform\", \"translate\"); // true or not\n\t*/\n  public hasName(...args: string[]) {\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t * update property names used in frames.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public update() {\n    const items = this.items;\n\n    for (const time in items) {\n      this.updateFrame(items[time]);\n    }\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} callback Function to execute for each element, taking three arguments\n\t * @param {Scene.Frame} [callback.item] The value of the item being processed in the keyframes.\n\t * @param {string} [callback.time] The time of the item being processed in the keyframes.\n\t * @param {object} [callback.items] The object that forEach() is being applied to.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: any, time: number, items: ObjectInterface<any>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n  }\n  /**\n\t* update property names used in frame.\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.Keyframes} An instance itself\n\t* @example\nkeyframes.updateFrame(frame);\n\t*/\n  public updateFrame(frame: Frame) {\n    if (!frame) {\n      return this;\n    }\n    const properties = frame.properties;\n    const names = this.names;\n\n    updateFrame(names, properties);\n    return this;\n  }\n  /**\n\t * Get how long an animation should take to complete one cycle.\n\t * @return {number} duration\n\t */\n  public getDuration() {\n    const times = this.times;\n\n    return times.length === 0 ? 0 : times[times.length - 1];\n  }\n  /**\n\t * Set how long an animation should take to complete one cycle.\n\t * @param {number} duration - duration\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public setDuration(duration: number, originalDuration: number = this.getDuration()) {\n    const ratio = duration / originalDuration;\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(time => {\n      const time2 = toFixed(time * ratio);\n\n      obj[time2] = items[time];\n\n      return time2;\n    });\n    this.items = obj;\n  }\n  /**\n\t * Set how much time you want to push ahead.\n\t * @param {number} time - time\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  /**\n\t* add object in list\n\t* @param {Number} time - frame's time\n\t* @param {Object} object - target\n\t* @return {Scene.Keyframes} An instance itself\n\t*/\n  public add(time: number, object: any) {\n    this.items[time] = object;\n    this.addTime(time);\n    return this;\n  }\n  /**\n\t* Check if keyframes has object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Boolean} true: if has time, false: not\n\t*/\n  public has(time: number) {\n    return time in this.items;\n  }\n  /**\n\t* get object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Object} object at that time\n\t*/\n  public get(time: number) {\n    return this.items[time];\n  }\n  /**\n\t* remove object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Keyframes} An instance itself\n\t*/\n  public remove(time: number) {\n    const items = this.items;\n\n    delete items[time];\n    this.removeTime(time);\n    return this;\n  }\n  private addTime(time: number) {\n    const times = this.times;\n    const length = times.length;\n    let pushIndex = length;\n\n    for (let i = 0; i < length; ++i) {\n      // if time is smaller than times[i], add time to index\n      if (time === times[i]) {\n        return this;\n      } else if (time < times[i]) {\n        pushIndex = i;\n        break;\n      }\n    }\n    this.times.splice(pushIndex, 0, time);\n    return this;\n  }\n  private removeTime(time: number) {\n    const index = this.times.indexOf(time);\n\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n}\nexport default Keyframes;\n","/**\n* @namespace\n* @name Dot\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport { EasingType } from \"../Animator\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { isArray, splitUnit, PROPERTY, FUNCTION } from \"@daybrush/utils\";\n\n/**\n* The dot product of Arrays\n* @memberof Dot\n* @function dotArray\n* @param {Array} a1 value1\n* @param {Array} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {Array|Object} Array.\n* @example\ndotArray([0, 0, 0, 1],[50, 50, 50, 1],0.5, 0.5);\n// => [25, 25, 25, 1]\n*/\nexport function dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  }\n  if (!isArray(a2)) {\n    return a1;\n  }\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\n/**\n* The dot product of PropertyObject(type=color)\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Dot\n* @function dotColor\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} PropertyObject(type=color).\n* @example\nvar colorObject = ......; //PropertyObject(type=color, model=\"rgba\", value=[254, 254, 254, 1]);\ndotColor(\"#000\",  colorObject, 0.5, 0.5);\n// \"#000\" => PropertyObject(type=color, model=\"rgba\", value=[0, 0, 0, 1]);\n// return => PropertyObject(type=color, model=\"rgba\", value=[127, 127, 127, 1]);\n*/\nexport function dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  if (b2 === 0) {\n    return color2;\n  }\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.getOption(\"model\");\n  const model2 = color2.getOption(\"model\");\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n/**\n* The dot product of Objects\n* @memberof Dot\n* @function dotObject\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} Array with Separator.\n* @example\ndotObject(PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)]),\nPropertyObject([\"9px\", \"solid\", rgba(50, 50, 50, 1)]),\n0.5, 0.5);\n// => PropertyObject([\"5px\", \"solid\", rgba(25, 25, 25, 1)])\n*/\nexport function dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.getOption(\"type\");\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.getOption(\"separator\") || a2.getOption(\"separator\"),\n    prefix: a1.getOption(\"prefix\") || a2.getOption(\"prefix\"),\n    suffix: a1.getOption(\"suffix\") || a2.getOption(\"suffix\"),\n    model: a1.getOption(\"model\") || a2.getOption(\"model\"),\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === \"array\") {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  // split number and unit of the value.\n  const r1 = b1 / (b1 + b2);\n  const r2 = 1 - r1;\n\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = v1.value * r2 + v2.value * r1;\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { StateInterface, EasingType, isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  toFixed,\n  isFixed,\n  playCSS,\n  toId,\n  exportCSS,\n  getRealId,\n  makeId,\n} from \"./utils\";\nimport Keyframes from \"./Keyframes\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n  START_ANIMATION,\n  PREFIX, THRESHOLD, ObjectInterface, NameType,\n  TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n  EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION\n} from \"./consts\";\nimport { isObject, isArray, isUndefined, decamelize,\n  ANIMATION, fromCSS, addClass, removeClass, hasClass,\n  KEYFRAMES, requestAnimationFrame, isFunction } from \"@daybrush/utils\";\n\nfunction makeAnimationProperties(properties: ObjectInterface<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)} : ${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\n\ntype ElementsType = HTMLElement[] | NodeListOf<HTMLElement>;\n/**\n* manage Frame Keyframes and play keyframes.\n* @memberof Scene\n* @extends Scene.Animator\n* @example\nconst item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator {\n  public keyframes: Keyframes;\n  private elements: ElementsType;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst item = new Scene.SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.keyframes = new Keyframes();\n    this.elements = [];\n    this.load(properties, options);\n  }\n  public getDuration() {\n    return Math.max(this.state[DURATION], this.keyframes.getDuration());\n  }\n  public setDuration(duration: number) {\n    if (duration === 0) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      this.keyframes.setDuration(duration, originalDuration);\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  /**\n\t* set the unique indicator of the item.\n\t* @method Scene.SceneItem#setId\n\t* @param {String} [id] - the indicator of the item.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nconst item = new SceneItem();\n\nitem.setId(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public setId(id?: number | string) {\n    const elements = this.elements;\n    const length = elements.length;\n\n    this.setState({ id: id || makeId(!!length) });\n    const sceneId = toId(this.getId());\n\n    this.state.selector || (this.state.selector = `[data-scene-id=\"${sceneId}\"]`);\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      elements[i].setAttribute(\"data-scene-id\", sceneId);\n    }\n    return this;\n  }\n  /**\n\t* Specifies the unique indicator of the item.\n\t* @method Scene.SceneItem#getId\n\t* @return {String} the indicator of the item.\n\t* @example\nconst item = scene.newItem(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public getId() {\n    return this.state.id;\n  }\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @method Scene.SceneItem#set\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any[] | number | string | ObjectInterface<any>, ...args: any[]) {\n    if (isObject(time)) {\n      this.load(time);\n      return this;\n    } else if (args[0]) {\n      if (args[0] instanceof SceneItem) {\n        const item: SceneItem = args[0];\n        const delay = item.getDelay();\n        const realTime = this.getUnitTime(time) + delay;\n        const { keys, values, frames } = item.getAllTimes(!!delay || !this.hasFrame(time));\n        const easing = this.getEasingName() !== item.getEasingName() ? item.getEasing() : 0;\n\n        keys.forEach(t => {\n          this.set(realTime + t, frames[values[t]]);\n        });\n        if (easing) {\n          this.set(realTime + keys[0], EASING, easing);\n          this.set(realTime + keys[keys.length - 1], EASING, \"initial\");\n        }\n        return this;\n      } else if (args.length === 1 && isArray(args[0])) {\n        args[0].forEach((item: any) => {\n          this.set(time, item);\n        });\n        return this;\n      }\n    }\n    const frame = this.newFrame(time);\n\n    frame.set(...args);\n    this.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|Scene.PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.update();\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | ObjectInterface<any>) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t*/\n  public prepend(item: SceneItem | ObjectInterface<any>) {\n    if (item instanceof SceneItem) {\n      const delay = item.getDelay();\n      const duration = item.getIterationCount() === INFINITE ? item.getDuration() : item.getActiveDuration();\n      const unshiftTime = duration + delay;\n      const firstFrame = this.keyframes.get(0);\n\n      if (firstFrame) {\n        this.keyframes.remove(0);\n      }\n      this.keyframes.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @method Scene.SceneItem#setSelector\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(selector: boolean | string) {\n    const state = this.state;\n\n    state.selector = selector === true ? state.id :\n      (selector || `[data-scene-id=\"${state.id}\"]`);\n\n    const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(state.selector);\n\n    if (matches) {\n      state.selector = matches[1];\n      state.peusdo = matches[2];\n    }\n    this.setElement(document.querySelectorAll(state.selector));\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n\t* @method Scene.SceneItem#setElement\n\t* @param {Element|Array|string} elements - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(elements: HTMLElement | ElementsType) {\n    if (!elements) {\n      return this;\n    }\n    this.elements = (elements instanceof Element) ? [elements] : elements;\n    this.setId(this.getId());\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @method Scene.SceneItem#setCSS\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @method Scene.SceneItem#update\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* update property names used in frame.\n\t* @method Scene.SceneItem#updateFrame\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.updateFrame(time, this.get(time));\n\t*/\n  public updateFrame(frame: Frame) {\n    this.keyframes.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#newFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#setFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    this.keyframes.add(this.getUnitTime(time), frame);\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @method Scene.SceneItem#getFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.keyframes.get(this.getUnitTime(time));\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @method Scene.SceneItem#hasFrame\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.keyframes.has(this.getUnitTime(time));\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @method Scene.SceneItem#removeFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const keyframes = this.keyframes;\n\n    keyframes.remove(time);\n    keyframes.update();\n\n    return this;\n  }\n  /**\n\t* Copy frame of the previous time at the next time.\n\t* @method Scene.SceneItem#copyFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(0) equal getFrame(1)\nitem.copyFrame(0, 1);\n\t*/\n  public copyFrame(fromTime: ObjectInterface<number> | number | string, toTime: number) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.copyFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const copyFrame = frame.clone();\n\n    this.setFrame(toTime, copyFrame);\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n\t* @method Scene.SceneItem#mergeFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number|string} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(fromTime: ObjectInterface<number> | number | string, toTime: number | string) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.mergeFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const toFrame = this.newFrame(toTime);\n\n    toFrame.merge(frame);\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @method Scene.SceneItem#getNowFrame\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Scene.Frame} frame of the current time\n\t* @example\nlet item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType) {\n    const frame = new Frame();\n    const names = this.keyframes.getNames();\n    const { left, right } = this._getNearTimeIndex(time);\n    const realEasing = this._getEasing(time, left, right, this.getEasing() || easing);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, properties, left, right, realEasing);\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (isArray(properties)) {\n      const length = properties.length;\n\n      for (let i = 0; i < length; ++i) {\n        const time = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(time, properties[i]);\n      }\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\" || time === \"keyframes\") {\n          continue;\n        }\n        const value = properties[time];\n        const realTime = this.getUnitTime(time);\n\n        if (typeof value === \"number\") {\n          this.mergeFrame(value, realTime);\n          continue;\n        }\n        this.set(realTime, value);\n      }\n    }\n    options && this.setOptions(options);\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @method Scene.SceneItem#clone\n\t * @param {AnimatorOptions} [options] animator options\n\t * @return {Scene.SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone(options = {}) {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    item.setOptions(options);\n    this.keyframes.forEach((frame: Frame, time: number) => item.setFrame(time, frame.clone()));\n    return item;\n  }\n  public setOptions(options: StateInterface = {}) {\n    super.setOptions(options);\n    const { id, selector, duration, elements } = options;\n\n    duration && this.setDuration(duration);\n    id && this.setId(id);\n    if (elements) {\n      this.setElement(elements);\n    } else if (selector) {\n      this.setSelector(selector === true ? this.state.id : selector);\n    }\n    return this;\n  }\n  public getAllTimes(isStartZero = true, options: StateInterface = {}) {\n    const times = this.keyframes.times.slice();\n    let length = times.length;\n    const keys: number[] = [];\n    const values: ObjectInterface<number> = {};\n\n    if (!length) {\n      return { keys: [], values: {}, frames: {} };\n    }\n    const frames: ObjectInterface<Frame> = {};\n    const duration = this.getDuration();\n    const direction = options[DIRECTION] || this.state[DIRECTION];\n    const isShuffle = direction === ALTERNATE || direction === ALTERNATE_REVERSE;\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(duration)) && times.push(duration);\n    length = times.length;\n    let iterationCount = options[ITERATION_COUNT] || this.state[ITERATION_COUNT];\n\n    iterationCount = iterationCount !== INFINITE ? iterationCount : 1;\n    const totalDuration = iterationCount * duration;\n\n    for (let i = 0; i < iterationCount; ++i) {\n      const isReverse = isDirectionReverse(i, iterationCount, direction);\n      const start = i * duration;\n\n      for (let j = 0; j < length; ++j) {\n        if (isShuffle && i !== 0 && j === 0) {\n          // pass duplicate\n          continue;\n        }\n        // isStartZero is keytimes[0] is 0 (i === 0 & j === 0)\n        const threshold = j === 0 && (i === 0 ? !isStartZero : !isShuffle) ? THRESHOLD : 0;\n        const keyvalue = toFixed(isReverse ? times[length - 1 - j] : times[j]);\n        const time = toFixed(isReverse ? duration - keyvalue : keyvalue);\n        const keytime = toFixed(start + time + threshold);\n\n        if (totalDuration < keytime) {\n          break;\n        }\n        keys.push(keytime);\n        values[keytime] = keyvalue;\n\n        if (!frames[keyvalue]) {\n          const frame = this.getFrame(keyvalue);\n\n          if (!frame || j === 0 || j === length - 1) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n          } else {\n            frames[keyvalue] = frame.clone();\n            const isTransform = frame.has(\"transform\");\n            const isFilter = frame.has(\"filter\");\n            if (isTransform || isFilter) {\n              const nowFrame = this.getNowFrame(keyvalue);\n\n              isTransform && frames[keyvalue].remove(\"transform\").set(\"transform\", nowFrame.raw(\"transform\"));\n              isFilter && frames[keyvalue].remove(\"filter\").set(\"filter\", nowFrame.raw(\"filter\"));\n            }\n          }\n        }\n      }\n    }\n    if (keys[keys.length - 1] < totalDuration) {\n      // last time === totalDuration\n      const isReverse = isDirectionReverse(iterationCount, iterationCount, direction);\n      const keyvalue = toFixed(duration * (isReverse ? 1 - iterationCount % 1 : iterationCount % 1));\n\n      keys.push(totalDuration);\n      values[totalDuration] = keyvalue;\n      !frames[keyvalue] && (frames[keyvalue] = this.getNowFrame(keyvalue));\n    }\n    return { keys, values, frames };\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(parentDuration = this.getDuration(), options: StateInterface = {}) {\n    const state = this.state;\n    const selector = state.selector || this.options.selector;\n    if (!selector) {\n      return \"\";\n    }\n    const peusdo = state.peusdo || \"\";\n    const id = getRealId(this);\n    // infinity or zero\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n    const isZeroDuration = parentDuration === 0;\n    const duration = isZeroDuration ? this.getDuration() : parentDuration;\n    const playSpeed = (options[PLAY_SPEED] || 1);\n    const delay = ((options[DELAY] || 0) + (isZeroDuration ? state[DELAY] : 0)) / playSpeed;\n    const easingName = (state[EASING] && state[EASING_NAME]) ||\n      (isParent && options[EASING] && options[EASING_NAME]) || state[EASING_NAME];\n    const iterationCount = (!isZeroDuration && options[ITERATION_COUNT]) || state[ITERATION_COUNT];\n    const fillMode = (options[FILL_MODE] !== \"forwards\" && options[FILL_MODE]) || state[FILL_MODE];\n    const direction = options[DIRECTION] || state[DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${toId(id)}`,\n      duration: `${duration / playSpeed}s`,\n      timingFunction: easingName,\n    });\n\n    const css = `${selector}.${START_ANIMATION}${peusdo} {\n\t\t\t${cssText}\n\t\t}${selector}.${PAUSE_ANIMATION}${peusdo} {\n      ${ANIMATION}-play-state: paused;\n    }\n\t\t${this._toKeyframes(duration, !isZeroDuration && isParent)}`;\n\n    return css;\n  }\n  public exportCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    if (!this.elements.length) {\n      return \"\";\n    }\n    const css = this.toCSS(duration, options);\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n\n    !isParent && exportCSS(getRealId(this), css);\n    return css;\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      addClass(elements[i], PAUSE_ANIMATION);\n    }\n  }\n  public endCSS() {\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      const element = elements[i];\n\n      removeClass(element, PAUSE_ANIMATION);\n      removeClass(element, START_ANIMATION);\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem.playCSS();\nitem.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const elements = this.elements;\n    const length = elements.length;\n    const cssText = makeAnimationProperties(properties);\n\n    if (!length) {\n      return;\n    }\n    if (isPaused) {\n      for (let i = 0; i < length; ++i) {\n        removeClass(elements[i], PAUSE_ANIMATION);\n      }\n    } else {\n      for (let i = 0; i < length; ++i) {\n        const element = elements[i];\n\n        element.style.cssText += cssText;\n        if (hasClass(element, START_ANIMATION)) {\n          removeClass(element, START_ANIMATION);\n          (el => {\n            requestAnimationFrame(() => {\n              requestAnimationFrame(() => {\n                addClass(el, START_ANIMATION);\n              });\n            });\n          })(element);\n        } else {\n          addClass(element, START_ANIMATION);\n        }\n      }\n    }\n    return elements[0];\n  }\n  private _getEasing(time: number, left: number, right: number, easing: EasingType) {\n    if (this.keyframes.hasName(TIMING_FUNCTION)) {\n      const nowEasing = this._getNowValue(time, [TIMING_FUNCTION], left, right, 0, true);\n\n      return isFunction(nowEasing) ? nowEasing : easing;\n    }\n    return easing;\n  }\n  private _toKeyframes(duration = this.getDuration(), isParent: boolean) {\n    const id = getRealId(this);\n    const state = this.state;\n    const playSpeed = state[PLAY_SPEED];\n    const iterationCount = state[ITERATION_COUNT];\n    const fillMode = state[FILL_MODE];\n    const delay = isParent ? state[DELAY] : 0;\n    const direction = isParent ? state[DIRECTION] : NORMAL;\n    const isReverse = direction === REVERSE || direction === ALTERNATE_REVERSE;\n    const { keys, values, frames } = this.getAllTimes(true, {\n      duration,\n      delay,\n      direction,\n      iterationCount: isParent && iterationCount !== INFINITE ? iterationCount : 1,\n      isCSS: true,\n    });\n    const length = keys.length;\n    const css: ObjectInterface<string> = {};\n    const keyframes: string[] = [];\n\n    if (!keys.length) {\n      return \"\";\n    }\n    for (const time in frames) {\n      css[time] = frames[time].toCSS();\n    }\n    const lastTime = keys[length - 1];\n    const lastCSS = css[values[lastTime]];\n\n    if (delay) {\n      const delayCSS = isReverse && (fillMode === \"both\" || fillMode === \"backwards\") ? lastCSS : css[0];\n      keyframes.push(`0%{}`);\n      isReverse && keyframes.push(`${delay / playSpeed / duration * 100 - THRESHOLD}%{${delayCSS}}`);\n    }\n    keys.forEach(time => {\n      const keyTime = (delay + time) / playSpeed / duration * 100;\n      keyframes.push(`${keyTime}%{${keyTime === 0 ? \"\" : css[values[time]]}}`);\n    });\n    // if (afterDelay) {\n    //   keyframes.push(`${lastTime / playSpeed / duration * 100 + THRESHOLD}%{${lastCSS}}`);\n    //   keyframes.push(`100%{${lastCSS}`);\n    // } else {\n    if ((delay + lastTime) / playSpeed < duration) {\n      // not 100%\n      keyframes.push(`100%{${lastCSS}}`);\n    }\n    // }\n    return `@${KEYFRAMES} ${PREFIX}KEYFRAMES_${toId(id)}{\n\t\t\t${keyframes.join(\"\\n\")}\n\t\t}`;\n  }\n  private _getNowValue(\n    time: number,\n    properties: string[],\n    left: number,\n    right: number,\n    easing: EasingType = this.getEasing(),\n    usePrevValue: boolean = isFixed(properties),\n  ) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    let prevTime: number;\n    let nextTime: number;\n    let prevFrame: Frame;\n    let nextFrame: Frame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n  private _getNearTimeIndex(time: number) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (times[i] === time) {\n        return { left: i, right: i };\n      } else if (times[i] > time) {\n        return { left: i === 0 ? 0 : i - 1, right: i };\n      }\n    }\n    return { left: length - 1, right: length - 1 };\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event Scene.SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Scene.Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length || this.state.peusdo) {\n      return frame;\n    }\n    const attributes = frame.get(\"attribute\");\n\n    if (attributes) {\n      for (const name in (attributes as any)) {\n        for (let i = 0; i < length; ++i) {\n          elements[i].setAttribute(name, attributes[name]);\n        }\n      }\n    }\n    const cssText = frame.toCSS();\n\n    if (this.state.cssText !== cssText) {\n      this.state.cssText = cssText;\n\n      for (let i = 0; i < length; ++i) {\n        elements[i].style.cssText += cssText;\n      }\n      return frame;\n    }\n  }\n}\n\nexport default SceneItem;\n","import Animator, { StateInterface, EasingType } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface, ANIMATE } from \"./consts\";\nimport Frame from \"./Frame\";\nimport { playCSS, exportCSS, getRealId, makeId } from \"./utils\";\nimport { isFunction } from \"@daybrush/utils\";\n\n/**\n* manage sceneItems and play Scene.\n* @extends Scene.Animator\n*/\nclass Scene extends Animator {\n\n  public items: ObjectInterface<Scene | SceneItem>;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst scene = new Scene({\n\t\titem1: {\n\t\t\t0: {\n\t\t\t\tdisplay: \"none\",\n\t\t\t},\n\t\t\t1: {\n\t\t\t\tdisplay: \"block\",\n\t\t\t\topacity: 0,\n\t\t\t},\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t},\n\t\titem2: {\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public setId(id: number | string = `scene${Math.floor(Math.random() * 100000)}`) {\n    this.state.id = id;\n    return this;\n  }\n  public getId() {\n    return this.state.id;\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  /**\n\t* get item in scene by name\n\t* @method Scene#getItem\n  * @param {string} name - The item's name\n  * @param {number} [index] - If item is added as function, it can be imported via index.\n  * @return {Scene | Scene.SceneItem} item\n  * @example\nconst item = scene.getItem(\"item1\")\n  */\n  public getItem(name: number | string) {\n    return this.items[name];\n  }\n  /**\n\t* create item in scene\n\t* @method Scene#newItem\n\t* @param {String} name - name of item to create\n\t* @param {StateOptions} options - The option object of SceneItem\n\t* @return {Sceme.SceneItem} Newly created item\n\t* @example\nconst item = scene.newItem(\"item1\")\n  */\n  public newItem(name: number | string, options = {}) {\n    if (name in this.items) {\n      return;\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n\t* add a sceneItem to the scene\n\t* @param {String} name - name of item to create\n\t* @param {Scene.SceneItem} item - sceneItem\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public setItem(name: number | string, item: Scene | SceneItem) {\n    item.setId(name);\n    this.items[name] = item;\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} func Function to execute for each element, taking three arguments\n\t * @param {Scene | Scene.SceneItem} [func.item] The value of the item being processed in the scene.\n\t * @param {string} [func.name] The name of the item being processed in the scene.\n\t * @param {object} [func.items] The object that forEach() is being applied to.\n\t * @return {Scene} An instance itself\n\t */\n  public forEach(func: (item?: Scene | SceneItem, name?: string, items?: ObjectInterface<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  /**\n\t * Export the CSS of the items to the style.\n\t * @return {Scene} An instance itself\n\t */\n  public exportCSS(duration: number = this.getDuration(), state?: StateInterface) {\n    const items = this.items;\n    let totalDuration = state ? this.getDuration() : duration;\n\n    if (!totalDuration || !isFinite(totalDuration)) {\n      totalDuration = 0;\n    }\n    const isParent = !!state;\n    const styles = [];\n\n    for (const id in items) {\n      styles.push(items[id].exportCSS(totalDuration, this.state));\n    }\n    const css: string = styles.join(\"\");\n    !isParent && exportCSS(getRealId(this), css);\n    return css;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(getRealId(item), item);\n  }\n  public isPausedCSS() {\n    return this.state.playCSS && this.isPaused();\n  }\n  public pauseCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].pauseCSS();\n    }\n  }\n  public pause() {\n    super.pause();\n    this.isPausedCSS() && this.pauseCSS();\n    return this;\n  }\n  public endCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].endCSS();\n    }\n    this.setState({ playCSS: false });\n  }\n  public end() {\n    !this.isEnded() && this.state.playCSS && this.endCSS();\n    super.end();\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const items = this.items;\n    let animtionElement: HTMLElement;\n\n    for (const id in items) {\n      const el = items[id].addPlayClass(isPaused, properties);\n\n      !animtionElement && (animtionElement = el);\n    }\n    return animtionElement;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @return {Scene} An instance itself\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nscene.playCSS();\nscene.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public set(properties: any = {}) {\n    this.load(properties);\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options.selector;\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else if (isFunction(object) && isSelector) {\n        const elements = document.querySelectorAll(name);\n        const length = elements.length;\n        const scene = new Scene();\n\n        for (let i = 0; i < length; ++i) {\n          const id = makeId();\n\n          scene.newItem(`${i}`, {\n            id,\n            selector: `[data-scene-id=\"${id}\"]`,\n            elements: elements[i],\n          }).load(object(i));\n        }\n        this.setItem(name, scene);\n        continue;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setSelector(_: string | boolean) {\n    const isSelector = this.options.selector;\n\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n    const frames: ObjectInterface<ObjectInterface<any> | Frame> = {};\n\n    for (const id in items) {\n      const item = items[id];\n\n      frames[id] = item.animate(Math.max(iterationTime * item.getPlaySpeed() - item.getDelay(), 0), easing);\n    }\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frames frame of that time.\n\t\t */\n    this.trigger(ANIMATE, {\n      currentTime: this.getTime(),\n      time: iterationTime,\n      frames,\n    });\n    return frames;\n  }\n}\n\nexport default Scene;\n","\nimport { StateInterface } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface } from \"./consts\";\n\n/**\n * @namespace presets\n */\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func set\n * @param {string | string[]} property - property to set effect\n * @param {any[]} values - values of 100%\n * @param {AnimatorOptions} [options]\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function set(property: string | string[], values: any[], options: StateInterface) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @func zoomIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @func zoomOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @func wipeIn\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @func wipeOut\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func transition\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: ObjectInterface<any>, to: ObjectInterface<any>, duration?: number, time: number }) {\n  item1.set({\n    [time]: from,\n    [time + duration]: to,\n  });\n  item2.set({\n    0: to,\n    [duration]: from,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @func fadeIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @func fadeOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @func blink\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport Frame from \"./Frame\";\nimport Keyframes from \"./Keyframes\";\nimport PropertyObject from \"./PropertyObject\";\nimport Animator from \"./Animator\";\nimport * as _presets from \"./presets\";\n\n/**\n* version info\n* @name Scene.VERSION\n* @memberof Scene\n* @static\n* @type {string}\n* @example\n* Scene.VERSION // #__VERSION__#\n*/\nexport const VERSION: string = \"#__VERSION__#\";\nexport { SceneItem, Frame, Animator, Keyframes, PropertyObject };\nexport { bezier, EASE_IN_OUT, EASE_IN, EASE_OUT, EASE, LINEAR, steps, STEP_START, STEP_END } from \"./easing\";\nexport { set, transition, wipeIn, wipeOut, fadeIn, fadeOut, blink, zoomIn, zoomOut} from \"./presets\";\nexport { OPTIONS, EVENTS } from \"./consts\";\nexport { setRole, setAlias } from \"./utils\";\nexport { Scene as default };\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","OPTIONS","EVENTS","RGB","RGBA","HSL","HSLA","COLOR_MODELS","FUNCTION","PROPERTY","ARRAY","OBJECT","STRING","NUMBER","UNDEFINED","prefixes","getCrossBrowserProperty","property","document","styles","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","isUndefined","value","isObject","isArray","Array","isString","isFunction","splitComma","text","matches","match","map","str","trim","splitBracket","exec","prefix","suffix","splitUnit","unit","NaN","parseFloat","camelize","all","letter","toUpperCase","decamelize","separator","letter2","toLowerCase","now","Date","getTime","requestAnimationFrame","firstTime","raf","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","bind","callback","currTime","setTimeout","hexToRGBA","hex","h","r","parseInt","substring","g","b","a","isNaN","stringToRGBA","color","charAt","join","indexOf","_a","arr","colorArr","hsl","s","l","Math","floor","abs","rgb","c","x","m","round","hslToRGBA","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","events","this","on","forEach","func","_this","push","callbacks","index","splice","_i","data","event","target","type","currentTarget","apply","cubic","y1","y2","t","t2","bezier","x1","x2","dx","solveFromX","max","min","easingName","steps","count","position","time","level","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","options","model","setOptions","init","newOptions","PropertyObject","v","clone","toValue","split","isPropertyObject","getType","toFixed","num","isInProperties","roles","args","isCheckTrue","role","isRole","exportCSS","id","css","styleId","toId","styleElement","querySelector","innerText","insertAdjacentHTML","makeId","selector","random","getRealId","item","state","setId","getId","playCSS","isExportCSS","properties","getPlayState","addPlayClass","isEnded","setTime","el","peusdo","duration","getDuration","isZeroDuration","isFinite","animationend","setState","finish","removeEventListener","animationiteration","elapsedTime","currentTime","iterationCount","setCurrentIterationCount","addEventListener","addAnimationEvent","setPlayState","trigger","isDirectionReverse","currentIterationCount","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","tslib_1","getter","setter","parent","curveArray","setDuration","setEasing","Infinity","getActiveDuration","animator","play","setTickTime","tick","end","pause","isTick","activeDuration","getUnitTime","calculateIterationTime","isDelay","getIterationTime","getIterationCount","object","passIterationCount","currentIterationTime","setIterationTime","isReverse","Animator","constructor","prototype","EventTrigger","arrayToColorObject","arrayToPropertyObject","toPropertyObject","result","values","afterModel","obj","getOption","stringToBracketObject","toInnerProperties","arrObj","merge","to","from","getValue","slice","getPropertyName","names","set","raw","params","_set","toObject","size","get","Frame","splitStyle","frame","frameProperties","cssObject","toCSSObject","cssArray","times","items","getNames","stack","concat","pop","updateFrame","originalDuration","ratio","time2","addTime","removeTime","pushIndex","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","colorModel","dotColor","type1","type2","isFunction1","isFunction2","r1","r2","v2","makeAnimationProperties","keyframes","Keyframes","elements","load","sceneId","setAttribute","SceneItem","getDelay","realTime_1","keys","values_1","frames_1","getEasingName","getEasing","newFrame","getFrame","update","unshiftTime","firstFrame","unshift","prepend","setElement","querySelectorAll","Element","getComputedStyle","fromCSS","parentEasing","_animate","isNumber","setFrame","has","fromTime","toTime","copyFrame","mergeFrame","left","right","realEasing","_getEasing","_getNowValue","realTime","setSelector","isStartZero","frames","isShuffle","totalDuration","start","j","threshold","keyvalue","keytime","isTransform","isFilter","nowFrame","getNowFrame","parentDuration","isParent","cssText","timingFunction","_toKeyframes","toCSS","isPausedCSS","pauseCSS","isPaused","endCSS","contains","hasName","nowEasing","lastTime","lastCSS","delayCSS","keyTime","usePrevValue","nextTime","prevFrame","nextFrame","prevValue","nextValue","dotValue","attributes","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","animtionElement","isSelector","Scene","scene","newItem","_","animate","item1","item2","_b","_c","_d","isProperty","isFixedProperty","fixed","alias","others"],"mappings":"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"}