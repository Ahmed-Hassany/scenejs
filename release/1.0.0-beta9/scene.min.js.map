{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../src/PropertyObject.ts","../src/utils.ts","../src/EventTrigger.ts","../src/easing.ts","../src/Animator.ts","../src/utils/color.ts","../src/utils/property.ts","../src/Frame.ts","../src/Keyframes.ts","../src/utils/dot.ts","../src/utils/css.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["export type Role = true | RoleInterface;\nexport interface RoleInterface {\n  [role: string]: Role;\n}\nexport interface ObjectInterface<T> {\n  [name: string]: T;\n}\nexport type NameType = string | number;\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleInterface = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: ObjectInterface<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { \"animation-timing-function\": true, \"contents\": true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\ntype OptionType = [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"];\ntype EventType = [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const RGBA = \"rgba\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const FUNCTION = \"function\";\nexport const PROPERTY = \"property\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {string[]}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n\nconst prefixes: string[] = [\"webkit\", \"ms\", \"moz\", \"o\"];\nconst checkProperties = (property: string) => {\n  const styles = (document.body || document.documentElement).style as any;\n  const length = prefixes.length;\n\n  if (typeof styles[property] !== \"undefined\") {\n    return property;\n  }\n  for (let i = 0; i < length; ++i) {\n    const name = `-${prefixes[i]}-${property}`;\n\n    if (typeof styles[name] !== \"undefined\") {\n      return name;\n    }\n  }\n  return \"\";\n};\n\nexport const TRANSFORM = /*#__PURE__*/checkProperties(\"transform\");\nexport const FILTER = /*#__PURE__*/checkProperties(\"filter\");\nexport const ANIMATION = /*#__PURE__*/checkProperties(\"animation\");\nexport const KEYFRAMES = /*#__PURE__*/ANIMATION.replace(\"animation\", \"keyframes\");\n","interface PropertyObjectInterface {\n  prefix?: string;\n  suffix?: string;\n  model?: string;\n  type?: string;\n  separator?: string;\n  [key: string]: any;\n}\n/**\n* Make string, array to PropertyObject for the dot product\n* @memberof Scene\n*/\nclass PropertyObject {\n  public value: any[];\n  public options: PropertyObjectInterface;\n\n  /**\n\t* @param {String|Array} value - This value is in the array format ..\n\t* @param {String} separator - Array separator.\n\t* @example\nvar obj1 = new PropertyObject(\"1,2,3\", \",\");\nvar obj2 = new PropertyObject([1,2,3], \" \");\nvar obj3 = new PropertyObject(\"1$2$3\", \"$\");\n\n// rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options: PropertyObjectInterface = {}) {\n    this.options = {\n      prefix: \"\",\n      suffix: \"\",\n      model: \"\",\n      type: \"\",\n      separator: \",\",\n    };\n    this.setOptions(options);\n    this.init(value);\n  }\n  public setOptions(options: PropertyObjectInterface) {\n    (Object as any).assign(this.options, options);\n    return this;\n  }\n  public getOption(name: string) {\n    return this.options[name];\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n\n    return new PropertyObject(arr, {\n      separator: this.options.separator,\n      prefix: this.options.prefix,\n      suffix: this.options.suffix,\n      model: this.options.model,\n      type: this.options.type,\n    });\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.options.prefix + this.join() + this.options.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.options.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n  private init(value: string | any[]) {\n    const type = typeof value;\n\n    if (type === \"string\") {\n      this.value = (value as string).split(this.options.separator);\n    } else if (type === \"object\") {\n      this.value = (value as any[]);\n    } else {\n      this.value = [value];\n    }\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, ObjectInterface, MAXIMUM, FIXED, ALIAS } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\n\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === \"object\") {\n    if (isArray(value)) {\n      return \"array\";\n    } else if (value instanceof PropertyObject) {\n      return \"property\";\n    }\n  } else if (type === \"string\" || type === \"number\") {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function isInProperties(roles: ObjectInterface<any>, args: any[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: any[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: any[]) {\n  return isInProperties(FIXED, args, true);\n}\nexport function isUndefined(value: any): value is undefined {\n  return (typeof value === \"undefined\");\n}\nexport function isObject(value: any): value is ObjectInterface<any> {\n  return value && (typeof value === \"object\");\n}\nexport function isArray(value: any): value is any[] {\n  return Array.isArray(value);\n}\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\nexport function splitUnit(text: string) {\n  const matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return { prefix: \"\", unit: \"\", value: NaN };\n  }\n  const prefix = matches[1];\n  const value = matches[2];\n  const unit = matches[3];\n\n  return { prefix, unit, value: parseFloat(value) };\n}\n// export function camelize(str: string) {\n// \treturn str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n// }\nexport function decamelize(str: string) {\n  return str.replace(/([a-z])([A-Z])/g, (all, letter, letter2) => `${letter}-${letter2.toLowerCase()}`);\n}\n","import { isObject } from \"./utils\";\n\ntype CallbackType = (...args: any[]) => any;\ninterface EventParamterType {\n  [name: string]: CallbackType | CallbackType[];\n}\n/**\n* attach and trigger event handlers.\n* @memberof Scene\n*/\nclass EventTrigger {\n  private events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n\t*/\n  public on(name: string | EventParamterType, callback?: CallbackType | CallbackType[]) {\n    const events = this.events;\n\n    if (isObject(name)) {\n      for (const i in name) {\n        this.on(i, name[i]);\n      }\n      return this;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return this;\n    }\n    if (isObject(callback)) {\n      (callback as CallbackType[]).forEach(func => this.on(name, func));\n      return this;\n    }\n    const event = events[name];\n\n    event.push(callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param {String} name - event's name\n\t* @param {Function} callback -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param {String} name - event's name\n\t* @param {Function} [...data] - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const event = events[name];\n\n    if (data.length) {\n      const target = data[0];\n\n      target.type = name;\n      target.currentTarget = this;\n      !target.target && (target.target = this);\n    }\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n}\nexport default EventTrigger;\n","export interface EasingFunctionInterface extends Function {\n  easingName?: string;\n}\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunctionInterface = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunctionInterface = (time: number) => {\n    const level = 1 / count;\n\n    return (position === \"end\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import {\n  ObjectInterface, THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED, RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE } from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, EasingFunctionInterface } from \"./easing\";\nimport { toFixed, isString, splitUnit } from \"./utils\";\n\nlet lastTime = 0;\nfunction camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\nconst requestAnimFrame = /*#__PURE__*/(() => {\n  return (window as any).requestAnimationFrame ||\n    (window as any).webkitRequestAnimationFrame ||\n    (window as any).mozRequestAnimationFrame ||\n    ((callback: (time: number) => void) => {\n      const currTime = Date.now();\n      const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      const id = window.setTimeout(() => {\n        callback(currTime + timeToCall);\n      }, 1000 / 60);\n      lastTime = currTime + timeToCall;\n      return id;\n    });\n})();\n\nexport type FillModeType = \"forwards\" | \"backwards\" | \"both\";\nexport type IterationCountType = number | \"infinite\";\nexport type EasingType = 0 | EasingFunctionInterface;\nexport type DirectionType = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\nexport type PlayStateType = \"paused\" | \"running\";\n\nexport interface StateInterface {\n  id?: string;\n  easing?: EasingType;\n  easingName?: string;\n  iterationCount?: IterationCountType;\n  delay?: number;\n  fillMode?: FillModeType;\n  direction?: DirectionType;\n  playSpeed?: number;\n  iterationTime?: number;\n  currentTime?: number;\n  tickTime?: number;\n  currentIterationCount?: number;\n  prevTime?: number;\n  playState?: PlayStateType;\n  duration?: number;\n  [key: string]: any;\n}\nexport function isDirectionReverse(iterationCount: number, direction: DirectionType) {\n  return direction === REVERSE ||\n    direction === (iterationCount % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorOptions The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n/**\n* play video, animation, the others\n* @memberof Scene\n* @class Animator\n* @extends Scene.EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n* @param {AnimatorOptions} [options] - animator's options\n* @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n*/\n\nconst setters = [ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n@GetterSetter(getters, setters, \"state\")\nclass Animator extends EventTrigger {\n  public state: StateInterface;\n  public options: ObjectInterface<any>;\n\n  constructor(options?: StateInterface) {\n    super();\n    this.options = {};\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      currentIterationCount: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    };\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @method Scene.Animator#setEasing\n\t* @param {array| function} curverArray - The speed curve of an animation.\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | EasingFunctionInterface): this {\n    const easing = Array.isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    this.setState({ easing, easingName });\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @method Scene.Animator#setOptions\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param {Object} [AnimatorOptions] - animator's options\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: StateInterface = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      ((name in this.state ? this.state : this.options) as StateInterface)[name] = value;\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @method Scene.Animator#getTotalDuration\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.state[DELAY] + this.getActiveDuration();\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @method Scene.Animator#getActiveDuration\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getActiveDuration(): number {\n    if (this.state[ITERATION_COUNT] === INFINITE) {\n      return Infinity;\n    }\n    return this.getDuration() * (this.state[ITERATION_COUNT] as number);\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @method Scene.Animator#isEnded\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state.tickTime === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @method Scene.Animator#isPaused\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public setNext(animator: Animator): this {\n    this.on(ENDED, () => {\n      animator.play();\n    });\n    return this;\n  }\n  /**\n\t* play animator\n\t* @method Scene.Animator#play\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public play() {\n    this.state[PLAY_STATE] = RUNNING;\n    if (this.isEnded()) {\n      this.setTickTime(0);\n    }\n    this.state.tickTime = this.getTime();\n\n    requestAnimFrame((time: number) => {\n      this.state.prevTime = time;\n      this.tick(time);\n    });\n    /**\n\t\t * This event is fired when play animator.\n\t\t * @event Scene.Animator#play\n\t\t */\n    this.trigger(PLAY);\n\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @method Scene.Animator#pause\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public pause(): this {\n    this.state[PLAY_STATE] = PAUSED;\n    /**\n\t\t * This event is fired when animator is paused.\n\t\t * @event Scene.Animator#paused\n\t\t */\n    this.trigger(PAUSED);\n    return this;\n  }\n  /**\n\t * end animator\n\t * @method Scene.Animator#end\n\t * @return {Scene.Animator} An instance itself.\n\t*/\n  public end(): this {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Scene.Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* reset animator\n\t* @method Scene.Animator#reset\n\t* @return {Scene.Animator} An instance itself.\n\t*/\n  public reset() {\n    this.state.tickTime = 0;\n    this.setTime(0);\n    this.pause();\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @method Scene.Animator#setTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Scene.Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    this.state.tickTime = this.state.delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    this.state.currentTime = currentTime;\n    this.calculateIterationTime();\n\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Scene.Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: this.getIterationCount(),\n    });\n\n    return this;\n  }\n  public getState(name: string): any {\n    return this.state[name];\n  }\n  public setState(object: StateInterface) {\n    for (const name in object) {\n      this.state[name] = object[name];\n    }\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @method Scene.Animator#getTime\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state.currentTime;\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state.duration = duration);\n        return parseFloat(time) / 100 * duration;\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @method Scene.Animator#isDelay\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const { delay, tickTime } = this.state;\n\n    return delay > 0 && (tickTime < delay);\n  }\n  protected setCurrentIterationCount(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n\n    if (state.currentIterationCount < passIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Scene.Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state.currentTime,\n        iterationCount: passIterationCount,\n      });\n    }\n    state.currentIterationCount = iterationCount;\n    return this;\n  }\n  protected calculateIterationTime() {\n    const { iterationCount, fillMode, direction } = this.state;\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const currentIterationCount = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setCurrentIterationCount(currentIterationCount);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(currentIterationCount, direction);\n\n    if (isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (currentIterationCount >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n  protected tick(now: number) {\n    const state = this.state;\n    const { playSpeed, prevTime } = state;\n    const currentTime = this.state.tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state.prevTime = now;\n    this.setTickTime(currentTime);\n    if (this.isEnded()) {\n      this.end();\n      return;\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n\n    requestAnimFrame((time: number) => {\n      this.tick(time);\n    });\n  }\n  private setTickTime(time: number) {\n    this.setTime(time - this.state.delay, true);\n  }\n}\n\n/**\n * Get a delay for the start of an animation.\n * @method Scene.Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Scene.Animator#setDelay\n * @param {number} delay - delay\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#getFillMode\n * @return {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Scene.Animator#setFillMode\n * @param {\"none\"|\"forwards\"|\"backwards\"|\"both\"} fillMode - fillMode\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Scene.Animator#getIterationCount\n * @return {\"inifnite\"|number} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Scene.Animator#setIterationCount\n * @param {\"inifnite\"|number} iterationCount - iterationCount\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#getDirection\n * @return {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Scene.Animator#setDirection\n * @param {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} direction - direction\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Scene.Animator#getPlayState\n * @return {\"paused\"|\"running\"} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Scene.Animator#setPlayState\n * @param {\"paused\"|\"running\"} playState - playState\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Scene.Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Scene.Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Scene.Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Scene.Animator#setDuration\n * @param {number} duration - duration\n * @return {Scene.Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Scene.Animator#getEasing\n * @return {0|function} easing\n */\n/**\n * Get the speed curve's name\n * @method Scene.Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Scene.Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\ninterface Animator {\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: IterationCountType): this;\n  getDirection(): IterationCountType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","import { RGBA } from \"../consts\";\n\n/**\n* @namespace\n* @name Color\n*/\nexport const COLOR_MODELS = [\"rgb\", RGBA, \"hsl\", \"hsla\"];\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {String} hex color\n* @example\nconsole.log(cutHex(\"#000000\"))\n// \"000000\"\n*/\nexport function cutHex(hex: string) {\n  return (hex.charAt(0) === \"#\") ? hex.substring(1) : hex;\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {String} hex - hex color\n* @return {Array} rgb color\n* @example\nconsole.log(hexToRGB(\"#000000\"));\n// [0, 0, 0]\nconsole.log(hexToRGB(\"#201045\"));\n// [32, 16, 69]\n*/\nexport function hexToRGB(hex: string) {\n  const h = cutHex(hex);\n  const r = parseInt(h.substring(0, 2), 16);\n  const g = parseInt(h.substring(2, 4), 16);\n  const b = parseInt(h.substring(4, 6), 16);\n  let a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n  return [r, g, b, a];\n}\n\n/**\n* convert 3-digit hex color to 6-digit hex color.\n* @memberof Color\n* @param {String} hex - 3-digit hex color\n* @return {String} 6-digit hex color\n* @example\nconsole.log(hex3to6(\"#123\"));\n// \"#112233\"\n*/\nexport function hex3to6(h: string) {\n  const r = h.charAt(1);\n  const g = h.charAt(2);\n  const b = h.charAt(3);\n  const arr = [\"#\", r, r, g, g, b, b];\n\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgb color.\n* @memberof Color\n* @param {Array} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1)\n* @return {Array} rgb color\n* @example\nconsole.log(hslToRGB([150, 0.5, 0.4]));\n// [51, 153, 102]\n*/\nexport function hslToRGB(hsl: number[]) {\n  let h = hsl[0];\n  const s = hsl[1];\n  const l = hsl[2];\n\n  if (h < 0) {\n    h +=  Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n  h %= 360;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n  const m = l - c / 2;\n  let rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n  const result = [\n    Math.round((rgb[0] + m) * 255),\n    Math.round((rgb[1] + m) * 255),\n    Math.round((rgb[2] + m) * 255),\n  ];\n\n  if (hsl.length > 3) {\n    result[3] = hsl[3];\n  }\n  return result;\n}\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {COLOR_MODELS, hexToRGB, hex3to6, hslToRGB} from \"./color\";\nimport {isString, isArray} from \"../utils\";\nimport { ObjectInterface, RGBA } from \"../consts\";\n\n/**\n* divide text by space.\n* @memberof Property\n* @function splitSpace\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitSpace(text: string) {\n  // divide comma(,)\n  const matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Property\n* @function splitComma\n* @param {String} text - text to divide\n* @return {Array} divided texts\n* @example\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nexport function splitComma(text: string) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  const matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n\n  return matches ? matches.map(str => str.trim()) : [];\n}\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const length = properties.length;\n  const obj = [];\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      continue;\n    }\n    obj.push({[matches[1].trim()]: toPropertyObject(matches[2].trim())});\n  }\n  return obj;\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n\t* convert text with parentheses to PropertyObject[type=color].\n\t* If the values are not RGBA model, change them RGBA mdoel.\n\t* @memberof Property\n\t* @function toColorObject\n\t* @param {String|PropertyObject} value - color value \"rgba(0,0,0,1)\"\n\t* @return {PropertyObject} PropertyObject[type=color]\n\t* @example\ntoColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function toColorObject(value: PropertyObject | number[] | string) {\n  let colorObject;\n\n  if (value instanceof PropertyObject) {\n    colorObject = value;\n  } else if (isArray(value)) {\n    colorObject = arrayToColorObject(value);\n  } else if (isString(value)) {\n    return stringToColorObject(value);\n  }\n  let colorArray = colorObject.value;\n  const length = colorArray.length;\n\n  if (length === 4) {\n    colorArray[3] = parseFloat(colorArray[3]);\n  } else if (length === 3) {\n    colorArray[3] = 1;\n  }\n  colorObject.setOptions({type: \"color\"});\n  const colorModel = colorObject.getOption(\"model\").toLowerCase();\n\n  // rgb hsl model to CHANGE rgba hsla\n  // string -> number\n  if (colorModel === \"rgb\") {\n    colorObject.setOptions({\n      type: \"color\",\n      model: RGBA,\n      prefix: `${RGBA}(`,\n      suffix: \")\",\n    });\n  }\n  switch (colorModel) {\n    case \"rgb\":\n    case RGBA:\n      for (let i = 0; i < 3; ++i) {\n        colorArray[i] = parseInt(colorArray[i], 10);\n      }\n      break;\n    case \"hsl\":\n    case \"hsla\":\n      for (let i = 1; i < 3; ++i) {\n        if (colorArray[i].indexOf(\"%\") !== -1) {\n          colorArray[i] = parseFloat(colorArray[i]) / 100;\n        }\n      }\n      // hsl, hsla to rgba\n      colorArray = hslToRGB(colorArray);\n      return arrayToColorObject(colorArray);\n    default:\n  }\n  return colorObject;\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(value: string) {\n  // [prefix, value, other]\n  const matches = (/([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g).exec(value);\n\n  if (!matches || matches.length < 4) {\n    return value;\n  }\n  const model = matches[1] || \"\";\n  const text = matches[2];\n  let prefix = `${model}(`;\n  let suffix = `)${matches[3]}`;\n  let separator = \",\";\n  let values;\n  // divide comma(,)\n  const obj = toPropertyObject(text);\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.getOption(\"separator\");\n    values = obj.value;\n    prefix += obj.getOption(\"prefix\");\n    suffix = obj.getOption(\"suffix\") + suffix;\n  } else {\n    values = [text];\n  }\n  const result = new PropertyObject(values, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return toColorObject(result);\n  } else {\n    return result;\n  }\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  let colorArray: number[];\n\n  if (value.charAt(0) === \"#\") {\n    if (value.length === 4) {\n      colorArray = hexToRGB(hex3to6(value));\n    } else {\n      colorArray = hexToRGB(value);\n    }\n    return arrayToColorObject(colorArray);\n  } else if (value.indexOf(\"(\") !== -1) {\n    // in bracket.\n    return stringToBracketObject(value);\n  } else {\n    throw new Error(`Invalid Format : Not a Color - ${value}`);\n  }\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: string | ObjectInterface<any> | any[]): any {\n  if (!isString(value)) {\n    if (Array.isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: ObjectInterface<any> = {}) {\n  const model = object.getOption(\"model\");\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => toObject(obj, result));\n  }\n  return result;\n}\n","import {\n  TRANSFORM, FILTER, ObjectInterface, NameType,\n  ANIMATION, ALIAS, TIMING_FUNCTION, PROPERTY, FUNCTION} from \"./consts\";\nimport {isObject, isString, isArray, isRole, getType} from \"./utils\";\nimport {toPropertyObject, splitStyle, toObject} from \"./utils/property\";\nimport PropertyObject from \"./PropertyObject\";\n\nfunction toInnerProperties(obj: ObjectInterface<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\nfunction isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\n/* eslint-disable */\nfunction clone(target: ObjectInterface<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: ObjectInterface<any>, from: ObjectInterface<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name] = toValue ? getValue([name], value()) : value;\n    } else if (type === \"array\") {\n      to[name] = value.slice();\n    } else if (type === \"object\") {\n      if (isObject(to[name]) && !isPropertyObject(to[name])) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n\nfunction getValue(names: NameType[], value: any): any {\n  const type = getType(value);\n\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === \"object\") {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n* @class Scene.Frame\n* @param {Object} properties - properties\n* @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n */\nclass Frame {\n  public properties: ObjectInterface<any>;\n  constructor(properties: ObjectInterface<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @method Scene.Frame#get\n\t* @param {...Number|String|Scene.PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n\n    return getValue(args[0] in ALIAS ? ALIAS[args[0]] : args, value);\n  }\n\n  public raw(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties)) {\n        return undefined;\n      }\n      properties = properties[params[i]];\n    }\n    return properties;\n  }\n  /**\n\t* remove property value\n\t* @method Scene.Frame#remove\n\t* @param {...String} args - property name\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length - 1; ++i) {\n      if (!isObject(properties)) {\n        return this;\n      }\n      properties = properties[params[i]];\n    }\n    delete properties[params[length - 1]];\n    return this;\n  }\n  /**\n\t* set property\n\t* @method Scene.Frame#set\n\t* @param {...Number|String|Scene.PropertyObject} args - property names or values\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n\t*/\n  public set(...args: any[]) {\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      this._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      this._set(params[0], value);\n    } else if (isObject(value)) {\n      if (isArray(value)) {\n        this._set(params, value);\n      } else if (isPropertyObject(value)) {\n        if (isRole(params)) {\n          this.set(...params, toObject(value));\n        } else {\n          this._set(params, value);\n        }\n      } else if (value instanceof Frame) {\n        this.merge(value);\n      } else {\n        for (const name in value) {\n          this.set(...params, name, value[name]);\n        }\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          this.set(...params, obj);\n        }\n        return this;\n      } else {\n        const styles = splitStyle(value);\n\n        styles.forEach(style => {\n          this.set(...params, style);\n        });\n        if (styles.length) {\n          return this;\n        }\n      }\n      this._set(params, value);\n    } else {\n      this._set(params, value);\n    }\n    return this;\n  }\n  /**\n\t* check that has property.\n\t* @method Scene.Frame#has\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    let properties = this.properties;\n    const params = args[0] in ALIAS ? ALIAS[args[0]] : args;\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    for (let i = 0; i < length; ++i) {\n      if (!isObject(properties) || !(params[i] in properties)) {\n        return false;\n      }\n      properties = properties[params[i]];\n    }\n    return true;\n  }\n  /**\n\t* clone frame.\n\t* @method Scene.Frame#clone\n\t* @return {Scene.Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    frame.merge(this);\n    return frame;\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @method Scene.Frame#merge\n\t* @param {Scene.Frame} frame - target frame.\n\t* @return {Scene.Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  public toObject() {\n    return clone(this.properties, true);\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @method Scene.Frame#toCSSObject\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.toObject();\n    const cssObject: ObjectInterface<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === TIMING_FUNCTION) {\n        cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value.easingName) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties.transform);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @method Scene.Frame#toCSS\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","import { ObjectInterface, RoleInterface } from \"./consts\";\nimport { isObject, isArray, isInProperties, toFixed } from \"./utils\";\nimport PropertyObject from \"./PropertyObject\";\nimport Frame from \"./Frame\";\n\nfunction getNames(names: ObjectInterface<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  for (const name in names) {\n    stack.push(name);\n\n    if (isObject(names[name])) {\n      arr = arr.concat(getNames(names[name], stack));\n    } else {\n      arr.push(stack.slice());\n    }\n    stack.pop();\n  }\n  return arr;\n}\nfunction updateFrame(names: ObjectInterface<any>, properties: ObjectInterface<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isObject(value) || isArray(value) || value instanceof PropertyObject) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n}\n/**\n* a list of objects in chronological order.\n* @memberof Scene\n*/\nclass Keyframes {\n  public times: number[];\n  public items: ObjectInterface<any>;\n  public names: RoleInterface;\n  /**\n\t */\n  constructor() {\n    this.times = [];\n    this.items = {};\n    this.names = {};\n  }\n  /**\n\t* A list of names\n\t* @return {string[][]} names\n\t* @example\nkeyframes.getNames(); // [[\"a\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n\t*/\n  public getNames() {\n    const names = this.names;\n\n    return getNames(names, []);\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param {...string[]} name - property's time\n\t* @return {Boolean} true: if has property, false: not\n\t* @example\nkeyframes.hasName(\"transform\", \"translate\"); // true or not\n\t*/\n  public hasName(...args: string[]) {\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t * update property names used in frames.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public update() {\n    const items = this.items;\n\n    for (const time in items) {\n      this.updateFrame(items[time]);\n    }\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} callback Function to execute for each element, taking three arguments\n\t * @param {Scene.Frame} [callback.item] The value of the item being processed in the keyframes.\n\t * @param {string} [callback.time] The time of the item being processed in the keyframes.\n\t * @param {object} [callback.items] The object that forEach() is being applied to.\n\t * @return {Scene.Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: any, time: number, items: ObjectInterface<any>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n  }\n  /**\n\t* update property names used in frame.\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.Keyframes} An instance itself\n\t* @example\nkeyframes.updateFrame(frame);\n\t*/\n  public updateFrame(frame: Frame) {\n    if (!frame) {\n      return this;\n    }\n    const properties = frame.properties;\n    const names = this.names;\n\n    updateFrame(names, properties);\n    return this;\n  }\n  /**\n\t * Get how long an animation should take to complete one cycle.\n\t * @return {number} duration\n\t */\n  public getDuration() {\n    const times = this.times;\n\n    return times.length === 0 ? 0 : times[times.length - 1];\n  }\n  /**\n\t * Set how long an animation should take to complete one cycle.\n\t * @param {number} duration - duration\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public setDuration(duration: number, originalDuration: number = this.getDuration()) {\n    const ratio = duration / originalDuration;\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(time => {\n      const time2 = toFixed(time * ratio);\n\n      obj[time2] = items[time];\n\n      return time2;\n    });\n    this.items = obj;\n  }\n  /**\n\t * Set how much time you want to push ahead.\n\t * @param {number} time - time\n\t * @return {Scene.Keyframes} An instance itself.\n\t */\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: ObjectInterface<any> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  /**\n\t* add object in list\n\t* @param {Number} time - frame's time\n\t* @param {Object} object - target\n\t* @return {Scene.Keyframes} An instance itself\n\t*/\n  public add(time: number, object: any) {\n    this.items[time] = object;\n    this.addTime(time);\n    return this;\n  }\n  /**\n\t* Check if keyframes has object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Boolean} true: if has time, false: not\n\t*/\n  public has(time: number) {\n    return time in this.items;\n  }\n  /**\n\t* get object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Object} object at that time\n\t*/\n  public get(time: number) {\n    return this.items[time];\n  }\n  /**\n\t* remove object at that time.\n\t* @param {Number} time - object's time\n\t* @return {Keyframes} An instance itself\n\t*/\n  public remove(time: number) {\n    const items = this.items;\n\n    delete items[time];\n    this.removeTime(time);\n    return this;\n  }\n  private addTime(time: number) {\n    const times = this.times;\n    const length = times.length;\n    let pushIndex = length;\n\n    for (let i = 0; i < length; ++i) {\n      // if time is smaller than times[i], add time to index\n      if (time === times[i]) {\n        return this;\n      } else if (time < times[i]) {\n        pushIndex = i;\n        break;\n      }\n    }\n    this.times.splice(pushIndex, 0, time);\n    return this;\n  }\n  private removeTime(time: number) {\n    const index = this.times.indexOf(time);\n\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n}\nexport default Keyframes;\n","/**\n* @namespace\n* @name Dot\n*/\n\nimport { isArray, splitUnit } from \"../utils\";\nimport PropertyObject from \"../PropertyObject\";\nimport { EasingType } from \"../Animator\";\nimport { getType } from \"../utils\";\nimport { PROPERTY, FUNCTION } from \"../consts\";\nimport { toPropertyObject } from \"./property\";\n\n/**\n* The dot product of Arrays\n* @memberof Dot\n* @function dotArray\n* @param {Array} a1 value1\n* @param {Array} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {Array|Object} Array.\n* @example\ndotArray([0, 0, 0, 1],[50, 50, 50, 1],0.5, 0.5);\n// => [25, 25, 25, 1]\n*/\nexport function dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  }\n  if (!isArray(a2)) {\n    return a1;\n  }\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\n/**\n* The dot product of PropertyObject(type=color)\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Dot\n* @function dotColor\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} PropertyObject(type=color).\n* @example\nvar colorObject = ......; //PropertyObject(type=color, model=\"rgba\", value=[254, 254, 254, 1]);\ndotColor(\"#000\",  colorObject, 0.5, 0.5);\n// \"#000\" => PropertyObject(type=color, model=\"rgba\", value=[0, 0, 0, 1]);\n// return => PropertyObject(type=color, model=\"rgba\", value=[127, 127, 127, 1]);\n*/\nexport function dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  if (b2 === 0) {\n    return color2;\n  }\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.getOption(\"model\");\n  const model2 = color2.getOption(\"model\");\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n/**\n* The dot product of Objects\n* @memberof Dot\n* @function dotObject\n* @param {PropertyObject} a1 value1\n* @param {PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {PropertyObject} Array with Separator.\n* @example\ndotObject(PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)]),\nPropertyObject([\"9px\", \"solid\", rgba(50, 50, 50, 1)]),\n0.5, 0.5);\n// => PropertyObject([\"5px\", \"solid\", rgba(25, 25, 25, 1)])\n*/\nexport function dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.getOption(\"type\");\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.getOption(\"separator\") || a2.getOption(\"separator\"),\n    prefix: a1.getOption(\"prefix\") || a2.getOption(\"prefix\"),\n    suffix: a1.getOption(\"suffix\") || a2.getOption(\"suffix\"),\n    model: a1.getOption(\"model\") || a2.getOption(\"model\"),\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === \"array\") {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  // split number and unit of the value.\n  const r1 = b1 / (b1 + b2);\n  const r2 = 1 - r1;\n\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = v1.value * r2 + v2.value * r1;\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import { ObjectInterface } from \"../consts\";\n\nexport function hasClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n  return !!element.className.match(new RegExp(`(\\\\s|^)${className}(\\\\s|$)`));\n}\n\nexport function addClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += ` ${className}`;\n  }\n}\n\nexport function removeClass(element: HTMLElement, className: string) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    const reg = new RegExp(`(\\\\s|^)${className}(\\\\s|$)`);\n\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n\nexport function fromCSS(elements: HTMLElement | HTMLElement[] | NodeListOf<HTMLElement>, properties: string[]) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n  let element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n  const cssObject: ObjectInterface<any> = {};\n  const styles = window.getComputedStyle(element) as any;\n  const length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n  return cssObject;\n}\n","import Animator, { StateInterface, EasingType, isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  isUndefined,\n  isObject,\n  isArray,\n  decamelize,\n  toFixed,\n  isFixed,\n} from \"./utils\";\nimport Keyframes from \"./Keyframes\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n  KEYFRAMES, ANIMATION, START_ANIMATION,\n  PREFIX, THRESHOLD, ObjectInterface, NameType,\n  TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, RUNNING, PLAY, FILL_MODE, DIRECTION, ITERATION_COUNT, EASING_NAME, DELAY, PLAY_SPEED, DURATION\n} from \"./consts\";\nimport { addClass, removeClass, hasClass, fromCSS } from \"./utils/css\";\n\nfunction toId(text: string) {\n  return text.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nfunction makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 100000)}`;\n\n    if (!selector) {\n      return id;\n    }\n    const checkElement = document.querySelector(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nfunction makeAnimationProperties(properties: ObjectInterface<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)} : ${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\n\ntype ElementsType = HTMLElement[] | NodeListOf<HTMLElement>;\n/**\n* manage Frame Keyframes and play keyframes.\n* @memberof Scene\n* @extends Scene.Animator\n* @example\nconst item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator {\n  public keyframes: Keyframes;\n  private elements: ElementsType;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst item = new Scene.SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.keyframes = new Keyframes();\n    this.elements = [];\n    this.load(properties, options);\n  }\n  public getDuration() {\n    return Math.max(this.state[DURATION], this.keyframes.getDuration());\n  }\n  public setDuration(duration: number) {\n    if (duration === 0) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      this.keyframes.setDuration(duration, originalDuration);\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  /**\n\t* set the unique indicator of the item.\n\t* @method Scene.SceneItem#setId\n\t* @param {String} [id] - the indicator of the item.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nconst item = new SceneItem();\n\nitem.setId(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public setId(id?: string) {\n    const elements = this.elements;\n    const length = elements.length;\n\n    this.setState({ id: id || makeId(!!length) });\n    const sceneId = toId(this.getId());\n\n    this.options.selector || (this.options.selector = `[data-scene-id=\"${sceneId}\"]`);\n\n    if (!length) {\n      return this;\n    }\n    for (let i = 0; i < length; ++i) {\n      elements[i].setAttribute(\"data-scene-id\", sceneId);\n    }\n    return this;\n  }\n  /**\n\t* Specifies the unique indicator of the item.\n\t* @method Scene.SceneItem#getId\n\t* @return {String} the indicator of the item.\n\t* @example\nconst item = scene.newItem(\"item\");\nconsole.log(item.getId()); // item\n\t*/\n  public getId() {\n    return this.state.id;\n  }\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @method Scene.SceneItem#set\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any[] | number | string | ObjectInterface<any>, ...args: any[]) {\n    if (isObject(time)) {\n      this.load(time);\n      return this;\n    } else if (args[0]) {\n      if (args[0] instanceof SceneItem) {\n        const item: SceneItem = args[0];\n        const delay = item.getDelay();\n        const realTime = this.getUnitTime(time) + delay;\n        const { keys, values, frames } = item.getAllTimes(!!delay || !this.hasFrame(time));\n        const easing = this.getEasingName() !== item.getEasingName() ? item.getEasing() : 0;\n\n        keys.forEach(t => {\n          this.set(realTime + t, frames[values[t]]);\n        });\n        if (easing) {\n          this.set(realTime + keys[0], EASING, easing);\n          this.set(realTime + keys[keys.length - 1], EASING, \"initial\");\n        }\n        return this;\n      } else if (args.length === 1 && isArray(args[0])) {\n        args[0].forEach((item: any) => {\n          this.set(time, item);\n        });\n        return this;\n      }\n    }\n    const frame = this.newFrame(time);\n\n    frame.set(...args);\n    this.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|Scene.PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.update();\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | object) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param {SceneItem | object} item - the scene item or item object\n\t* @return {Scene.SceneItem} An instance itself\n\t*/\n  public prepend(item: SceneItem | object) {\n    if (item instanceof SceneItem) {\n      const delay = item.getDelay();\n      const duration = item.getIterationCount() === INFINITE ? item.getDuration() : item.getActiveDuration();\n      const unshiftTime = duration + delay;\n      const firstFrame = this.keyframes.get(0);\n\n      if (firstFrame) {\n        this.keyframes.remove(0);\n      }\n      this.keyframes.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @method Scene.SceneItem#setSelector\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(selector: boolean | string) {\n    this.options.selector = selector === true ? this.state.id :\n      (selector || `[data-scene-id=\"${this.state.id}\"]`);\n    this.setElement(document.querySelectorAll(this.options.selector));\n    return this;\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n\t* @method Scene.SceneItem#setElement\n\t* @param {Element|Array|string} elements - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(elements: HTMLElement | ElementsType) {\n    if (!elements) {\n      return this;\n    }\n    this.elements = (elements instanceof Element) ? [elements] : elements;\n    this.setId();\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @method Scene.SceneItem#setCSS\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @method Scene.SceneItem#update\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* update property names used in frame.\n\t* @method Scene.SceneItem#updateFrame\n\t* @param {Scene.Frame} [frame] - frame of that time.\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.updateFrame(time, this.get(time));\n\t*/\n  public updateFrame(frame: Frame) {\n    this.keyframes.updateFrame(frame);\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#newFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @method Scene.SceneItem#setFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    this.keyframes.add(this.getUnitTime(time), frame);\n    this.keyframes.update();\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @method Scene.SceneItem#getFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.keyframes.get(this.getUnitTime(time));\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @method Scene.SceneItem#hasFrame\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.keyframes.has(this.getUnitTime(time));\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @method Scene.SceneItem#removeFrame\n\t* @param {Number} time - frame's time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const keyframes = this.keyframes;\n\n    keyframes.remove(time);\n    keyframes.update();\n\n    return this;\n  }\n  /**\n\t* Copy frame of the previous time at the next time.\n\t* @method Scene.SceneItem#copyFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(0) equal getFrame(1)\nitem.copyFrame(0, 1);\n\t*/\n  public copyFrame(fromTime: ObjectInterface<number> | number | string, toTime: number) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.copyFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const copyFrame = frame.clone();\n\n    this.setFrame(toTime, copyFrame);\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n\t* @method Scene.SceneItem#mergeFrame\n\t* @param {number|string|object} fromTime - the previous time\n\t* @param {number|string} toTime - the next time\n\t* @return {Scene.SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(fromTime: ObjectInterface<number> | number | string, toTime: number | string) {\n    if (isObject(fromTime)) {\n      for (const time in fromTime) {\n        this.mergeFrame(time, fromTime[time]);\n      }\n      return this;\n    }\n    const frame = this.getFrame(fromTime);\n\n    if (!frame) {\n      return this;\n    }\n    const toFrame = this.newFrame(toTime);\n\n    toFrame.merge(frame);\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @method Scene.SceneItem#getNowFrame\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Scene.Frame} frame of the current time\n\t* @example\nlet item = new Scene.SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType) {\n    const frame = new Frame();\n    const names = this.keyframes.getNames();\n    const { left, right } = this._getNearTimeIndex(time);\n    const realEasing = this._getEasing(time, left, right, this.getEasing() || easing);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, left, right, properties, realEasing);\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (isArray(properties)) {\n      const length = properties.length;\n\n      for (let i = 0; i < length; ++i) {\n        const time = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(time, properties[i]);\n      }\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\" || time === \"keyframes\") {\n          continue;\n        }\n        const value = properties[time];\n        const realTime = this.getUnitTime(time);\n\n        if (typeof value === \"number\") {\n          this.mergeFrame(value, realTime);\n          continue;\n        }\n        this.set(realTime, value);\n      }\n    }\n    options && this.setOptions(options);\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @method Scene.SceneItem#clone\n\t * @param {AnimatorOptions} [options] animator options\n\t * @return {Scene.SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone(options = {}) {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    item.setOptions(options);\n    this.keyframes.forEach((frame: Frame, time: number) => item.setFrame(time, frame.clone()));\n    return item;\n  }\n  public setOptions(options: StateInterface = {}) {\n    super.setOptions(options);\n    const { id, selector, duration, elements } = options;\n\n    duration && this.setDuration(duration);\n    id && this.setId(id);\n    if (elements) {\n      this.setElement(elements);\n    } else if (selector) {\n      this.setSelector(selector === true ? this.state.id : selector);\n    }\n    return this;\n  }\n  public getAllTimes(isStartZero = true, options: StateInterface = {}) {\n    const times = this.keyframes.times.slice();\n    let length = times.length;\n    const keys: number[] = [];\n    const values: ObjectInterface<number> = {};\n\n    if (!length) {\n      return { keys: [], values: {}, frames: {} };\n    }\n    const frames: ObjectInterface<Frame> = {};\n    const duration = this.getDuration();\n    const direction = options[DIRECTION] || this.state[DIRECTION];\n    const isShuffle = direction === ALTERNATE || direction === ALTERNATE_REVERSE;\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(duration)) && times.push(duration);\n    length = times.length;\n    let iterationCount = options[ITERATION_COUNT] || this.state[ITERATION_COUNT];\n\n    iterationCount = iterationCount !== INFINITE ? iterationCount : 1;\n    const totalDuration = iterationCount * duration;\n\n    for (let i = 0; i < iterationCount; ++i) {\n      const isReverse = isDirectionReverse(i, direction);\n      const start = i * duration;\n\n      for (let j = 0; j < length; ++j) {\n        if (isShuffle && i !== 0 && j === 0) {\n          // pass duplicate\n          continue;\n        }\n        // isStartZero is keytimes[0] is 0 (i === 0 & j === 0)\n        const threshold = j === 0 && (i === 0 ? !isStartZero : !isShuffle) ? THRESHOLD : 0;\n        const keyvalue = toFixed(isReverse ? times[length - 1 - j] : times[j]);\n        const time = toFixed(isReverse ? duration - keyvalue : keyvalue);\n        const keytime = toFixed(start + time + threshold);\n\n        if (totalDuration < keytime) {\n          break;\n        }\n        keys.push(keytime);\n        values[keytime] = keyvalue;\n\n        if (!frames[keyvalue]) {\n          const frame = this.getFrame(keyvalue);\n\n          if (!frame || j === 0 || j === length - 1 || frame.has(\"transform\") || frame.has(\"filter\")) {\n            frames[keyvalue] = this.getNowFrame(keyvalue);\n          } else {\n            frames[keyvalue] = frame;\n          }\n        }\n      }\n    }\n    if (keys[keys.length - 1] < totalDuration) {\n      // last time === totalDuration\n      const isReverse = isDirectionReverse(iterationCount, direction);\n      const keyvalue = toFixed(duration * (isReverse ? 1 - iterationCount % 1 : iterationCount % 1));\n\n      keys.push(totalDuration);\n      values[totalDuration] = keyvalue;\n      !frames[keyvalue] && (frames[keyvalue] = this.getNowFrame(keyvalue));\n    }\n    return { keys, values, frames };\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    const state = this.state;\n    const selector = state.selector || this.options.selector;\n\n    if (!selector) {\n      return \"\";\n    }\n    const id = this._getId();\n    // infinity or zero\n    const isParent = !isUndefined(options[ITERATION_COUNT]);\n    const isZeroDuration = duration === 0;\n    const playSpeed = (options[PLAY_SPEED] || 1);\n    const delay = ((isParent ? options[DELAY] : state[DELAY]) || 0) / playSpeed;\n    const easingName = (!isZeroDuration && options[EASING] && options[EASING_NAME]) || state[EASING_NAME];\n    const iterationCount = (!isZeroDuration && options[ITERATION_COUNT]) || state[ITERATION_COUNT];\n    const fillMode = (options[FILL_MODE] !== \"forwards\" && options[FILL_MODE]) || state[FILL_MODE];\n    const direction = (options[DIRECTION] !== NORMAL && options[DIRECTION]) || state[DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${toId(id)}`,\n      duration: `${duration / playSpeed}s`,\n      timingFunction: easingName,\n    });\n\n    const css = `${selector}.${START_ANIMATION} {\n\t\t\t${cssText}\n\t\t}\n\t\t${this._toKeyframes(duration, isParent)}`;\n\n    return css;\n  }\n  public exportCSS(duration = this.getDuration(), options: StateInterface = {}) {\n    if (!this.elements.length) {\n      return;\n    }\n    const id = this._getId();\n    const styleElement: HTMLElement = document.querySelector(`#${PREFIX}${id}`);\n    const css = this.toCSS(duration, options);\n\n    if (styleElement) {\n      styleElement.innerText = css;\n    } else {\n      document.body.insertAdjacentHTML(\"beforeend\",\n        `<style id=\"${PREFIX}STYLE_${id}\">${css}</style>`);\n    }\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem.playCSS();\nitem.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    if (!ANIMATION || this.getPlayState() === RUNNING) {\n      return this;\n    }\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return this;\n    }\n    if (this.isEnded()) {\n      this.setTime(0);\n    }\n    exportCSS && this.exportCSS();\n\n    const cssText = makeAnimationProperties(properties);\n\n    for (let i = 0; i < length; ++i) {\n      const element = elements[i];\n\n      element.style.cssText += cssText;\n      if (hasClass(element, START_ANIMATION)) {\n        removeClass(element, START_ANIMATION);\n        (el => {\n          requestAnimationFrame(() => {\n            requestAnimationFrame(() => {\n              addClass(el, START_ANIMATION);\n            });\n          });\n        })(element);\n      } else {\n        addClass(element, START_ANIMATION);\n      }\n    }\n\n    this.setState({ playCSS: true });\n    this.setPlayState(RUNNING);\n    this.trigger(PLAY);\n\n    const duration = this.getDuration();\n    const animatedElement = elements[0];\n    const animationend = () => {\n      this.end();\n\n      if (!animatedElement) {\n        return;\n      }\n      animatedElement.removeEventListener(\"animationend\", animationend);\n      animatedElement.removeEventListener(\"animationiteration\", animationiteration);\n    };\n    const animationiteration = ({ elapsedTime }: any) => {\n      const currentTime = elapsedTime;\n      const iterationCount = currentTime / duration;\n\n      this.state.currentTime = currentTime;\n      this.setCurrentIterationCount(iterationCount);\n    };\n    animatedElement.addEventListener(\"animationend\", animationend);\n    animatedElement.addEventListener(\"animationiteration\", animationiteration);\n    return this;\n  }\n  private _getId() {\n    return this.state.id || this.setId().getId();\n  }\n  private _getEasing(time: number, left: number, right: number, easing: EasingType) {\n    if (this.keyframes.hasName(TIMING_FUNCTION)) {\n      const nowEasing = this._getNowValue(time, left, right, [TIMING_FUNCTION], 0, true);\n\n      return typeof nowEasing === \"function\" ? nowEasing : easing;\n    }\n    return easing;\n  }\n  private _toKeyframes(duration = this.getDuration(), isParent: boolean) {\n    const id = this._getId();\n    const state = this.state;\n    const playSpeed = state[PLAY_SPEED];\n    const iterationCount = state[ITERATION_COUNT];\n    const delay = isParent ? state[DELAY] : 0;\n    const direction = isParent ? state[DIRECTION] : NORMAL;\n    const { keys, values, frames } = this.getAllTimes(true, {\n      duration,\n      delay,\n      direction,\n      iterationCount: isParent && iterationCount !== INFINITE ? iterationCount : 1,\n      isCSS: true,\n    });\n    const length = keys.length;\n    const css: ObjectInterface<string> = {};\n    const keyframes: string[] = [];\n\n    for (const time in frames) {\n      css[time] = frames[time].toCSS();\n    }\n    if (!keys.length) {\n      return \"\";\n    }\n    if (delay) {\n      keyframes.push(`0%{${frames[0]}}`);\n      if (direction === REVERSE || direction === ALTERNATE_REVERSE) {\n        keyframes.push(`${delay / playSpeed / duration * 100 - 0.00001}%{${css[0]}}`);\n      }\n    }\n    keys.forEach(time => {\n      keyframes.push(`${(delay + time) / playSpeed / duration * 100}%{${css[values[time]]}}`);\n    });\n    const lastTime = keys[length - 1];\n\n    if ((delay + lastTime) / playSpeed < duration) {\n      // not 100%\n      keyframes.push(`100%{${css[values[lastTime]]}`);\n    }\n    return `@${KEYFRAMES} ${PREFIX}KEYFRAMES_${toId(id)}{\n\t\t\t${keyframes.join(\"\\n\")}\n\t\t}`;\n  }\n  private _getNowValue(\n    time: number,\n    left: number,\n    right: number,\n    properties: string[],\n    easing: EasingType = this.getEasing(),\n    usePrevValue: boolean = isFixed(properties),\n  ) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    let prevTime;\n    let nextTime;\n    let prevFrame;\n    let nextFrame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = keyframes.get(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n  private _getNearTimeIndex(time: number) {\n    const keyframes = this.keyframes;\n    const times = keyframes.times;\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (times[i] === time) {\n        return { left: i, right: i };\n      } else if (times[i] > time) {\n        return { left: i === 0 ? 0 : i - 1, right: i };\n      }\n    }\n    return { left: length - 1, right: length - 1 };\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event Scene.SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Scene.Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    const elements = this.elements;\n    const length = elements.length;\n\n    if (!length) {\n      return frame;\n    }\n    const attributes = frame.get(\"attribute\");\n\n    if (attributes) {\n      for (const name in (attributes as any)) {\n        for (let i = 0; i < length; ++i) {\n          elements[i].setAttribute(name, attributes[name]);\n        }\n      }\n    }\n    const cssText = frame.toCSS();\n\n    if (this.state.cssText !== cssText) {\n      this.state.cssText = cssText;\n\n      for (let i = 0; i < length; ++i) {\n        elements[i].style.cssText += cssText;\n      }\n      return frame;\n    }\n  }\n}\n\nexport default SceneItem;\n","import Animator, { StateInterface, EasingType } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ANIMATION, ObjectInterface, RUNNING, ENDED, PLAY, ITERATION, ANIMATE } from \"./consts\";\nimport Frame from \"./Frame\";\n\n/**\n* manage sceneItems and play Scene.\n* @extends Scene.Animator\n*/\nclass Scene extends Animator {\n\n  public items: ObjectInterface<Scene | SceneItem>;\n  /**\n\t* @param {Object} [properties] - properties\n\t* @param {AnimatorOptions} [options] - options\n\t* @example\n\tconst scene = new Scene({\n\t\titem1: {\n\t\t\t0: {\n\t\t\t\tdisplay: \"none\",\n\t\t\t},\n\t\t\t1: {\n\t\t\t\tdisplay: \"block\",\n\t\t\t\topacity: 0,\n\t\t\t},\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t},\n\t\titem2: {\n\t\t\t2: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t}\n\t});\n\t */\n  constructor(properties?: ObjectInterface<any>, options?: ObjectInterface<any>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public setId(id: string = `scene${Math.floor(Math.random() * 100000)}`) {\n    this.state.id = id;\n    return this;\n  }\n  public getId() {\n    return this.state.id;\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  /**\n\t* get item in scene by name\n\t* @method Scene#getItem\n\t* @param {string} name - item's name\n\t* @return {Scene.SceneItem} item\n\t* @example\nconst item = scene.getItem(\"item1\")\n\t*/\n  public getItem(name: string) {\n    return this.items[name];\n  }\n  /**\n\t* create item in scene\n\t* @method Scene#newItem\n\t* @param {String} name - name of item to create\n\t* @param {StateOptions} options - The option object of SceneItem\n\t* @return {Sceme.SceneItem} Newly created item\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public newItem(name: string, options = {}) {\n    if (name in this.items) {\n      return this.items[name];\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n\t* add a sceneItem to the scene\n\t* @param {String} name - name of item to create\n\t* @param {Scene.SceneItem} item - sceneItem\n\t* @example\nconst item = scene.newItem(\"item1\")\n\t*/\n  public setItem(name: string, item?: Scene | SceneItem) {\n    if (item instanceof Animator) {\n      item.setId(name);\n    }\n    this.items[name] = item;\n    return this;\n  }\n  public animate(time: number, parentEasing?: EasingType) {\n    super.setTime(time, true);\n    return this._animate(parentEasing);\n  }\n  public setTime(time: number | string, isNumber?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isNumber);\n    this._animate(parentEasing);\n    return this;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param {Function} func Function to execute for each element, taking three arguments\n\t * @param {Scene | Scene.SceneItem} [func.item] The value of the item being processed in the scene.\n\t * @param {string} [func.name] The name of the item being processed in the scene.\n\t * @param {object} [func.items] The object that forEach() is being applied to.\n\t * @return {Scene} An instance itself\n\t */\n  public forEach(func: (item?: Scene | SceneItem, name?: string, items?: ObjectInterface<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  /**\n\t * Export the CSS of the items to the style.\n\t * @return {Scene} An instance itself\n\t */\n  public exportCSS(duration: number = this.getDuration(), state?: StateInterface) {\n    const items = this.items;\n    let totalDuration = duration;\n\n    if (!totalDuration || !isFinite(totalDuration)) {\n      totalDuration = 0;\n    }\n    for (const id in items) {\n      const item = items[id];\n\n      item.exportCSS(totalDuration, this.state);\n    }\n    return this;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(item.getId() || item.setId().getId(), item);\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @return {Scene} An instance itself\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nscene.playCSS();\nscene.playCSS(false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(exportCSS = true, properties = {}) {\n    if (!ANIMATION || this.getPlayState() === RUNNING) {\n      return this;\n    }\n    exportCSS && this.exportCSS();\n\n    const items = this.items;\n    let animationItem: Scene | SceneItem;\n\n    for (const id in items) {\n      const item = items[id];\n\n      item.playCSS(false, properties);\n      if (item.getState(\"playCSS\")) {\n        animationItem = item;\n      }\n    }\n    if (!animationItem) {\n      return this;\n    }\n    const animationiteration = ({ currentTime, iterationCount }: { currentTime: number, iterationCount: number }) => {\n      this.state.currentTime = currentTime;\n      this.setCurrentIterationCount(iterationCount);\n    };\n    const animationend = () => {\n      this.end();\n      this.setState({ playCSS: false });\n      animationItem.off(ENDED, animationend);\n      animationItem.off(ITERATION, animationiteration);\n    };\n    animationItem.on(ENDED, animationend);\n    animationItem.on(ITERATION, animationiteration);\n    this.setState({ playCSS: true });\n    this.setPlayState(RUNNING);\n    this.trigger(PLAY);\n    return this;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options.selector;\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setSelector(_: string | boolean) {\n    const isSelector = this.options.selector;\n\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  private _animate(parentEasing?: EasingType) {\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n    const frames: ObjectInterface<ObjectInterface<any> | Frame> = {};\n\n    for (const id in items) {\n      const item = items[id];\n\n      frames[id] = item.animate(Math.max(iterationTime * item.getPlaySpeed() - item.getDelay(), 0), easing);\n    }\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frames frame of that time.\n\t\t */\n    this.trigger(ANIMATE, {\n      currentTime: this.getTime(),\n      time: iterationTime,\n      frames,\n    });\n    return frames;\n  }\n}\n\nexport default Scene;\n","\nimport { StateInterface } from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { ObjectInterface } from \"./consts\";\n\n/**\n * @namespace presets\n */\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func set\n * @param {string | string[]} property - property to set effect\n * @param {any[]} values - values of 100%\n * @param {AnimatorOptions} [options]\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function set(property: string | string[], values: any[], options: StateInterface) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @func zoomIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @func zoomOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: StateInterface) {\n  return set([\"transform\", \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @func wipeIn\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @func wipeOut\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: StateInterface) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @func transition\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: ObjectInterface<any>, to: ObjectInterface<any>, duration?: number, time: number }) {\n  item1.set({\n    [time]: from,\n    [time + duration]: to,\n  });\n  item2.set({\n    0: to,\n    [duration]: from,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @func fadeIn\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @func fadeOut\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: StateInterface) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @func blink\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: StateInterface) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport Frame from \"./Frame\";\nimport Keyframes from \"./Keyframes\";\nimport PropertyObject from \"./PropertyObject\";\nimport Animator from \"./Animator\";\nimport * as _presets from \"./presets\";\n\n/**\n* version info\n* @name Scene.VERSION\n* @memberof Scene\n* @static\n* @type {string}\n* @example\n* Scene.VERSION // #__VERSION__#\n*/\nexport const VERSION = \"#__VERSION__#\";\nexport { SceneItem, Frame, Animator, Keyframes, PropertyObject };\nexport { bezier, EASE_IN_OUT, EASE_IN, EASE_OUT, EASE, LINEAR, steps, STEP_START, STEP_END } from \"./easing\";\nexport { set, transition, wipeIn, wipeOut, fadeIn, fadeOut, blink, zoomIn, zoomOut} from \"./presets\";\nexport { OPTIONS, EVENTS } from \"./consts\";\nexport { setRole, setAlias } from \"./utils\";\nexport { Scene as default };\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","animation-timing-function","contents","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","ITERATION","RGBA","START_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","FUNCTION","PROPERTY","OPTIONS","EVENTS","prefixes","checkProperties","property","styles","document","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","value","options","this","prefix","suffix","model","type","separator","setOptions","init","Object","assign","__proto","index","PropertyObject","map","v","clone","join","toValue","func","forEach","split","getType","isArray","toFixed","num","Math","round","isInProperties","roles","args","isCheckTrue","role","isRole","isUndefined","isObject","Array","isString","splitUnit","text","matches","exec","unit","NaN","parseFloat","events","callback","on","_this","push","callbacks","indexOf","splice","_i","data","event","target","currentTarget","apply","cubic","y1","y2","t","t2","bezier","x1","x2","x","dx","abs","solveFromX","max","min","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","lastTime","camelize","str","all","letter","toUpperCase","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","currTime","Date","now","timeToCall","id","setTimeout","isDirectionReverse","iterationCount","direction","setters","getters","_super","state","delay","fillMode","playSpeed","currentTime","iterationTime","currentIterationCount","tickTime","prevTime","playState","duration","tslib_1.__extends","getter","setter","parent","curveArray","setState","setDuration","setEasing","Infinity","getActiveDuration","getDuration","getTime","animator","play","isEnded","setTickTime","tick","trigger","pause","setTime","isTick","activeDuration","getUnitTime","calculateIterationTime","isDelay","getIterationTime","getIterationCount","object","_a","passIterationCount","currentIterationTime","setIterationTime","setCurrentIterationCount","isReverse","end","Animator","constructor","prototype","EventTrigger","COLOR_MODELS","hexToRGB","hex","h","charAt","substring","r","parseInt","g","b","a","isNaN","arrayToColorObject","arr","toColorObject","colorObject","stringToColorObject","colorArray","colorModel","getOption","toLowerCase","hsl","s","l","rgb","c","m","result","hslToRGB","stringToBracketObject","values","obj","toPropertyObject","arrayToPropertyObject","Error","match","trim","toInnerProperties","arrObj","isPropertyObject","merge","to","from","getValue","slice","names","properties","set","raw","params","_set","toObject","size","get","Frame","splitStyle","frame","frameProperties","cssObject","toCSSObject","cssArray","times","items","getNames","stack","concat","pop","updateFrame","originalDuration","ratio","time2","addTime","removeTime","pushIndex","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","dotColor","type1","type2","isFunction1","isFunction2","r1","r2","v2","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","toId","makeAnimationProperties","letter2","keyframes","Keyframes","elements","load","selector","random","querySelector","makeId","sceneId","getId","setAttribute","SceneItem","item","getDelay","realTime_1","keys","values_1","frames_1","getEasingName","getEasing","newFrame","getFrame","update","unshiftTime","firstFrame","unshift","prepend","setElement","querySelectorAll","Element","setId","getComputedStyle","fromCSS","parentEasing","_animate","isNumber","setFrame","has","fromTime","toTime","copyFrame","mergeFrame","left","right","realEasing","_getEasing","_getNowValue","realTime","setSelector","isStartZero","frames","isShuffle","totalDuration","start","j","threshold","keyvalue","keytime","getNowFrame","_getId","isParent","isZeroDuration","cssText","timingFunction","_toKeyframes","styleElement","css","toCSS","innerText","insertAdjacentHTML","exportCSS","getPlayState","contains","el","playCSS","setPlayState","animatedElement","animationend","removeEventListener","animationiteration","addEventListener","hasName","nowEasing","usePrevValue","nextTime","prevFrame","nextFrame","prevValue","nextValue","dotValue","attributes","getTotalDuration","getPlaySpeed","sceneDuration","isFinite","setDelay","setItem","animationItem","getState","off","isSelector","Scene","newItem","_","animate","item1","item2","_b","_c","_d","0","isProperty","isFixedProperty","fixed","alias","others"],"mappings":"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"}