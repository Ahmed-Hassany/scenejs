{"version":3,"file":"scene.min.js","sources":["../src/easing.ts","../src/consts.ts","../node_modules/@daybrush/utils/dist/utils.esm.js","../src/EventTrigger.ts","../src/PropertyObject.ts","../src/utils.ts","../src/utils/property.ts","../src/Animator.ts","../src/Frame.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.umd.ts"],"sourcesContent":["import { EasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType, EasingFunction } from \"./types\";\nimport { EASE, EASE_IN, EASE_IN_OUT, LINEAR, EASE_OUT, STEP_START, STEP_END } from \"./easing\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\nexport const EASINGS = {\n    \"linear\": LINEAR,\n    \"ease\": EASE,\n    \"ease-in\": EASE_IN,\n    \"ease-out\": EASE_OUT,\n    \"ease-in-out\": EASE_IN_OUT,\n    \"step-start\": STEP_START,\n    \"step-end\": STEP_END,\n};\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","/*\nCopyright (c) 2018 Daybrush\n@name: @daybrush/utils\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 0.7.0-rc\n*/\n/**\n* @namespace\n* @name Consts\n*/\n\n/**\n* get string \"rgb\"\n* @memberof Color\n* @example\nimport {RGB} from \"@daybrush/utils\";\n\nconsole.log(RGB); // \"rgb\"\n*/\nvar RGB = \"rgb\";\n/**\n* get string \"rgba\"\n* @memberof Color\n* @example\nimport {RGBA} from \"@daybrush/utils\";\n\nconsole.log(RGBA); // \"rgba\"\n*/\n\nvar RGBA = \"rgba\";\n/**\n* get string \"hsl\"\n* @memberof Color\n* @example\nimport {HSL} from \"@daybrush/utils\";\n\nconsole.log(HSL); // \"hsl\"\n*/\n\nvar HSL = \"hsl\";\n/**\n* get string \"hsla\"\n* @memberof Color\n* @example\nimport {HSLA} from \"@daybrush/utils\";\n\nconsole.log(HSLA); // \"hsla\"\n*/\n\nvar HSLA = \"hsla\";\n/**\n* gets an array of color models.\n* @memberof Color\n* @example\nimport {COLOR_MODELS} from \"@daybrush/utils\";\n\nconsole.log(COLOR_MODELS); // [\"rgb\", \"rgba\", \"hsl\", \"hsla\"];\n*/\n\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* get string \"function\"\n* @memberof Consts\n* @example\nimport {FUNCTION} from \"@daybrush/utils\";\n\nconsole.log(FUNCTION); // \"function\"\n*/\n\nvar FUNCTION = \"function\";\n/**\n* get string \"property\"\n* @memberof Consts\n* @example\nimport {PROPERTY} from \"@daybrush/utils\";\n\nconsole.log(PROPERTY); // \"property\"\n*/\n\nvar PROPERTY = \"property\";\n/**\n* get string \"array\"\n* @memberof Consts\n* @example\nimport {ARRAY} from \"@daybrush/utils\";\n\nconsole.log(ARRAY); // \"array\"\n*/\n\nvar ARRAY = \"array\";\n/**\n* get string \"object\"\n* @memberof Consts\n* @example\nimport {OBJECT} from \"@daybrush/utils\";\n\nconsole.log(OBJECT); // \"object\"\n*/\n\nvar OBJECT = \"object\";\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\n\nvar STRING = \"string\";\n/**\n* get string \"number\"\n* @memberof Consts\n* @example\nimport {NUMBER} from \"@daybrush/utils\";\n\nconsole.log(NUMBER); // \"number\"\n*/\n\nvar NUMBER = \"number\";\n/**\n* get string \"undefined\"\n* @memberof Consts\n* @example\nimport {UNDEFINED} from \"@daybrush/utils\";\n\nconsole.log(UNDEFINED); // \"undefined\"\n*/\n\nvar UNDEFINED = \"undefined\";\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar IS_WINDOW = typeof window !== UNDEFINED;\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @name document\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar doc = typeof document !== UNDEFINED && document;\nvar prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n/**\n * @namespace CrossBrowser\n */\n\n/**\n* Get a CSS property with a vendor prefix that supports cross browser.\n* @function\n* @param {string} property - A CSS property\n* @return {string} CSS property with cross-browser vendor prefix\n* @memberof CrossBrowser\n* @example\nimport {getCrossBrowserProperty} from \"@daybrush/utils\";\n\nconsole.log(getCrossBrowserProperty(\"transform\")); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\nconsole.log(getCrossBrowserProperty(\"filter\")); // \"filter\", \"-webkit-filter\"\n*/\n\nvar getCrossBrowserProperty =\n/*#__PURE__*/\nfunction (property) {\n  if (!doc) {\n    return \"\";\n  }\n\n  var styles = (doc.body || doc.documentElement).style;\n  var length = prefixes.length;\n\n  if (typeof styles[property] !== UNDEFINED) {\n    return property;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n\n    if (typeof styles[name] !== UNDEFINED) {\n      return name;\n    }\n  }\n\n  return \"\";\n};\n/**\n* get string \"transfrom\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {TRANSFORM} from \"@daybrush/utils\";\n\nconsole.log(TRANSFORM); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\n*/\n\nvar TRANSFORM =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"transform\");\n/**\n* get string \"filter\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {FILTER} from \"@daybrush/utils\";\n\nconsole.log(FILTER); // \"filter\", \"-ms-filter\", \"-webkit-filter\"\n*/\n\nvar FILTER =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"filter\");\n/**\n* get string \"animation\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {ANIMATION} from \"@daybrush/utils\";\n\nconsole.log(ANIMATION); // \"animation\", \"-ms-animation\", \"-webkit-animation\"\n*/\n\nvar ANIMATION =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"animation\");\n/**\n* get string \"keyframes\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {KEYFRAMES} from \"@daybrush/utils\";\n\nconsole.log(KEYFRAMES); // \"keyframes\", \"-ms-keyframes\", \"-webkit-keyframes\"\n*/\n\nvar KEYFRAMES =\n/*#__PURE__*/\nANIMATION.replace(\"animation\", \"keyframes\");\n\n/**\n* @namespace\n* @name Utils\n*/\n\n/**\n* Check the type that the value is undefined.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isUndefined} from \"@daybrush/utils\";\n\nconsole.log(isUndefined(undefined)); // true\nconsole.log(isUndefined(\"\")); // false\nconsole.log(isUndefined(1)); // false\nconsole.log(isUndefined(null)); // false\n*/\n\nfunction isUndefined(value) {\n  return typeof value === UNDEFINED;\n}\n/**\n* Check the type that the value is object.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isObject} from \"@daybrush/utils\";\n\nconsole.log(isObject({})); // true\nconsole.log(isObject(undefined)); // false\nconsole.log(isObject(\"\")); // false\nconsole.log(isObject(null)); // false\n*/\n\nfunction isObject(value) {\n  return value && typeof value === OBJECT;\n}\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\n\nfunction isString(value) {\n  return typeof value === STRING;\n}\n/**\n* Check the type that the value is function.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isFunction} from \"@daybrush/utils\";\n\nconsole.log(isFunction(function a() {})); // true\nconsole.log(isFunction(() => {})); // true\nconsole.log(isFunction(\"1234\")); // false\nconsole.log(isFunction(1)); // false\nconsole.log(isFunction(null)); // false\n*/\n\nfunction isFunction(value) {\n  return typeof value === FUNCTION;\n}\n/**\n* divide text by space.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {spliceSpace} from \"@daybrush/utils\";\n\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitSpace(text) {\n  // divide comma(,)\n  var matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {splitComma} from \"@daybrush/utils\";\n\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  var matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n  return matches ? matches.map(function (str) {\n    return str.trim();\n  }) : [];\n}\n/**\n* divide text by bracket \"(\", \")\".\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitBracket} from \"@daybrush/utils\";\n\nconsole.log(splitBracket(\"a(1, 2)\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"\"}\nconsole.log(splitBracket(\"a(1, 2)b\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"b\"}\n*/\n\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\n/**\n* divide text by number and unit.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {} divided texts\n* @example\nimport {splitUnit} from \"@daybrush/utils\";\n\nconsole.log(splitUnit(\"10px\"));\n// {prefix: \"\", value: 10, unit: \"px\"}\nconsole.log(splitUnit(\"-10px\"));\n// {prefix: \"\", value: -10, unit: \"px\"}\nconsole.log(splitUnit(\"a10%\"));\n// {prefix: \"a\", value: 10, unit: \"%\"}\n*/\n\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\n/**\n* transform strings to camel-case\n* @memberof Utils\n* @param {String} text - string\n* @return {String} camel-case string\n* @example\nimport {camelize} from \"@daybrush/utils\";\n\nconsole.log(camelize(\"transform-origin\")); // transformOrigin\nconsole.log(camelize(\"abcd_efg\")); // abcdEfg\nconsole.log(camelize(\"abcd efg\")); // abcdEfg\n*/\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n* transform a camelized string into a lowercased string.\n* @memberof Utils\n* @param {string} text - a camel-cased string\n* @param {string} [separator=\"-\"] - a separator\n* @return {string}  a lowercased string\n* @example\nimport {decamelize} from \"@daybrush/utils\";\n\nconsole.log(decamelize(\"transformOrigin\")); // transform-origin\nconsole.log(decamelize(\"abcdEfg\", \"_\")); // abcd_efg\n*/\n\nfunction decamelize(str, separator) {\n  if (separator === void 0) {\n    separator = \"-\";\n  }\n\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return \"\" + letter + separator + letter2.toLowerCase();\n  });\n}\n/**\n* transforms something in an array into an array.\n* @memberof Utils\n* @param - Array form\n* @return an array\n* @example\nimport {toArray} from \"@daybrush/utils\";\n\nconst arr1 = toArray(document.querySelectorAll(\".a\")); // Element[]\nconst arr2 = toArray(document.querySelectorAll<HTMLElement>(\".a\")); // HTMLElement[]\n*/\n\nfunction toArray(value) {\n  return [].slice.call(value);\n}\n/**\n* Date.now() method\n* @memberof CrossBrowser\n* @return {number} milliseconds\n* @example\nimport {now} from \"@daybrush/utils\";\n\nconsole.log(now()); // 12121324241(milliseconds)\n*/\n\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\n/**\n* window.requestAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {FrameRequestCallback} callback - The function to call when it's time to update your animation for the next repaint.\n* @return {number} id\n* @example\nimport {requestAnimationFrame} from \"@daybrush/utils\";\n\nrequestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n*/\n\nvar requestAnimationFrame =\n/*#__PURE__*/\nfunction () {\n  var firstTime = now();\n  var raf = IS_WINDOW && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame);\n  return raf ? raf.bind(window) : function (callback) {\n    var currTime = now();\n    var id = window.setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n\n/**\n* @namespace\n* @name Color\n*/\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} hex color\n* @example\nimport {cutHex} from \"@daybrush/utils\";\n\nconsole.log(cutHex(\"#000000\")) // \"000000\"\n*/\n\nfunction cutHex(hex) {\n  return hex.replace(\"#\", \"\");\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} rgb color\n* @example\nimport {hexToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hexToRGBA(\"#00000005\"));\n// [0, 0, 0, 1]\nconsole.log(hexToRGBA(\"#201045\"));\n// [32, 16, 69, 1]\n*/\n\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n\n  return [r, g, b, a];\n}\n/**\n* convert 3(or 4)-digit hex color to 6(or 8)-digit hex color.\n* @memberof Color\n* @param {} hex - 3(or 4)-digit hex color\n* @return {} 6(or 8)-digit hex color\n* @example\nimport {toFullHex} from \"@daybrush/utils\";\n\nconsole.log(toFullHex(\"#123\")); // \"#112233\"\nconsole.log(toFullHex(\"#123a\")); // \"#112233aa\"\n*/\n\nfunction toFullHex(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var a = h.charAt(4);\n  var arr = [\"#\", r, r, g, g, b, b, a, a];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgba color.\n* @memberof Color\n* @param {} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {} rgba color\n* @example\nimport {hslToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hslToRGBA([150, 0.5, 0.4]));\n// [51, 153, 102, 1]\n*/\n\nfunction hslToRGBA(hsl) {\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n\n  var result = [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), hsl.length > 3 ? hsl[3] : 1];\n  return result;\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {} - 3-hex(#000), 4-hex(#0000) 6-hex(#000000), 8-hex(#00000000) or RGB(A), or HSL(A)\n* @return {} rgba color\n* @example\nimport {stringToRGBA} from \"@daybrush/utils\";\n\nconsole.log(stringToRGBA(\"#000000\")); // [0, 0, 0, 1]\nconsole.log(stringToRGBA(\"rgb(100, 100, 100)\")); // [100, 100, 100, 1]\nconsole.log(stringToRGBA(\"hsl(150, 0.5, 0.4)\")); // [51, 153, 102, 1]\n*/\n\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4 || color.length === 5) {\n      return hexToRGBA(toFullHex(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n        prefix = _a.prefix,\n        value = _a.value;\n\n    if (!prefix || !value) {\n      return;\n    }\n\n    var arr = splitComma(value);\n    var colorArr = [];\n    var length = arr.length;\n\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n\n        return colorArr;\n\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        } // hsl, hsla to rgba\n\n\n        return hslToRGBA(colorArr);\n    }\n  }\n\n  return;\n}\n\n/**\n * Returns all element descendants of node that\n * match selectors.\n */\n\n/**\n * Checks if the specified class value exists in the element's class attribute.\n * @memberof DOM\n * @param - A DOMString containing one or more selectors to match\n * @param - If multi is true, a DOMString containing one or more selectors to match against.\n * @example\nimport {$} from \"@daybrush/utils\";\n\nconsole.log($(\"div\")); // div element\nconsole.log($(\"div\", true)); // [div, div] elements\n*/\n\nfunction $(selectors, multi) {\n  return multi ? doc.querySelectorAll(selectors) : doc.querySelector(selectors);\n}\n/**\n* Checks if the specified class value exists in the element's class attribute.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to search\n* @return {boolean} return false if the class is not found.\n* @example\nimport {hasClass} from \"@daybrush/utils\";\n\nconsole.log(hasClass(element, \"start\")); // true or false\n*/\n\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\n/**\n* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to add\n* @example\nimport {addClass} from \"@daybrush/utils\";\n\naddClass(element, \"start\");\n*/\n\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\n/**\n* Removes the specified class value.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to remove\n* @example\nimport {removeClass} from \"@daybrush/utils\";\n\nremoveClass(element, \"start\");\n*/\n\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n/**\n* Gets the CSS properties from the element.\n* @memberof DOM\n* @param elements - elements\n* @param properites - the CSS properties\n* @return returns CSS properties and values.\n* @example\nimport {fromCSS} from \"@daybrush/utils\";\n\nconsole.log(fromCSS(element, [\"left\", \"opacity\", \"top\"])); // {\"left\": \"10px\", \"opacity\": 1, \"top\": \"10px\"}\n*/\n\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n\n  var element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n\n  var cssObject = {};\n  var styles = window.getComputedStyle(element);\n  var length = properties.length;\n\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n\n  return cssObject;\n}\n/**\n* Sets up a function that will be called whenever the specified event is delivered to the target\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs\n* @param - An options object that specifies characteristics about the event listener. The available options are:\n* @example\nimport {addEvent} from \"@daybrush/utils\";\n\naddEvent(el, \"click\", e => {\n  console.log(e);\n});\n*/\n\nfunction addEvent(el, type, listener, options) {\n  el.addEventListener(type, listener, options);\n}\n/**\n* removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The EventListener function of the event handler to remove from the event target.\n* @example\nimport {addEvent, removeEvent} from \"@daybrush/utils\";\nconst listener = e => {\n  console.log(e);\n};\naddEvent(el, \"click\", listener);\nremoveEvent(el, \"click\", listener);\n*/\n\nfunction removeEvent(el, type, listener) {\n  el.removeEventListener(type, listener);\n}\n\nexport { RGB, RGBA, HSL, HSLA, COLOR_MODELS, FUNCTION, PROPERTY, ARRAY, OBJECT, STRING, NUMBER, UNDEFINED, IS_WINDOW, doc as document, getCrossBrowserProperty, TRANSFORM, FILTER, ANIMATION, KEYFRAMES, cutHex, hexToRGBA, toFullHex, hslToRGBA, stringToRGBA, isUndefined, isObject, isArray, isString, isFunction, splitSpace, splitComma, splitBracket, splitUnit, camelize, decamelize, toArray, now, requestAnimationFrame, $, hasClass, addClass, removeClass, fromCSS, addEvent, removeEvent };\n//# sourceMappingURL=utils.esm.js.map\n","import { isObject, isArray, toArray } from \"@daybrush/utils\";\nimport { CallbackType, EventParameter } from \"./types\";\n\n/**\n* attach and trigger event handlers.\n*/\nclass EventTrigger {\n    public events: { [name: string]: CallbackType[] };\n    /**\n      * @example\n  const et = new Scene.EventTrigger();\n  const scene = new Scene();\n\n  scene.on(\"call\", e => {\n      console.log(e.param);\n  });\n  et.on(\"call\", e => {\n      console.log(e.param);\n  });\n  scene.trigger(\"call\", {param: 1});\n  et.trigger(\"call\", {param: 1});\n       */\n    constructor() {\n        this.events = {};\n    }\n    public _on(name: string | EventParameter, callback?: CallbackType | CallbackType[], once?: boolean) {\n        const events = this.events;\n\n        if (isObject(name)) {\n            for (const n in name) {\n                this._on(n, name[n], once);\n            }\n            return;\n        }\n        if (!(name in events)) {\n            events[name] = [];\n        }\n        if (!callback) {\n            return;\n        }\n        if (isArray(callback)) {\n            callback.forEach(func => this._on(name, func, once));\n            return;\n        }\n        events[name].push(once ? function callback2(...args) {\n            callback(...args);\n            this.off(name, callback2);\n        } : callback);\n    }\n    /**\n      * Attach an event handler function for one or more events to target\n      * @param - event's name\n      * @param - function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function() {\n      console.log(\"animate\");\n  });\n\n  target.trigger(\"animate\");\n\n    */\n    public on(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback);\n        return this;\n    }\n    /**\n      * Dettach an event handler function for one or more events to target\n      * @param - event's name\n      * @param -  function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  const callback = function() {\n      console.log(\"animate\");\n  };\n  target.on(\"animate\", callback);\n\n  target.off(\"animate\", callback);\n  target.off(\"animate\");\n\n      */\n    public off(name?: string, callback?: CallbackType) {\n        if (!name) {\n            this.events = {};\n        } else if (!callback) {\n            this.events[name] = [];\n        } else {\n            const callbacks = this.events[name];\n\n            if (!callbacks) {\n                return this;\n            }\n            const index = callbacks.indexOf(callback);\n\n            if (index !== -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n        return this;\n    }\n    /**\n      * execute event handler\n      * @param - event's name\n      * @param - event handler's additional parameter\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function(a1, a2) {\n      console.log(\"animate\", a1, a2);\n  });\n\n  target.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n      */\n    public trigger(name: string, ...data: any[]) {\n        const events = this.events;\n\n        if (!(name in events)) {\n            return this;\n        }\n\n        const args = data || [];\n\n        !args[0] && (args[0] = {});\n        const event = events[name];\n        const target = args[0];\n\n        target.type = name;\n        target.currentTarget = this;\n        !target.target && (target.target = this);\n        toArray(events[name]).forEach(callback => {\n            callback.apply(this, data);\n        });\n\n        return this;\n    }\n    public once(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback, true);\n        return this;\n    }\n}\nexport default EventTrigger;\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n    public value: any[];\n    public prefix: string = \"\";\n    public suffix: string = \"\";\n    public model: string = \"\";\n    public type: string = \"\";\n    public separator: string = \",\";\n\n    /**\n      * @param - This value is in the array format.\n      * @param - options\n      * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n       */\n    constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n        options && this.setOptions(options);\n        this.value = isString(value) ? value.split(this.separator) : value;\n    }\n    public setOptions(newOptions: Partial<PropertyObjectState>) {\n        for (const name in newOptions) {\n            this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n        }\n        return this;\n    }\n    /**\n      * the number of values.\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.length);\n  // 3\n       */\n    public size() {\n        return this.value.length;\n    }\n    /**\n      * retrieve one of values at the index\n      * @param {Number} index - index\n      * @return {Object} one of values at the index\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.get(0));\n  // 1\n       */\n    public get(index: number) {\n        return this.value[index];\n    }\n    /**\n      * Set the value at that index\n      * @param {Number} index - index\n      * @param {Object} value - text, a number, object to set\n      * @return {PropertyObject} An instance itself\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n       */\n    public set(index: number, value: any) {\n        this.value[index] = value;\n        return this;\n    }\n    /**\n      * create a copy of an instance itself.\n      * @return {PropertyObject} clone\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n       */\n    public clone(): PropertyObject {\n        const {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        } = this;\n        const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n        return new PropertyObject(arr, {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        });\n    }\n    /**\n      * Make Property Object to String\n      * @return {String} Make Property Object to String\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n      */\n    public toValue(): string {\n        return this.prefix + this.join() + this.suffix;\n    }\n    /**\n      * Make Property Object's array to String\n      * @return {String} Join the elements of an array into a string\n      * @example\n      //rgba(100, 100, 100, 0.5)\n      var obj4 = new PropertyObject([100,100,100,0.5], {\n          \"separator\" : \",\",\n          \"prefix\" : \"rgba(\",\n          \"suffix\" : \")\"\n      });\n      obj4.join();  // =>   \"100,100,100,0.5\"\n       */\n    public join() {\n        return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.separator);\n    }\n    /**\n      * executes a provided function once per array element.\n      * @param {Function} callback - Function to execute for each element, taking three arguments\n      * @param {All} [callback.currentValue] The current element being processed in the array.\n      * @param {Number} [callback.index] The index of the current element being processed in the array.\n      * @param {Array} [callback.array] the array.\n      * @return {PropertyObject} An instance itself\n      * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n\n  obj4.forEach(t => {\n      console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n      */\n    public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n        this.value.forEach(func);\n        return this;\n    }\n}\nexport default PropertyObject;\n","import {\n    ROLES, MAXIMUM, FIXED, ALIAS,\n    PAUSED, RUNNING, PLAY, ENDED, PREFIX, PLAY_CSS, CURRENT_TIME, START_ANIMATION\n} from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n    isArray, ANIMATION, ARRAY, OBJECT,\n    PROPERTY, STRING, NUMBER, IS_WINDOW, IObject, $, document, isObject, addEvent, removeEvent,\n} from \"@daybrush/utils\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n    return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n    ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n    const length = names.length;\n    let roles: any = ROLES;\n    let fixed: any = FIXED;\n\n    for (let i = 0; i < length - 1; ++i) {\n        !roles[names[i]] && (roles[names[i]] = {});\n        roles = roles[names[i]];\n        if (isFixedProperty) {\n            !fixed[names[i]] && (fixed[names[i]] = {});\n            fixed = fixed[names[i]];\n        }\n    }\n    isFixedProperty && (fixed[names[length - 1]] = true);\n    roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n    const type = typeof value;\n\n    if (type === OBJECT) {\n        if (isArray(value)) {\n            return ARRAY;\n        } else if (isPropertyObject(value)) {\n            return PROPERTY;\n        }\n    } else if (type === STRING || type === NUMBER) {\n        return \"value\";\n    }\n    return type;\n}\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(\n    names: Array<string | number>,\n    properties: IObject<any>, length: number = names.length) {\n    let value = properties;\n\n    for (let i = 0; i < length; ++i) {\n        if (!isObject(value)) {\n            return undefined;\n        }\n        value = value[names[i]];\n    }\n    return value;\n}\nexport function isInProperties(roles: IObject<any>, args: string[], isCheckTrue?: boolean) {\n    const length = args.length;\n    let role: any = roles;\n\n    if (length === 0) {\n        return false;\n    }\n    for (let i = 0; i < length; ++i) {\n        if (role === true) {\n            return false;\n        }\n        role = role[args[i]];\n        if (!role || (!isCheckTrue && role === true)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isRole(args: string[], isCheckTrue?: boolean) {\n    return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: string[]) {\n    return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n    currentTime: number;\n    iterationCount: number;\n    elapsedTime: number;\n}\nexport function setPlayCSS(item: Scene | SceneItem, isActivate: boolean) {\n    item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n    return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n    return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function exportCSS(id: number | string, css: string) {\n    const styleId = `${PREFIX}STYLE_${toId(id)}`;\n    const styleElement: HTMLElement = $(`#${styleId}`);\n\n    if (styleElement) {\n        styleElement.innerText = css;\n    } else {\n        document.body.insertAdjacentHTML(\"beforeend\",\n            `<style id=\"${styleId}\">${css}</style>`);\n    }\n}\nexport function makeId(selector?: boolean) {\n    for (; ;) {\n        const id = `${Math.floor(Math.random() * 10000000)}`;\n\n        if (!IS_WINDOW || !selector) {\n            return id;\n        }\n        const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n        if (!checkElement) {\n            return id;\n        }\n    }\n}\nexport function getRealId(item: Scene | SceneItem) {\n    return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n    return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(\n    item: Scene | SceneItem, isExportCSS?: boolean,\n    playClassName?: string, properties: object = {}) {\n    if (!ANIMATION || item.getPlayState() === RUNNING) {\n        return;\n    }\n    const className = playClassName || START_ANIMATION;\n\n    if (isPausedCSS(item)) {\n        item.addPlayClass(true, className, properties);\n    } else {\n        if (item.isEnded()) {\n            item.setTime(0);\n        }\n        isExportCSS && item.exportCSS({ className });\n        const el = item.addPlayClass(false, className, properties);\n\n        if (!el) {\n            return;\n        }\n        addAnimationEvent(item, el);\n        setPlayCSS(item, true);\n    }\n    item.setPlayState(RUNNING);\n}\nexport function findIndex<T>(arr: T[], callback: (element: T) => any, defaultIndex: number = -1): number {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i])) {\n            return i;\n        }\n    }\n    return defaultIndex;\n}\nexport function find<T>(arr: T[], callback: (element: T) => any, defalutValue?: T): T | undefined {\n    const index = findIndex(arr, callback);\n\n    return index > - 1 ? arr[index] : defalutValue;\n}\nexport function addAnimationEvent(item: Scene | SceneItem, el: Element) {\n    const state = item.state;\n    const duration = item.getDuration();\n    const isZeroDuration = !duration || !isFinite(duration);\n    const animationend = () => {\n        setPlayCSS(item, false);\n        item.finish();\n    };\n    const animationstart = () => {\n        item.trigger(PLAY);\n    };\n    item.once(ENDED, () => {\n        removeEvent(el, \"animationcancel\", animationend);\n        removeEvent(el, \"animationend\", animationend);\n        removeEvent(el, \"animationiteration\", animationiteration);\n        removeEvent(el, \"animationstart\", animationstart);\n    });\n    const animationiteration = ({ elapsedTime }: any) => {\n        const currentTime = elapsedTime;\n        const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n        state[CURRENT_TIME] = currentTime;\n        item.setIteration(iterationCount);\n    };\n    addEvent(el, \"animationcancel\", animationend);\n    addEvent(el, \"animationend\", animationend);\n    addEvent(el, \"animationiteration\", animationiteration);\n    addEvent(el, \"animationstart\", animationstart);\n}\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n  COLOR_MODELS, isString,\n  splitComma, splitSpace, stringToRGBA,\n  RGBA, splitBracket, IObject, isArray\n} from \"@daybrush/utils\";\n\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const obj: IObject<string | PropertyObject> = {};\n  let length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      --length;\n      continue;\n    }\n    obj[matches[1].trim()] = toPropertyObject(matches[2].trim());\n  }\n  return {styles: obj, length};\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n  // [prefix, value, other]\n  const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  const obj = toPropertyObject(value);\n\n  let arr = [value];\n  let separator = \",\";\n  let prefix = `${model}(`;\n  let suffix = `)${afterModel}`;\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.separator;\n    arr = obj.value;\n    prefix += obj.prefix;\n    suffix = obj.suffix + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  const result = stringToRGBA(value);\n\n  return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[]): PropertyObject;\nexport function toPropertyObject(value: IObject<any>): IObject<any>;\nexport function toPropertyObject(value: string): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[]) {\n  if (!isString(value)) {\n    if (isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n  const model = object.model;\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => {\n      toObject(obj, result);\n    });\n  }\n  return result;\n}\n","import {\n    THRESHOLD,\n    ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n    ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n    DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n    RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS, EASINGS\n} from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, steps } from \"./easing\";\nimport { toFixed, makeId } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame, isArray } from \"@daybrush/utils\";\nimport {\n    IterationCountType, DirectionType, AnimatorState,\n    EasingFunction, FillModeType, PlayStateType, EasingType, AnimatorOptions,\n} from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\n\nfunction GetterSetter<T extends new (...args: any[]) => {}>(\n    getter: string[], setter: string[], parent: string) {\n    return (constructor: T) => {\n        const prototype = constructor.prototype;\n\n        getter.forEach(name => {\n            prototype[camelize(`get ${name}`)] = function() {\n                return this[parent][name];\n            };\n        });\n        setter.forEach(name => {\n            prototype[camelize(`set ${name}`)] = function(value: any) {\n                this[parent][name] = value;\n                return this;\n            };\n        });\n    };\n}\nfunction tick(animator: Animator, now: number, to?: number) {\n    if (animator.isPaused()) {\n        return;\n    }\n    const state = animator.state;\n    const playSpeed = state[PLAY_SPEED];\n    const prevTime = state[PREV_TIME];\n    const delay = state[DELAY];\n    const tickTime = state[TICK_TIME];\n    const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n    state[PREV_TIME] = now;\n    animator.setTime(currentTime - delay, true);\n    if (to && to * 1000 < now) {\n        animator.pause();\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n        return;\n    }\n\n    requestAnimationFrame((time: number) => {\n        tick(animator, time, to);\n    });\n}\n\nexport function isDirectionReverse(iteration: number, iteraiontCount: IterationCountType, direction: DirectionType) {\n    if (direction === REVERSE) {\n        return true;\n    } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n        return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n    }\n    return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nconst setters = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n    DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n/**\n* play video, animation, the others\n* @extends EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n*/\n@GetterSetter(getters, setters, \"state\")\nclass Animator\n    <T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> extends EventTrigger {\n    public state: U;\n\n    /**\n     * @param - animator's options\n     * @example\n  const animator = new Animator({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n     */\n    constructor(options?: Partial<T & AnimatorOptions>) {\n        super();\n        this.state = {\n            id: \"\",\n            easing: 0,\n            easingName: \"linear\",\n            iterationCount: 1,\n            delay: 0,\n            fillMode: \"forwards\",\n            direction: NORMAL,\n            playSpeed: 1,\n            currentTime: 0,\n            iterationTime: -1,\n            iteration: 0,\n            tickTime: 0,\n            prevTime: 0,\n            playState: PAUSED,\n            duration: 0,\n        } as U;\n        this.setOptions(options);\n    }\n    /**\n      * set animator's easing.\n      * @param curverArray - The speed curve of an animation.\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n      */\n    public setEasing(curveArray: string | number[] | EasingFunction): this {\n        let easing: EasingFunction;\n\n        if (isString(curveArray)) {\n            if (curveArray in EASINGS) {\n                easing = EASINGS[curveArray];\n            } else {\n                const obj = toPropertyObject(curveArray);\n\n                if (isString(obj)) {\n                    return this;\n                } else {\n                    if (obj.model === \"cubic-bezier\") {\n                        curveArray = obj.value.map(v => parseFloat(v));\n                        easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n                    } else if (obj.model === \"steps\") {\n                        easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n                    } else {\n                        return this;\n                    }\n                }\n            }\n        } else if (isArray(curveArray)) {\n            easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n        } else {\n            easing = curveArray;\n        }\n        const easingName = easing[EASING_NAME] || \"linear\";\n\n        const state = this.state;\n\n        state[EASING] = easing;\n        state[EASING_NAME] = easingName;\n        return this;\n    }\n    /**\n      * set animator's options.\n      * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n      * @param - animator's options\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.eaasing.EASE,\n  });\n      */\n    public setOptions(options: Partial<AnimatorOptions> = {}): this {\n        for (const name in options) {\n            const value = options[name];\n\n            if (name === EASING) {\n                this.setEasing(value);\n                continue;\n            } else if (name === DURATION) {\n                value && this.setDuration(value);\n                continue;\n            }\n            if (OPTIONS.indexOf(name as any) > -1) {\n                this.state[name] = value;\n            }\n        }\n\n        return this;\n    }\n    /**\n      * Get the animator's total duration including delay\n      * @return {number} Total duration\n      * @example\n  animator.getTotalDuration();\n      */\n    public getTotalDuration(): number {\n        return this.getActiveDuration(true);\n    }\n    /**\n      * Get the animator's total duration excluding delay\n      * @return {number} Total duration excluding delay\n      * @example\n  animator.getActiveDuration();\n      */\n    public getActiveDuration(delay?: boolean): number {\n        const state = this.state;\n        const count = state[ITERATION_COUNT];\n        if (count === INFINITE) {\n            return Infinity;\n        }\n        return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n    }\n    /**\n      * Check if the animator has reached the end.\n      * @return {boolean} ended\n      * @example\n  animator.isEnded(); // true or false\n      */\n    public isEnded(): boolean {\n        if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n            return true;\n        } else if (this.getTime() < this.getActiveDuration()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n      *Check if the animator is paused:\n      * @return {boolean} paused\n      * @example\n  animator.isPaused(); // true or false\n      */\n    public isPaused(): boolean {\n        return this.state[PLAY_STATE] === PAUSED;\n    }\n    public start(delay: number = this.state[DELAY]): void {\n        const state = this.state;\n\n        state[PLAY_STATE] = RUNNING;\n        if (state[TICK_TIME] >= delay) {\n            /**\n             * This event is fired when play animator.\n             * @event Animator#play\n             */\n            this.trigger(PLAY);\n        }\n    }\n    /**\n      * play animator\n      * @return {Animator} An instance itself.\n      */\n    public play(toTime?: number) {\n        const state = this.state;\n        const delay = state[DELAY];\n        const currentTime = this.getTime();\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n            this.setTime(-delay, true);\n        }\n        state[TICK_TIME] = this.getTime();\n\n        requestAnimationFrame((time: number) => {\n            state[PREV_TIME] = time;\n            tick(this, time, toTime);\n        });\n        this.start();\n        return this;\n    }\n    /**\n      * pause animator\n      * @return {Animator} An instance itself.\n      */\n    public pause(): this {\n        const state = this.state;\n\n        if (state[PLAY_STATE] !== PAUSED) {\n            state[PLAY_STATE] = PAUSED;\n            /**\n             * This event is fired when animator is paused.\n             * @event Animator#paused\n             */\n            this.trigger(PAUSED);\n        }\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public finish() {\n        this.setTime(0);\n        this.state[TICK_TIME] = 0;\n        this.end();\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public end() {\n        this.pause();\n        /**\n             * This event is fired when animator is ended.\n             * @event Animator#ended\n             */\n        this.trigger(ENDED);\n        return this;\n    }\n    /**\n      * set currentTime\n      * @param {Number|String} time - currentTime\n      * @return {Animator} An instance itself.\n      * @example\n\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n      */\n    public setTime(time: number | string, isTick?: boolean) {\n        const activeDuration = this.getActiveDuration();\n        const state = this.state;\n        const prevTime = state[TICK_TIME];\n        const delay = state[DELAY];\n        let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n        state[TICK_TIME] = delay + currentTime;\n        if (currentTime < 0) {\n            currentTime = 0;\n        } else if (currentTime > activeDuration) {\n            currentTime = activeDuration;\n        }\n        state[CURRENT_TIME] = currentTime;\n        this.calculate();\n\n        if (isTick) {\n            const tickTime = state[TICK_TIME];\n\n            if (prevTime < delay && time >= 0 ||\n                state[PLAY_STATE] !== RUNNING && tickTime >= delay && !this.isEnded()) {\n                this.start(0);\n            }\n            if (tickTime < prevTime || this.isEnded()) {\n                this.end();\n                return;\n            }\n        }\n        if (this.isDelay()) {\n            return this;\n        }\n        /**\n             * This event is fired when the animator updates the time.\n             * @event Animator#timeupdate\n             * @param {Object} param The object of data to be sent to an event.\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Number} param.iterationCount The iteration count that the animator is running.\n             */\n        this.trigger(TIMEUPDATE, {\n            currentTime,\n            time: this.getIterationTime(),\n            iterationCount: state[ITERATION],\n        });\n\n        return this;\n    }\n    /**\n      * Get the animator's current time\n      * @return {number} current time\n      * @example\n  animator.getTime();\n      */\n    public getTime(): number {\n        return this.state[CURRENT_TIME];\n    }\n    public getUnitTime(time: string | number) {\n        if (isString(time)) {\n            const duration = this.getDuration() || 100;\n\n            if (time === \"from\") {\n                return 0;\n            } else if (time === \"to\") {\n                return duration;\n            }\n            const { unit, value } = splitUnit(time);\n\n            if (unit === \"%\") {\n                !this.getDuration() && (this.setDuration(duration));\n                return toFixed(parseFloat(time) / 100 * duration);\n            } else if (unit === \">\") {\n                return value + THRESHOLD;\n            } else {\n                return value;\n            }\n        } else {\n            return toFixed(time);\n        }\n    }\n    /**\n       * Check if the current state of animator is delayed.\n       * @return {boolean} check delay state\n       */\n    public isDelay() {\n        const state = this.state;\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n\n        return delay > 0 && (tickTime < delay);\n    }\n    public setIteration(iterationCount: number): this {\n        const state = this.state;\n        const passIterationCount = Math.floor(iterationCount);\n        const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n        if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n            /**\n                  * The event is fired when an iteration of an animation ends.\n                  * @event Animator#iteration\n                  * @param {Object} param The object of data to be sent to an event.\n                  * @param {Number} param.currentTime The total time that the animator is running.\n                  * @param {Number} param.iterationCount The iteration count that the animator is running.\n                  */\n            this.trigger(\"iteration\", {\n                currentTime: state[CURRENT_TIME],\n                iterationCount: passIterationCount,\n            });\n        }\n        state[ITERATION] = iterationCount;\n        return this;\n    }\n    protected calculate() {\n        const state = this.state;\n        const iterationCount = state[ITERATION_COUNT];\n        const fillMode = state[FILL_MODE];\n        const direction = state[DIRECTION];\n        const duration = this.getDuration();\n        const time = this.getTime();\n        const iteration = duration === 0 ? 0 : time / duration;\n        let currentIterationTime = duration ? time % duration : 0;\n\n        if (!duration) {\n            this.setIterationTime(0);\n            return this;\n        }\n        this.setIteration(iteration);\n\n        // direction : normal, reverse, alternate, alternate-reverse\n        // fillMode : forwards, backwards, both, none\n        const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n        const isFiniteDuration = isFinite(duration);\n        if (isFiniteDuration && isReverse) {\n            currentIterationTime = duration - currentIterationTime;\n        }\n        if (isFiniteDuration && iterationCount !== INFINITE) {\n            const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n            // fill forwards\n            if (iteration >= iterationCount) {\n                currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n                isReverse && (currentIterationTime = duration - currentIterationTime);\n            }\n        }\n        this.setIterationTime(currentIterationTime);\n        return this;\n    }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator<T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> {\n    setId(id: number | string): this;\n    getId(): number | string;\n    getIterationTime(): number;\n    setIterationTime(time: number): this;\n    setDelay(delay: number): this;\n    getDelay(): number;\n    setFillMode(fillMode: FillModeType): this;\n    getFillMode(): FillModeType;\n    setIterationCount(iterationCount: IterationCountType): this;\n    getIterationCount(): IterationCountType;\n    setDirection(direction: DirectionType): this;\n    getDirection(): DirectionType;\n    setPlayState(playState: PlayStateType): this;\n    getPlayState(): PlayStateType;\n    setPlaySpeed(playSpeed: number): this;\n    getPlaySpeed(): number;\n    setDuration(duration: number): this;\n    getDuration(): number;\n    getEasing(): EasingType;\n    getEasingName(): string;\n}\nexport default Animator;\n","import {\n    ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames, isFixed } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport {\n    isObject, isArray, isString,\n    ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined\n} from \"@daybrush/utils\";\nimport { NameType } from \"./types\";\n\nfunction toInnerProperties(obj: IObject<string>) {\n    if (!obj) {\n        return \"\";\n    }\n    const arrObj = [];\n\n    for (const name in obj) {\n        arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n    }\n    return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n    return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n    for (const name in from) {\n        const value = from[name];\n        const type = getType(value);\n\n        if (type === PROPERTY) {\n            to[name] = toValue ? value.toValue() : value.clone();\n        } else if (type === FUNCTION) {\n            to[name] = toValue ? getValue([name], value) : value;\n        } else if (type === ARRAY) {\n            to[name] = value.slice();\n        } else if (type === OBJECT) {\n            if (isObject(to[name]) && !isPropertyObject(to[name])) {\n                merge(to[name], value, toValue);\n            } else {\n                to[name] = clone(value, toValue);\n            }\n        } else {\n            to[name] = from[name];\n        }\n    }\n    return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n    return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n        return value.toValue();\n    } else if (type === FUNCTION) {\n        if (names[0] !== TIMING_FUNCTION) {\n            return getValue(names, value());\n        }\n    } else if (type === OBJECT) {\n        return clone(value, true);\n    }\n    return value;\n}\n/**\n* Animation's Frame\n*/\nclass Frame {\n    public properties: IObject<any>;\n    /**\n     * @param - properties\n     * @example\n  const frame = new Scene.Frame({\n      display: \"none\"\n      transform: {\n          translate: \"50px\",\n          scale: \"5, 5\",\n      }\n  });\n     */\n    constructor(properties: IObject<any> = {}) {\n        this.properties = {};\n        this.set(properties);\n    }\n    /**\n      * get property value\n      * @param {...Number|String|PropertyObject} args - property name or value\n      * @example\n      frame.get(\"display\") // => \"none\", \"block\", ....\n      frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n      */\n    public get(...args: NameType[]) {\n        const value = this.raw(...args);\n\n        return getValue(getPropertyName(args), value);\n    }\n\n    public raw(...args: NameType[]) {\n        return getValueByNames(getPropertyName(args), this.properties);\n    }\n    /**\n      * remove property value\n      * @param {...String} args - property name\n      * @return {Frame} An instance itself\n      * @example\n      frame.remove(\"display\")\n      */\n    public remove(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return this;\n        }\n        const value = getValueByNames(params, this.properties, length - 1);\n\n        if (isObject(value)) {\n            delete value[params[length - 1]];\n        }\n        return this;\n    }\n    /**\n      * set property\n      * @param {...Number|String|PropertyObject} args - property names or values\n      * @return {Frame} An instance itself\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n      filter: {\n          brightness: \"50%\",\n          grayscale: \"100%\"\n      }\n  });\n\n  // two parameters\n  frame.set(\"transform\", {\n      translate: \"10px, 10px\",\n      scale: \"1\",\n  });\n\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n    */\n    public set(...args: any[]) {\n        const self = this;\n        const length = args.length;\n        const params = args.slice(0, -1);\n        const value = args[length - 1];\n\n        if (params[0] in ALIAS) {\n            self._set(ALIAS[params[0]], value);\n        } else if (length === 2 && isArray(params[0])) {\n            self._set(params[0], value);\n        } else if (isArray(value)) {\n            self._set(params, value);\n        } else if (isPropertyObject(value)) {\n            if (isRole(params)) {\n                self.set(...params, toObject(value));\n            } else {\n                self._set(params, value);\n            }\n        } else if (isObject(value)) {\n            for (const name in value) {\n                self.set(...params, name, value[name]);\n            }\n        } else if (isString(value)) {\n            if (isRole(params, true)) {\n                if (isFixed(params) || !isRole(params)) {\n                    this._set(params, value);\n                } else  {\n                    const obj = toPropertyObject(value);\n\n                    if (isObject(obj)) {\n                        self.set(...params, obj);\n                    }\n                }\n                return this;\n            } else {\n                const { styles, length: stylesLength } = splitStyle(value);\n\n                for (const name in styles) {\n                    self.set(...params, name, styles[name]);\n                }\n                if (stylesLength) {\n                    return this;\n                }\n            }\n            self._set(params, value);\n        } else {\n            self._set(params, value);\n        }\n        return self;\n    }\n    /**\n      * check that has property.\n      * @param {...String} args - property name\n      * @example\n      frame.has(\"property\", \"display\") // => true or false\n      */\n    public has(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return false;\n        }\n        return !isUndefined(getValueByNames(params, this.properties, length));\n    }\n    /**\n      * clone frame.\n      * @return {Frame} An instance of clone\n      * @example\n      frame.clone();\n      */\n    public clone() {\n        const frame = new Frame();\n\n        return frame.merge(this);\n    }\n    /**\n      * merge one frame to other frame.\n      * @param - target frame.\n      * @return {Frame} An instance itself\n      * @example\n      frame.merge(frame2);\n      */\n    public merge(frame: Frame) {\n        const properties = this.properties;\n        const frameProperties = frame.properties;\n\n        if (!frameProperties) {\n            return this;\n        }\n        merge(properties, frameProperties);\n\n        return this;\n    }\n    /**\n      * Specifies an css object that coverted the frame.\n      * @return {object} cssObject\n      */\n    public toCSSObject() {\n        const properties = this.get();\n        const cssObject: IObject<string> = {};\n\n        for (const name in properties) {\n            if (isRole([name], true)) {\n                continue;\n            }\n            const value = properties[name];\n\n            if (name === TIMING_FUNCTION) {\n                cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n                    (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n                continue;\n            }\n            cssObject[name] = value;\n        }\n        const transform = toInnerProperties(properties[TRANSFORM_NAME]);\n        const filter = toInnerProperties(properties.filter);\n\n        TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n        FILTER && filter && (cssObject[FILTER] = filter);\n        return cssObject;\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * @return {string} cssText\n      */\n    public toCSS() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n\n        for (const name in cssObject) {\n            cssArray.push(`${name}:${cssObject[name]};`);\n        }\n        return cssArray.join(\"\");\n    }\n    private _set(args: NameType[], value: any) {\n        let properties = this.properties;\n        const length = args.length;\n\n        for (let i = 0; i < length - 1; ++i) {\n            const name = args[i];\n\n            !(name in properties) && (properties[name] = {});\n            properties = properties[name];\n        }\n        if (!length) {\n            return;\n        }\n        properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n    }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\nexport function dotNumber(a1: number, a2: number, b1: number, b2: number) {\n  return (a1 * b2 + a2 * b1) / (b1 + b2);\n}\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n    toFixed,\n    isFixed,\n    playCSS,\n    toId,\n    exportCSS,\n    getRealId,\n    makeId,\n    isPausedCSS,\n    isRole,\n    isInProperties,\n    getValueByNames,\n    isEndedCSS,\n    setPlayCSS,\n    find,\n    findIndex,\n} from \"./utils\";\nimport { dotValue, dotNumber } from \"./utils/dot\";\nimport {\n    START_ANIMATION,\n    PREFIX, THRESHOLD,\n    TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n    REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n    EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION, DATA_SCENE_ID, PLAY_CSS, SELECTOR, ROLES, CURRENT_TIME\n} from \"./consts\";\nimport {\n    isObject, isArray, isUndefined, decamelize,\n    ANIMATION, fromCSS, addClass, removeClass, hasClass,\n    KEYFRAMES, requestAnimationFrame, isFunction,\n    IObject, $, splitComma, toArray, isString, IArrayFormat, TRANSFORM\n} from \"@daybrush/utils\";\nimport {\n    NameType, RoleObject, AnimateElement, AnimatorState,\n    SceneItemState, SceneItemOptions, EasingType, PlayCondition, DirectionType\n} from \"./types\";\n\nfunction getNearTimeIndex(times: number[], time: number) {\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (times[i] === time) {\n            return [i, i];\n        } else if (times[i] > time) {\n            return [i > 0 ? i - 1 : 0, i];\n        }\n    }\n    return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: object) {\n    const cssArray = [];\n\n    for (const name in properties) {\n        cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n    }\n    return cssArray.join(\"\");\n}\nfunction isPureObject(obj: any): obj is object {\n    return isObject(obj) && obj.constructor === Object;\n}\nfunction getNames(names: IObject<any>, stack: string[]) {\n    let arr: string[][] = [];\n\n    if (isPureObject(names)) {\n        for (const name in names) {\n            stack.push(name);\n            arr = arr.concat(getNames(names[name], stack));\n            stack.pop();\n        }\n    } else {\n        arr.push(stack.slice());\n    }\n    return arr;\n}\nfunction updateFrame(names: IObject<any>, properties: IObject<any>) {\n    for (const name in properties) {\n        const value = properties[name];\n\n        if (!isPureObject(value)) {\n            names[name] = true;\n            continue;\n        }\n        if (!isObject(names[name])) {\n            names[name] = {};\n        }\n        updateFrame(names[name], properties[name]);\n    }\n    return names;\n}\nfunction addTime(times: number[], time: number) {\n    const length = times.length;\n    for (let i = 0; i < length; ++i) {\n        if (time < times[i]) {\n            times.splice(i, 0, time);\n            return;\n        }\n    }\n    times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (currentTime === lastTime && nextEntries[nextEntries.length - 1][0] === lastTime + delay) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemOptions, SceneItemState> {\n    public times: number[] = [];\n    public items: IObject<Frame> = {};\n    public names: RoleObject = {};\n    public elements: AnimateElement[] = [];\n    public temp: Frame;\n    private needUpdate: boolean = true;\n    private target: any;\n    private targetFunc: (frame: Frame) => void;\n\n    /**\n      * @param - properties\n      * @param - options\n      * @example\n      const item = new SceneItem({\n          0: {\n              display: \"none\",\n          },\n          1: {\n              display: \"block\",\n              opacity: 0,\n          },\n          2: {\n              opacity: 1,\n          }\n      });\n       */\n    constructor(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const times = this.times;\n        const length = times.length;\n\n        return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n    }\n    /**\n      * get size of list\n      * @return {Number} length of list\n      */\n    public size() {\n        return this.times.length;\n    }\n    public setDuration(duration: number) {\n        if (!duration) {\n            return this;\n        }\n        const originalDuration = this.getDuration();\n\n        if (originalDuration > 0) {\n            const ratio = duration / originalDuration;\n            const { times, items } = this;\n            const obj: IObject<Frame> = {};\n\n            this.times = times.map(time => {\n                const time2 = toFixed(time * ratio);\n\n                obj[time2] = items[time];\n\n                return time2;\n            });\n            this.items = obj;\n        } else {\n            this.newFrame(duration);\n        }\n        return this;\n    }\n    public setId(id?: number | string) {\n        const state = this.state;\n\n        state.id = id || makeId(!!length);\n        const elements = this.elements;\n\n        if (elements.length && !state[SELECTOR]) {\n            const sceneId = toId(this.getId());\n\n            state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n            elements.forEach(element => {\n                element.setAttribute(DATA_SCENE_ID, sceneId);\n            });\n        }\n        return this;\n    }\n\n    /**\n      * Set properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n      */\n    public set(time: any, ...args: any[]) {\n        if (isArray(time)) {\n            const length = time.length;\n\n            for (let i = 0; i < length; ++i) {\n                const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n                this.set(t, time[i]);\n            }\n        } else if (isObject(time)) {\n            for (const t in time) {\n                const value = time[t];\n                const realTime = this.getUnitTime(t);\n\n                if (isNaN(realTime)) {\n                    getNames(value, [t]).forEach(names => {\n                        const innerValue = getValueByNames(names.slice(1), value);\n                        const arr = isArray(innerValue) ?\n                        innerValue : [getValueByNames(names, this.target), innerValue];\n                        const length = arr.length;\n\n                        for (let i = 0; i < length; ++i) {\n                            this.newFrame(`${i / (length - 1) * 100}%`).set(names, arr[i]);\n                        }\n                    });\n                } else {\n                    this.set(realTime, value);\n                }\n            }\n        } else {\n            const value = args[0];\n\n            if (value instanceof Frame) {\n                this.setFrame(time, value);\n            } else if (value instanceof SceneItem) {\n                const delay = value.getDelay();\n                const realTime = this.getUnitTime(time);\n                const frames = value.toObject(!this.hasFrame(realTime + delay), realTime);\n\n                for (const frameTime in frames) {\n                    this.set(frameTime, frames[frameTime]);\n                }\n            } else if (args.length === 1 && isArray(value)) {\n                value.forEach((item: any) => {\n                    this.set(time, item);\n                });\n            } else {\n                const frame = this.newFrame(time);\n\n                frame.set(...args);\n            }\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Get properties of the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} args property's name or properties\n      * @return {Number|String|PropertyObejct} property value\n      * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n      */\n    public get(time: string | number, ...args: NameType[]) {\n        const frame = this.getFrame(time);\n\n        return frame && frame.get(...args);\n    }\n    public remove(time: string | number, ...args: any[]): this;\n    /**\n      * remove properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.remove(0, \"a\");\n      */\n    public remove(time: string | number, ...args: NameType[]) {\n        if (args.length) {\n            const frame = this.getFrame(time);\n\n            frame && frame.remove(...args);\n        } else {\n            this.removeFrame(time);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Append the item or object at the last time.\n      * @param - the scene item or item object\n      * @return An instance itself\n      * @example\n  item.append(new SceneItem({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  }));\n  item.append({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n  item.set(item.getDuration(), {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n      */\n    public append(item: SceneItem | IObject<any>) {\n        this.set(this.getDuration(), item);\n        return this;\n    }\n    /**\n      * Push the front frames for the time and prepend the scene item or item object.\n      * @param - the scene item or item object\n      * @return An instance itself\n      */\n    public prepend(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            const unshiftTime = item.getDuration() + item.getDelay();\n            const firstFrame = this.getFrame(0);\n            // remove first frame\n            this.removeFrame(0);\n            this.unshift(unshiftTime);\n            this.set(0, item);\n            this.set(unshiftTime + THRESHOLD, firstFrame);\n        } else {\n            this.prepend(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n   * Push out the amount of time.\n   * @param - time to push\n     * @return {}\n     * @example\n   item.get(0); // frame 0\n   item.unshift(3);\n   item.get(3) // frame 0\n     */\n    public unshift(time: number) {\n        const { times, items } = this;\n        const obj: IObject<Frame> = {};\n\n        this.times = times.map(t => {\n            const time2 = toFixed(time + t);\n\n            obj[time2] = items[t];\n            return time2;\n        });\n        this.items = obj;\n    }\n    /**\n     * Get the frames in the item in object form.\n     * @return {}\n     * @example\n item.toObject();\n // {0: {display: \"none\"}, 1: {display: \"block\"}}\n     */\n    public toObject(isStartZero = true, startTime = 0): IObject<Frame> {\n        const obj: IObject<Frame> = {};\n        const delay = this.getDelay();\n\n        this.forEach((frame: Frame, time: number) => {\n            obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + startTime + time] = frame.clone();\n        });\n        return obj;\n    }\n    /**\n     * Specifies an element to synchronize items' keyframes.\n     * @param {string} selectors - Selectors to find elements in items.\n     * @return {SceneItem} An instance itself\n     * @example\n item.setSelector(\"#id.class\");\n     */\n    public setSelector(target: string | boolean) {\n        this.setElement(target);\n    }\n    /**\n      * Specifies an element to synchronize item's keyframes.\n    * @param - elements to synchronize item's keyframes.\n    * @param - Make sure that you have peusdo.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setElement(document.querySelectorAll(\".class\"));\n      */\n    public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n        const state = this.state;\n        let elements: AnimateElement[] = [];\n\n        if (!target) {\n            return this;\n        } else if (target === true || isString(target)) {\n            const selector = target === true ? `${state.id}` : target;\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n            elements = toArray($(matches ? matches[1] : selector, true));\n            state[SELECTOR] = selector;\n        } else {\n            elements = (target instanceof Element) ? [target] : toArray(target);\n        }\n        if (!elements.length) {\n            return this;\n        }\n        this.elements = elements;\n        this.setId(this.getId());\n        this.target = elements[0].style;\n        this.targetFunc = (frame: Frame) => {\n            const attributes = frame.get(\"attribute\");\n\n            if (attributes) {\n                for (const name in attributes) {\n                    elements.forEach(el => {\n                        el.setAttribute(name, attributes[name]);\n                    });\n                }\n            }\n            const cssText = frame.toCSS();\n\n            if (state.cssText !== cssText) {\n                state.cssText = cssText;\n\n                elements.forEach(el => {\n                    el.style.cssText += cssText;\n                });\n                return frame;\n            }\n        };\n        return this;\n    }\n    public setTarget(target: any): this {\n        this.target = target;\n        this.targetFunc = (frame: Frame) => {\n            const obj = frame.get();\n\n            for (const name in obj) {\n                target[name] = obj[name];\n            }\n        };\n        return this;\n    }\n    /**\n      * add css styles of items's element to the frame at that time.\n      * @param {Array} properties - elements to synchronize item's keyframes.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n      */\n    public setCSS(time: number, properties: string[]) {\n        this.set(time, fromCSS(this.elements, properties));\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frame = this.getNowFrame(iterationTime, easing);\n        const currentTime = this.getTime();\n\n        this.temp = frame;\n        /**\n             * This event is fired when timeupdate and animate.\n             * @event SceneItem#animate\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Frame} param.frame frame of that time.\n             */\n        this.trigger(\"animate\", {\n            frame,\n            currentTime,\n            time: iterationTime,\n        });\n        this.targetFunc && this.targetFunc(frame);\n        return this;\n    }\n    /**\n      * update property names used in frames.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.update();\n      */\n    public update() {\n        const names = {};\n        this.forEach(frame => {\n            updateFrame(names, frame.properties);\n        });\n        this.names = names;\n        this.needUpdate = false;\n        return this;\n    }\n    /**\n      * Create and add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} Created frame.\n      * @example\n  item.newFrame(time);\n      */\n    public newFrame(time: string | number) {\n        let frame = this.getFrame(time);\n\n        if (frame) {\n            return frame;\n        }\n        frame = new Frame();\n        this.setFrame(time, frame);\n        return frame;\n    }\n    /**\n      * Add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setFrame(time, frame);\n      */\n    public setFrame(time: string | number, frame: Frame) {\n        const realTime = this.getUnitTime(time);\n\n        this.items[realTime] = frame;\n        addTime(this.times, realTime);\n        this.needUpdate = true;\n        return this;\n    }\n    public getFrame(time: number | string, ...names: any[]): Frame;\n    /**\n      * get sceneItem's frame at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} sceneItem's frame at that time\n      * @example\n  const frame = item.getFrame(time);\n      */\n    public getFrame(time: number | string) {\n        return this.items[this.getUnitTime(time)];\n    }\n    public removeFrame(time: number | string, ...names: any[]): this;\n    /**\n      * remove sceneItem's frame at that time\n      * @param - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.removeFrame(time);\n      */\n    public removeFrame(time: number | string) {\n        const realTime = this.getUnitTime(time);\n        const items = this.items;\n        const index = this.times.indexOf(realTime);\n\n        delete items[realTime];\n\n        // remove time\n        if (index > -1) {\n            this.times.splice(index, 1);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * check if the item has a frame at that time\n      * @param {Number} time - frame's time\n      * @return {Boolean} true: the item has a frame // false: not\n      * @example\n  if (item.hasFrame(10)) {\n      // has\n  } else {\n      // not\n  }\n      */\n    public hasFrame(time: number | string) {\n        return this.getUnitTime(time) in this.items;\n    }\n    /**\n      * Check if keyframes has propery's name\n      * @param - property's time\n      * @return {boolean} true: if has property, false: not\n      * @example\n    item.hasName([\"transform\", \"translate\"]); // true or not\n      */\n    public hasName(args: string[]) {\n        this.needUpdate && this.update();\n        return isInProperties(this.names, args, true);\n    }\n    /**\n      * merge frame of the previous time at the next time.\n    * @param - The time of the frame to merge\n    * @param - The target frame\n      * @return {SceneItem} An instance itself\n      * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n      */\n    public mergeFrame(time: number | string, frame: Frame) {\n        if (frame) {\n            const toFrame = this.newFrame(time);\n\n            toFrame.merge(frame);\n        }\n        return this;\n    }\n    /**\n      * Get frame of the current time\n      * @param {Number} time - the current time\n      * @param {function} easing - the speed curve of an animation\n      * @return {Frame} frame of the current time\n      * @example\n  let item = new SceneItem({\n      0: {\n          display: \"none\",\n      },\n      1: {\n          display: \"block\",\n          opacity: 0,\n      },\n      2: {\n          opacity: 1,\n      }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n      */\n    public getNowFrame(time: number, easing?: EasingType, isAccurate?: boolean) {\n        this.needUpdate && this.update();\n        const frame = new Frame();\n        const [left, right] = getNearTimeIndex(this.times, time);\n        let realEasing = this.getEasing() || easing;\n        let nameObject = this.names;\n\n        if (this.hasName([TIMING_FUNCTION])) {\n            const nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n            isFunction(nowEasing) && (realEasing = nowEasing);\n        }\n        if (isAccurate) {\n            const prevFrame = this.getFrame(time);\n            const prevNames = updateFrame({}, prevFrame.properties);\n\n            for (const name in ROLES) {\n                if (name in prevNames) {\n                    prevNames[name] = nameObject[name];\n                }\n            }\n            nameObject = prevNames;\n        }\n        const names = getNames(nameObject, []);\n\n        names.forEach(properties => {\n            const value = this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n            if (isUndefined(value)) {\n                return;\n            }\n            frame.set(properties, value);\n        });\n        return frame;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        options && this.setOptions(options);\n\n        if (isArray(properties)) {\n            this.set(properties);\n        } else if (properties.keyframes) {\n            this.set(properties.keyframes);\n        } else {\n            for (const time in properties) {\n                if (time !== \"options\") {\n                    this.set({\n                        [time]: properties[time],\n                    });\n                }\n            }\n        }\n        if (options && options[DURATION]) {\n            this.setDuration(options[DURATION]);\n        }\n        return this;\n    }\n    /**\n       * clone SceneItem.\n       * @return {SceneItem} An instance of clone\n       * @example\n       * item.clone();\n       */\n    public clone() {\n        const item = new SceneItem();\n\n        item.setOptions(this.state);\n        this.forEach((frame: Frame, time: number) => {\n            item.setFrame(time, frame.clone());\n        });\n        return item;\n    }\n    /**\n       * executes a provided function once for each scene item.\n       * @param - Function to execute for each element, taking three arguments\n       * @return {Keyframes} An instance itself\n       */\n    public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n        const times = this.times;\n        const items = this.items;\n\n        times.forEach(time => {\n            callback(items[time], time, items);\n        });\n        return this;\n    }\n    public setOptions(options: Partial<SceneItemOptions> = {}) {\n        super.setOptions(options);\n        const { id, selector, elements, element, target } = options;\n\n        id && this.setId(id);\n        if (target) {\n            this.setTarget(target);\n        } else if (elements || element || selector) {\n            this.setElement(elements || element || selector);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition: PlayCondition = { className: START_ANIMATION },\n        parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n        const itemState = this.state;\n        const selector = itemState[SELECTOR];\n\n        if (!selector) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        itemState[DURATION] = originalDuration;\n        states.push(itemState);\n\n        const reversedStates = toArray(states).reverse();\n        const id = toId(getRealId(this));\n        const superParent = states[0];\n        const infiniteIndex = findIndex(reversedStates, state => {\n            return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n        }, states.length - 1);\n        const finiteStates = reversedStates.slice(0, infiniteIndex);\n        const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n            return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n        }, originalDuration);\n        const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n            return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n        }, 0);\n        const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n        const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n        const fillMode = superParent[FILL_MODE];\n        const direction = reversedStates[infiniteIndex][DIRECTION];\n        const cssText = makeAnimationProperties({\n            fillMode,\n            direction,\n            iterationCount,\n            delay: `${delay}s`,\n            name: `${PREFIX}KEYFRAMES_${id}`,\n            duration: `${duration / superParent[PLAY_SPEED]}s`,\n            timingFunction: easingName,\n        });\n        const selectors = splitComma(selector).map(sel => {\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n            if (matches) {\n                return [matches[0], matches[1]];\n            } else {\n                return [sel, \"\"];\n            }\n        });\n        const className = playCondition.className;\n        const selectorCallback = playCondition.selector;\n        const preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n\n        return `\n    ${preselector || selectors.map(([sel, peusdo]) => `${sel}.${className}${peusdo}`)} {${cssText}}\n    ${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {${ANIMATION}-play-state: paused;}\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{${this._toKeyframes(duration, finiteStates, direction)}}`;\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {SceneItem} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition,\n        duration?: number, options?: AnimatorState[]) {\n        if (!this.elements.length) {\n            return \"\";\n        }\n        const css = this.toCSS(playCondition, duration, options);\n        const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n        !isParent && exportCSS(getRealId(this), css);\n        return this;\n    }\n    public pause() {\n        super.pause();\n        isPausedCSS(this) && this.pauseCSS();\n        return this;\n    }\n    public pauseCSS() {\n        this.elements.forEach(element => {\n            addClass(element, PAUSE_ANIMATION);\n        });\n        return this;\n    }\n    public endCSS() {\n        this.elements.forEach(element => {\n            removeClass(element, PAUSE_ANIMATION);\n            removeClass(element, START_ANIMATION);\n        });\n        setPlayCSS(this, false);\n        return this;\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n      * Play using the css animation and keyframes.\n      * @param - Check if you want to export css.\n      * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n      * @param - The shorthand properties for six of the animation properties.\n      * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n      * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n      direction: \"reverse\",\n      fillMode: \"forwards\",\n  });\n      */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: object = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const elements = this.elements;\n        const length = elements.length;\n        const cssText = makeAnimationProperties(properties);\n\n        if (!length) {\n            return;\n        }\n        if (isPaused) {\n            elements.forEach(element => {\n                removeClass(element, PAUSE_ANIMATION);\n            });\n        } else {\n            elements.forEach(element => {\n                element.style.cssText += cssText;\n                if (hasClass(element, START_ANIMATION)) {\n                    removeClass(element, START_ANIMATION);\n                    requestAnimationFrame(() => {\n                        requestAnimationFrame(() => {\n                            addClass(element, START_ANIMATION);\n                        });\n                    });\n                } else {\n                    addClass(element, START_ANIMATION);\n                }\n            });\n        }\n        return elements[0];\n    }\n    public getNowValue(\n        time: number,\n        properties: string[],\n        left?: number,\n        right?: number,\n        isAccurate?: boolean,\n        easing?: EasingType,\n        usePrevValue?: boolean,\n    ) {\n        const times = this.times;\n        const length = times.length;\n\n        let prevTime: number;\n        let nextTime: number;\n        let prevFrame: Frame;\n        let nextFrame: Frame;\n        const isUndefinedLeft = isUndefined(left);\n        const isUndefinedRight = isUndefined(right);\n        if (isUndefinedLeft || isUndefinedRight) {\n            const indicies = getNearTimeIndex(times, time);\n            isUndefinedLeft && (left = indicies[0]);\n            isUndefinedRight && (right = indicies[1]);\n        }\n\n        for (let i = left; i >= 0; --i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                prevTime = times[i];\n                prevFrame = frame;\n                break;\n            }\n        }\n        const prevValue = prevFrame && prevFrame.raw(...properties);\n\n        if (isAccurate && !isRole([properties[0]])) {\n            return prevTime === time ? prevValue : undefined;\n        }\n        if (usePrevValue) {\n            return prevValue;\n        }\n        for (let i = right; i < length; ++i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                nextTime = times[i];\n                nextFrame = frame;\n                break;\n            }\n        }\n        const nextValue = nextFrame && nextFrame.raw(...properties);\n\n        if (!prevFrame || isUndefined(prevValue)) {\n            return nextValue;\n        }\n        if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n            return prevValue;\n        }\n        return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n    }\n    private _toKeyframes(duration: number, states: AnimatorState[], direction: DirectionType) {\n        const frames: IObject<string> = {};\n        const times = this.times.slice();\n\n        if (!times.length) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        (!this.getFrame(0)) && times.unshift(0);\n        (!this.getFrame(originalDuration)) && times.push(originalDuration);\n        const entries = getEntries(times, states);\n        const lastEntry = entries[entries.length - 1];\n\n        // end delay time\n        lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n        let prevTime = -1;\n\n        return entries.map(([time, keytime]) => {\n            if (!frames[keytime]) {\n                frames[keytime] =\n                    (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n                        this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSS();\n            }\n\n            let frameTime = time / duration * 100;\n\n            if (frameTime - prevTime < THRESHOLD) {\n                frameTime += THRESHOLD;\n            }\n            prevTime = frameTime;\n            return `${Math.min(frameTime, 100)}%{\n                ${time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime]}\n            }`;\n        }).join(\"\");\n    }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { DATA_SCENE_ID, SELECTOR, DURATION, START_ANIMATION } from \"./consts\";\nimport { playCSS, exportCSS, getRealId, makeId, isPausedCSS, isEndedCSS, setPlayCSS } from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport {\n    AnimateElement, SceneState, SceneOptions, EasingType,\n    AnimatorState, SceneItemOptions, PlayCondition\n} from \"./types\";\nimport Frame from \"./Frame\";\n\n/**\n * manage sceneItems and play Scene.\n * @sort 1\n */\nclass Scene extends Animator<SceneOptions, SceneState> {\n    /**\n    * version info\n    * @type {string}\n    * @example\n    * Scene.VERSION // #__VERSION__#\n    */\n    public static VERSION: string = \"#__VERSION__#\";\n    public items: IObject<Scene | SceneItem>;\n    public temp: IObject<Frame>;\n    /**\n    * @param - properties\n    * @param - options\n    * @example\n    const scene = new Scene({\n      item1: {\n        0: {\n          display: \"none\",\n        },\n        1: {\n          display: \"block\",\n          opacity: 0,\n        },\n        2: {\n          opacity: 1,\n        },\n      },\n      item2: {\n        2: {\n          opacity: 1,\n        },\n      }\n    });\n      */\n    constructor(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n        super();\n        this.items = {};\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const items = this.items;\n        let time = 0;\n\n        for (const id in items) {\n            const item = items[id];\n\n            time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n        }\n        return time || this.state[DURATION];\n    }\n    public setDuration(duration: number) {\n        const items = this.items;\n        const sceneDuration = this.getDuration();\n\n        if (duration === 0 || !isFinite(sceneDuration)) {\n            return this;\n        }\n        if (sceneDuration === 0) {\n            for (const id in items) {\n                const item = items[id];\n\n                item.setDuration(duration);\n            }\n        } else {\n            const ratio = duration / sceneDuration;\n\n            for (const id in items) {\n                const item = items[id];\n\n                item.setDelay(item.getDelay() * ratio);\n                item.setDuration(item.getDuration() * ratio);\n            }\n        }\n        super.setDuration(duration);\n        return this;\n    }\n    public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n    public getItem(name: number | string, index: number): SceneItem;\n    /**\n    * get item in scene by name\n    * @param - The item's name\n    * @param - If item is added as function, it can be imported via index.\n    * @return {Scene | SceneItem} item\n    * @example\n    const item = scene.getItem(\"item1\")\n    */\n    public getItem(name: number | string, index?: number) {\n        if (index != null) {\n            return (this.items[name] as Scene).getItem(index) as SceneItem;\n        }\n        return this.items[name];\n    }\n    /**\n    * create item in scene\n    * @param {} name - name of item to create\n    * @param {} options - The option object of SceneItem\n    * @return {} Newly created item\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): SceneItem {\n        if (name in this.items) {\n            return;\n        }\n        const item = new SceneItem();\n\n        this.setItem(name, item);\n        item.setOptions(options);\n\n        return item;\n    }\n    /**\n    * remove item in scene\n    * @param - name of item to remove\n    * @return  An instance itself\n    * @example\n    const item = scene.newItem(\"item1\")\n\n    scene.removeItem(\"item1\");\n    */\n   public removeItem(name: number | string): this {\n        const items = this.items;\n        if (name in items) {\n            delete items[name];\n        }\n        return this;\n    }\n    /**\n    * add a sceneItem to the scene\n    * @param - name of item to create\n    * @param - sceneItem\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public setItem(name: number | string, item: Scene | SceneItem) {\n        item.setId(name);\n        this.items[name] = item;\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick);\n\n        const iterationTime = this.getIterationTime();\n        const items = this.items;\n        const easing = this.getEasing() || parentEasing;\n        const frames: IObject<any> = {};\n\n        for (const id in items) {\n            const item = items[id];\n\n            item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, easing);\n\n            frames[item.getId()] = item.temp;\n        }\n        this.temp = frames;\n\n        /**\n             * This event is fired when timeupdate and animate.\n             * @event Scene#animate\n         * @param {object} param The object of data to be sent to an event.\n             * @param {number} param.currentTime The total time that the animator is running.\n             * @param {number} param.time The iteration time during duration that the animator is running.\n             * @param {object} param.frames frames of that time.\n         * @example\n    const scene = new Scene({\n      a: {\n        0: {\n          opacity: 0,\n        },\n        1: {\n          opacity: 1,\n        }\n      },\n      b: {\n        0: {\n          opacity: 0,\n        },\n        1: {\n          opacity: 1,\n        }\n      }\n    }).on(\"animate\", e => {\n      console.log(e);\n      // {a: Frame, b: Frame}\n      console.log(e.a.get(\"opacity\"));\n    });\n             */\n        this.trigger(\"animate\", {\n            frames,\n            currentTime: this.getTime(),\n            time: iterationTime,\n        });\n\n        return this;\n    }\n    /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Scene} An instance itself\n     */\n    public forEach(func: (item: Scene | SceneItem, name: string, items: IObject<Scene | SceneItem>) => void) {\n        const items = this.items;\n\n        for (const name in items) {\n            func(items[name], name, items);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition?: PlayCondition,\n        duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n        const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n        const styles: string[] = [];\n        const state = this.state;\n\n        state[DURATION] = this.getDuration();\n\n        this.forEach(item => {\n            styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n        });\n        return styles.join(\"\");\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {Scene} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]) {\n        const css = this.toCSS(playCondition, duration, parentStates);\n\n        (!parentStates || !parentStates.length) && exportCSS(getRealId(this), css);\n        return this;\n    }\n    public append(item: SceneItem | Scene) {\n        item.setDelay(item.getDelay() + this.getDuration());\n        this.setItem(getRealId(item), item);\n    }\n    public pauseCSS() {\n        return this.forEach(item => {\n            item.pauseCSS();\n        });\n    }\n    public pause() {\n        super.pause();\n\n        isPausedCSS(this) && this.pauseCSS();\n        this.forEach(item => {\n            item.pause();\n        });\n        return this;\n    }\n    public endCSS() {\n        const items = this.items;\n\n        for (const id in items) {\n            items[id].endCSS();\n        }\n        setPlayCSS(this, false);\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const items = this.items;\n        let animtionElement: AnimateElement;\n\n        for (const id in items) {\n            const el = items[id].addPlayClass(isPaused, playClassName, properties);\n\n            !animtionElement && (animtionElement = el);\n        }\n        return animtionElement;\n    }\n    /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @return {Scene} An instance itself\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n    scene.playCSS();\n    scene.playCSS(false, {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n    });\n    */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: Partial<AnimatorState> = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public set(properties: any, ...args: any[]): this;\n    public set(properties: any) {\n        this.load(properties);\n        return this;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        if (!properties) {\n            return this;\n        }\n        const isSelector = options && options[SELECTOR] || this.state[SELECTOR];\n\n        for (const name in properties) {\n            if (name === \"options\") {\n                continue;\n            }\n            const object = properties[name];\n            let item;\n\n            if (object instanceof Scene || object instanceof SceneItem) {\n                this.setItem(name, object);\n                item = object;\n            } else if (isFunction(object) && isSelector) {\n                const elements = IS_WINDOW ? $(name, true) as IArrayFormat<AnimateElement> : ([] as AnimateElement[]);\n                const length = elements.length;\n                const scene = new Scene();\n\n                for (let i = 0; i < length; ++i) {\n                    const id = makeId();\n\n                    scene.newItem(`${i}`, {\n                        id,\n                        selector: `[${DATA_SCENE_ID}=\"${id}\"]`,\n                        elements: elements[i],\n                    }).load(object(i, elements[i]));\n                }\n                this.setItem(name, scene);\n                continue;\n            } else {\n                item = this.newItem(name);\n                item.load(object);\n            }\n            isSelector && item.setSelector(name);\n        }\n        this.setOptions(options);\n    }\n    public setOptions(options: Partial<SceneState> = {}): this {\n        super.setOptions(options);\n\n        if (options.selector) {\n            this.state[SELECTOR] = true;\n        }\n        return this;\n    }\n    public setSelector(target: string | boolean) {\n        const state = this.state;\n        const isSelector = target || state[SELECTOR];\n\n        state[SELECTOR] = target;\n        this.forEach((item, name) => {\n            item.setSelector(isSelector ? name : false);\n        });\n    }\n    public start(delay: number) {\n        super.start(delay);\n        this.forEach(item => {\n            item.start(delay);\n        });\n    }\n}\n\nexport default Scene;\n","import SceneItem from \"./SceneItem\";\nimport { IObject } from \"@daybrush/utils\";\nimport { TRANSFORM_NAME } from \"./consts\";\nimport Scene from \"./Scene\";\nimport { SceneOptions, SceneItemOptions, AnimatorState, PresetState } from \"./types\";\n\n/**\n * @namespace presets\n */\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    return new SceneItem(properties, options).play();\n}\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @private\n * @param - property to set effect\n * @param - values of 100%\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nfunction set(property: string | string[], values: any[], options: Partial<AnimatorState>) {\n    const item = new SceneItem({}, options);\n    const length = values.length;\n\n    for (let i = 0; i < length; ++i) {\n        item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n    }\n    return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: Partial<PresetState>) {\n    return set([TRANSFORM_NAME, \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: Partial<PresetState>) {\n    return set([TRANSFORM_NAME, \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: Partial<PresetState>) {\n    return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: Partial<PresetState>) {\n    return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n    from,\n    to,\n    duration = item1.getDuration(),\n    time = Math.max(item1.getDuration() - duration, 0),\n}: { from: IObject<any>, to: IObject<any>, duration?: number, time?: number }) {\n    item1.set({\n        [time]: to,\n        [time + duration]: from,\n    });\n    item2.set({\n        0: from,\n        [duration]: to,\n    });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: Partial<PresetState>) {\n    return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: Partial<PresetState>) {\n    return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: Partial<PresetState>) {\n    return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n    (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["y1","y2","t","t2","x1","x2","func","x","dx","Math","abs","cubic","solveFromX","max","min","easingName","count","position","time","level","floor","STEP_START","steps","STEP_END","LINEAR","bezier","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","TRANSFORM_NAME","EASINGS","OPTIONS","EVENTS","RGB","RGBA","HSL","HSLA","COLOR_MODELS","FUNCTION","PROPERTY","ARRAY","OBJECT","STRING","NUMBER","UNDEFINED","IS_WINDOW","window","doc","document","prefixes","getCrossBrowserProperty","property","styles","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","isUndefined","value","isObject","isArray","Array","isString","isFunction","splitComma","text","matches","match","map","str","trim","splitBracket","exec","prefix","suffix","splitUnit","unit","NaN","parseFloat","camelize","all","letter","toUpperCase","decamelize","separator","letter2","toLowerCase","toArray","slice","call","now","Date","getTime","requestAnimationFrame","firstTime","raf","webkitRequestAnimationFrame","mozRequestAnimationFrame","bind","callback","currTime","setTimeout","hexToRGBA","hex","h","cutHex","r","parseInt","substring","g","b","a","isNaN","stringToRGBA","color","charAt","join","toFullHex","indexOf","arr","colorArr","hsl","s","l","rgb","c","m","round","hslToRGBA","$","selectors","multi","querySelectorAll","querySelector","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","addEvent","el","type","listener","options","addEventListener","removeEvent","removeEventListener","events","once","this","n","_on","forEach","_this","push","_i","args","off","callback2","callbacks","index","splice","data","target","currentTarget","apply","setOptions","split","newOptions","model","PropertyObject","v","clone","toValue","isPropertyObject","num","names","properties","roles","isCheckTrue","role","isInProperties","item","isActivate","state","isPaused","isEnded","id","css","styleId","toId","styleElement","innerText","insertAdjacentHTML","selector","random","getId","setId","makeId","isExportCSS","playClassName","getPlayState","isPausedCSS","addPlayClass","setTime","exportCSS","duration","getDuration","isZeroDuration","isFinite","animationend","setPlayCSS","finish","animationstart","trigger","animationiteration","elapsedTime","currentTime","iterationCount","setIteration","addAnimationEvent","setPlayState","defaultIndex","arrayToPropertyObject","values","toPropertyObject","splitSpace","afterModel","arrayToColorObject","obj","stringToBracketObject","result","stringToColorObject","iteration","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","tslib_1","curveArray","setDuration","setEasing","getActiveDuration","Infinity","toTime","animator","to","pause","tick","start","end","isTick","activeDuration","getUnitTime","calculate","isDelay","getIterationTime","toFixed","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","isReverse","isDirectionReverse","isFiniteDuration","Animator","getter","setter","parent","constructor","prototype","GetterSetter","EventTrigger","arrObj","merge","from","getType","getValue","set","raw","getPropertyName","getValueByNames","params","self","_set","isRole","object","size","get","toObject","isFixed","stylesLength","Frame","frame","frameProperties","cssObject","toInnerProperties","toCSSObject","cssArray","a1","a2","b1","b2","v1","dot","a1Type","color1","color2","value1","value2","model1","dotArray","colorModel","dotColor","type1","type2","isFunction1","isFunction2","dotObject","v2","dotNumber","times","Object","stack","isPureObject","concat","getNames","pop","updateFrame","entries","keytime","prevEntry","load","originalDuration","ratio_1","items_1","obj_1","time2","items","newFrame","elements","sceneId_1","setAttribute","realTime","this_1","innerValue","setFrame","SceneItem","getDelay","frames","hasFrame","frameTime","needUpdate","getFrame","removeFrame","unshiftTime","firstFrame","unshift","prepend","isStartZero","startTime","setElement","Element","targetFunc","attributes","cssText","toCSS","getComputedStyle","fromCSS","parentEasing","getEasing","getNowFrame","temp","addTime","update","isAccurate","left","right","realEasing","nameObject","hasName","nowEasing","getNowValue","prevNames","keyframes","setTarget","playCondition","parentDuration","states","itemState","reversedStates","reverse","getRealId","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","defalutValue","find","makeAnimationProperties","timingFunction","sel","selectorCallback","peusdo","_toKeyframes","pauseCSS","isEndedCSS","endCSS","playCSS","contains","hasClass","usePrevValue","nextTime","prevFrame","nextFrame","isUndefinedLeft","isUndefinedRight","indicies","getNearTimeIndex","has","prevValue","undefined","nextValue","ratio","dotValue","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","addEntry","getEntries","lastEntry","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","getItem","setItem","parentStates","totalDuration","animtionElement","isSelector","Scene","scene","newItem","setSelector","isProperty","isFixedProperty","fixed","alias","play","_b","_c","_d","item1","item2","others"],"mappings":"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"}