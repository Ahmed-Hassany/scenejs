{"version":3,"file":"scene.min.js","sources":["../src/consts.ts","../node_modules/@daybrush/utils/dist/utils.esm.js","../src/EventTrigger.ts","../src/easing.ts","../src/PropertyObject.ts","../src/utils.ts","../src/Animator.ts","../src/utils/property.ts","../src/Frame.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.umd.ts"],"sourcesContent":["import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType } from \"./types\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {} };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","/*\nCopyright (c) 2018 Daybrush\n@name: @daybrush/utils\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 0.7.0-rc\n*/\n/**\n* @namespace\n* @name Consts\n*/\n\n/**\n* get string \"rgb\"\n* @memberof Color\n* @example\nimport {RGB} from \"@daybrush/utils\";\n\nconsole.log(RGB); // \"rgb\"\n*/\nvar RGB = \"rgb\";\n/**\n* get string \"rgba\"\n* @memberof Color\n* @example\nimport {RGBA} from \"@daybrush/utils\";\n\nconsole.log(RGBA); // \"rgba\"\n*/\n\nvar RGBA = \"rgba\";\n/**\n* get string \"hsl\"\n* @memberof Color\n* @example\nimport {HSL} from \"@daybrush/utils\";\n\nconsole.log(HSL); // \"hsl\"\n*/\n\nvar HSL = \"hsl\";\n/**\n* get string \"hsla\"\n* @memberof Color\n* @example\nimport {HSLA} from \"@daybrush/utils\";\n\nconsole.log(HSLA); // \"hsla\"\n*/\n\nvar HSLA = \"hsla\";\n/**\n* gets an array of color models.\n* @memberof Color\n* @example\nimport {COLOR_MODELS} from \"@daybrush/utils\";\n\nconsole.log(COLOR_MODELS); // [\"rgb\", \"rgba\", \"hsl\", \"hsla\"];\n*/\n\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* get string \"function\"\n* @memberof Consts\n* @example\nimport {FUNCTION} from \"@daybrush/utils\";\n\nconsole.log(FUNCTION); // \"function\"\n*/\n\nvar FUNCTION = \"function\";\n/**\n* get string \"property\"\n* @memberof Consts\n* @example\nimport {PROPERTY} from \"@daybrush/utils\";\n\nconsole.log(PROPERTY); // \"property\"\n*/\n\nvar PROPERTY = \"property\";\n/**\n* get string \"array\"\n* @memberof Consts\n* @example\nimport {ARRAY} from \"@daybrush/utils\";\n\nconsole.log(ARRAY); // \"array\"\n*/\n\nvar ARRAY = \"array\";\n/**\n* get string \"object\"\n* @memberof Consts\n* @example\nimport {OBJECT} from \"@daybrush/utils\";\n\nconsole.log(OBJECT); // \"object\"\n*/\n\nvar OBJECT = \"object\";\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\n\nvar STRING = \"string\";\n/**\n* get string \"number\"\n* @memberof Consts\n* @example\nimport {NUMBER} from \"@daybrush/utils\";\n\nconsole.log(NUMBER); // \"number\"\n*/\n\nvar NUMBER = \"number\";\n/**\n* get string \"undefined\"\n* @memberof Consts\n* @example\nimport {UNDEFINED} from \"@daybrush/utils\";\n\nconsole.log(UNDEFINED); // \"undefined\"\n*/\n\nvar UNDEFINED = \"undefined\";\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar IS_WINDOW = typeof window !== UNDEFINED;\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @name document\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar doc = typeof document !== UNDEFINED && document;\nvar prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n/**\n * @namespace CrossBrowser\n */\n\n/**\n* Get a CSS property with a vendor prefix that supports cross browser.\n* @function\n* @param {string} property - A CSS property\n* @return {string} CSS property with cross-browser vendor prefix\n* @memberof CrossBrowser\n* @example\nimport {getCrossBrowserProperty} from \"@daybrush/utils\";\n\nconsole.log(getCrossBrowserProperty(\"transform\")); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\nconsole.log(getCrossBrowserProperty(\"filter\")); // \"filter\", \"-webkit-filter\"\n*/\n\nvar getCrossBrowserProperty =\n/*#__PURE__*/\nfunction (property) {\n  if (!doc) {\n    return \"\";\n  }\n\n  var styles = (doc.body || doc.documentElement).style;\n  var length = prefixes.length;\n\n  if (typeof styles[property] !== UNDEFINED) {\n    return property;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n\n    if (typeof styles[name] !== UNDEFINED) {\n      return name;\n    }\n  }\n\n  return \"\";\n};\n/**\n* get string \"transfrom\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {TRANSFORM} from \"@daybrush/utils\";\n\nconsole.log(TRANSFORM); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\n*/\n\nvar TRANSFORM =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"transform\");\n/**\n* get string \"filter\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {FILTER} from \"@daybrush/utils\";\n\nconsole.log(FILTER); // \"filter\", \"-ms-filter\", \"-webkit-filter\"\n*/\n\nvar FILTER =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"filter\");\n/**\n* get string \"animation\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {ANIMATION} from \"@daybrush/utils\";\n\nconsole.log(ANIMATION); // \"animation\", \"-ms-animation\", \"-webkit-animation\"\n*/\n\nvar ANIMATION =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"animation\");\n/**\n* get string \"keyframes\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {KEYFRAMES} from \"@daybrush/utils\";\n\nconsole.log(KEYFRAMES); // \"keyframes\", \"-ms-keyframes\", \"-webkit-keyframes\"\n*/\n\nvar KEYFRAMES =\n/*#__PURE__*/\nANIMATION.replace(\"animation\", \"keyframes\");\n\n/**\n* @namespace\n* @name Utils\n*/\n\n/**\n* Check the type that the value is undefined.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isUndefined} from \"@daybrush/utils\";\n\nconsole.log(isUndefined(undefined)); // true\nconsole.log(isUndefined(\"\")); // false\nconsole.log(isUndefined(1)); // false\nconsole.log(isUndefined(null)); // false\n*/\n\nfunction isUndefined(value) {\n  return typeof value === UNDEFINED;\n}\n/**\n* Check the type that the value is object.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isObject} from \"@daybrush/utils\";\n\nconsole.log(isObject({})); // true\nconsole.log(isObject(undefined)); // false\nconsole.log(isObject(\"\")); // false\nconsole.log(isObject(null)); // false\n*/\n\nfunction isObject(value) {\n  return value && typeof value === OBJECT;\n}\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\n\nfunction isString(value) {\n  return typeof value === STRING;\n}\n/**\n* Check the type that the value is function.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isFunction} from \"@daybrush/utils\";\n\nconsole.log(isFunction(function a() {})); // true\nconsole.log(isFunction(() => {})); // true\nconsole.log(isFunction(\"1234\")); // false\nconsole.log(isFunction(1)); // false\nconsole.log(isFunction(null)); // false\n*/\n\nfunction isFunction(value) {\n  return typeof value === FUNCTION;\n}\n/**\n* divide text by space.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {spliceSpace} from \"@daybrush/utils\";\n\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitSpace(text) {\n  // divide comma(,)\n  var matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {splitComma} from \"@daybrush/utils\";\n\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  var matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n  return matches ? matches.map(function (str) {\n    return str.trim();\n  }) : [];\n}\n/**\n* divide text by bracket \"(\", \")\".\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitBracket} from \"@daybrush/utils\";\n\nconsole.log(splitBracket(\"a(1, 2)\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"\"}\nconsole.log(splitBracket(\"a(1, 2)b\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"b\"}\n*/\n\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\n/**\n* divide text by number and unit.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {} divided texts\n* @example\nimport {splitUnit} from \"@daybrush/utils\";\n\nconsole.log(splitUnit(\"10px\"));\n// {prefix: \"\", value: 10, unit: \"px\"}\nconsole.log(splitUnit(\"-10px\"));\n// {prefix: \"\", value: -10, unit: \"px\"}\nconsole.log(splitUnit(\"a10%\"));\n// {prefix: \"a\", value: 10, unit: \"%\"}\n*/\n\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\n/**\n* transform strings to camel-case\n* @memberof Utils\n* @param {String} text - string\n* @return {String} camel-case string\n* @example\nimport {camelize} from \"@daybrush/utils\";\n\nconsole.log(camelize(\"transform-origin\")); // transformOrigin\nconsole.log(camelize(\"abcd_efg\")); // abcdEfg\nconsole.log(camelize(\"abcd efg\")); // abcdEfg\n*/\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n* transform a camelized string into a lowercased string.\n* @memberof Utils\n* @param {string} text - a camel-cased string\n* @param {string} [separator=\"-\"] - a separator\n* @return {string}  a lowercased string\n* @example\nimport {decamelize} from \"@daybrush/utils\";\n\nconsole.log(decamelize(\"transformOrigin\")); // transform-origin\nconsole.log(decamelize(\"abcdEfg\", \"_\")); // abcd_efg\n*/\n\nfunction decamelize(str, separator) {\n  if (separator === void 0) {\n    separator = \"-\";\n  }\n\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return \"\" + letter + separator + letter2.toLowerCase();\n  });\n}\n/**\n* transforms something in an array into an array.\n* @memberof Utils\n* @param - Array form\n* @return an array\n* @example\nimport {toArray} from \"@daybrush/utils\";\n\nconst arr1 = toArray(document.querySelectorAll(\".a\")); // Element[]\nconst arr2 = toArray(document.querySelectorAll<HTMLElement>(\".a\")); // HTMLElement[]\n*/\n\nfunction toArray(value) {\n  return [].slice.call(value);\n}\n/**\n* Date.now() method\n* @memberof CrossBrowser\n* @return {number} milliseconds\n* @example\nimport {now} from \"@daybrush/utils\";\n\nconsole.log(now()); // 12121324241(milliseconds)\n*/\n\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\n/**\n* window.requestAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {FrameRequestCallback} callback - The function to call when it's time to update your animation for the next repaint.\n* @return {number} id\n* @example\nimport {requestAnimationFrame} from \"@daybrush/utils\";\n\nrequestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n*/\n\nvar requestAnimationFrame =\n/*#__PURE__*/\nfunction () {\n  var firstTime = now();\n  var raf = IS_WINDOW && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame);\n  return raf ? raf.bind(window) : function (callback) {\n    var currTime = now();\n    var id = window.setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n\n/**\n* @namespace\n* @name Color\n*/\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} hex color\n* @example\nimport {cutHex} from \"@daybrush/utils\";\n\nconsole.log(cutHex(\"#000000\")) // \"000000\"\n*/\n\nfunction cutHex(hex) {\n  return hex.replace(\"#\", \"\");\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} rgb color\n* @example\nimport {hexToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hexToRGBA(\"#00000005\"));\n// [0, 0, 0, 1]\nconsole.log(hexToRGBA(\"#201045\"));\n// [32, 16, 69, 1]\n*/\n\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n\n  return [r, g, b, a];\n}\n/**\n* convert 3(or 4)-digit hex color to 6(or 8)-digit hex color.\n* @memberof Color\n* @param {} hex - 3(or 4)-digit hex color\n* @return {} 6(or 8)-digit hex color\n* @example\nimport {toFullHex} from \"@daybrush/utils\";\n\nconsole.log(toFullHex(\"#123\")); // \"#112233\"\nconsole.log(toFullHex(\"#123a\")); // \"#112233aa\"\n*/\n\nfunction toFullHex(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var a = h.charAt(4);\n  var arr = [\"#\", r, r, g, g, b, b, a, a];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgba color.\n* @memberof Color\n* @param {} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {} rgba color\n* @example\nimport {hslToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hslToRGBA([150, 0.5, 0.4]));\n// [51, 153, 102, 1]\n*/\n\nfunction hslToRGBA(hsl) {\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n\n  var result = [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), hsl.length > 3 ? hsl[3] : 1];\n  return result;\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {} - 3-hex(#000), 4-hex(#0000) 6-hex(#000000), 8-hex(#00000000) or RGB(A), or HSL(A)\n* @return {} rgba color\n* @example\nimport {stringToRGBA} from \"@daybrush/utils\";\n\nconsole.log(stringToRGBA(\"#000000\")); // [0, 0, 0, 1]\nconsole.log(stringToRGBA(\"rgb(100, 100, 100)\")); // [100, 100, 100, 1]\nconsole.log(stringToRGBA(\"hsl(150, 0.5, 0.4)\")); // [51, 153, 102, 1]\n*/\n\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4 || color.length === 5) {\n      return hexToRGBA(toFullHex(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n        prefix = _a.prefix,\n        value = _a.value;\n\n    if (!prefix || !value) {\n      return;\n    }\n\n    var arr = splitComma(value);\n    var colorArr = [];\n    var length = arr.length;\n\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n\n        return colorArr;\n\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        } // hsl, hsla to rgba\n\n\n        return hslToRGBA(colorArr);\n    }\n  }\n\n  return;\n}\n\n/**\n * Returns all element descendants of node that\n * match selectors.\n */\n\n/**\n * Checks if the specified class value exists in the element's class attribute.\n * @memberof DOM\n * @param - A DOMString containing one or more selectors to match\n * @param - If multi is true, a DOMString containing one or more selectors to match against.\n * @example\nimport {$} from \"@daybrush/utils\";\n\nconsole.log($(\"div\")); // div element\nconsole.log($(\"div\", true)); // [div, div] elements\n*/\n\nfunction $(selectors, multi) {\n  return multi ? doc.querySelectorAll(selectors) : doc.querySelector(selectors);\n}\n/**\n* Checks if the specified class value exists in the element's class attribute.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to search\n* @return {boolean} return false if the class is not found.\n* @example\nimport {hasClass} from \"@daybrush/utils\";\n\nconsole.log(hasClass(element, \"start\")); // true or false\n*/\n\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\n/**\n* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to add\n* @example\nimport {addClass} from \"@daybrush/utils\";\n\naddClass(element, \"start\");\n*/\n\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\n/**\n* Removes the specified class value.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to remove\n* @example\nimport {removeClass} from \"@daybrush/utils\";\n\nremoveClass(element, \"start\");\n*/\n\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n/**\n* Gets the CSS properties from the element.\n* @memberof DOM\n* @param elements - elements\n* @param properites - the CSS properties\n* @return returns CSS properties and values.\n* @example\nimport {fromCSS} from \"@daybrush/utils\";\n\nconsole.log(fromCSS(element, [\"left\", \"opacity\", \"top\"])); // {\"left\": \"10px\", \"opacity\": 1, \"top\": \"10px\"}\n*/\n\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n\n  var element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n\n  var cssObject = {};\n  var styles = window.getComputedStyle(element);\n  var length = properties.length;\n\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n\n  return cssObject;\n}\n/**\n* Sets up a function that will be called whenever the specified event is delivered to the target\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs\n* @param - An options object that specifies characteristics about the event listener. The available options are:\n* @example\nimport {addEvent} from \"@daybrush/utils\";\n\naddEvent(el, \"click\", e => {\n  console.log(e);\n});\n*/\n\nfunction addEvent(el, type, listener, options) {\n  el.addEventListener(type, listener, options);\n}\n/**\n* removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The EventListener function of the event handler to remove from the event target.\n* @example\nimport {addEvent, removeEvent} from \"@daybrush/utils\";\nconst listener = e => {\n  console.log(e);\n};\naddEvent(el, \"click\", listener);\nremoveEvent(el, \"click\", listener);\n*/\n\nfunction removeEvent(el, type, listener) {\n  el.removeEventListener(type, listener);\n}\n\nexport { RGB, RGBA, HSL, HSLA, COLOR_MODELS, FUNCTION, PROPERTY, ARRAY, OBJECT, STRING, NUMBER, UNDEFINED, IS_WINDOW, doc as document, getCrossBrowserProperty, TRANSFORM, FILTER, ANIMATION, KEYFRAMES, cutHex, hexToRGBA, toFullHex, hslToRGBA, stringToRGBA, isUndefined, isObject, isArray, isString, isFunction, splitSpace, splitComma, splitBracket, splitUnit, camelize, decamelize, toArray, now, requestAnimationFrame, $, hasClass, addClass, removeClass, fromCSS, addEvent, removeEvent };\n//# sourceMappingURL=utils.esm.js.map\n","import { isObject, isArray } from \"@daybrush/utils\";\nimport { CallbackType, EventParameter } from \"./types\";\n\n/**\n* attach and trigger event handlers.\n*/\nclass EventTrigger {\n  public events: { [name: string]: CallbackType[] };\n  /**\n\t* @example\nconst et = new Scene.EventTrigger();\nconst scene = new Scene();\n\nscene.on(\"call\", e => {\n\tconsole.log(e.param);\n});\net.on(\"call\", e => {\n\tconsole.log(e.param);\n});\nscene.trigger(\"call\", {param: 1});\net.trigger(\"call\", {param: 1});\n\t */\n  constructor() {\n    this.events = {};\n  }\n  public _on(name: string | EventParameter, callback?: CallbackType | CallbackType[], once?: boolean) {\n    const events = this.events;\n\n    if (isObject(name)) {\n      for (const n in name) {\n        this._on(n, name[n], once);\n      }\n      return;\n    }\n    if (!(name in events)) {\n      events[name] = [];\n    }\n    if (!callback) {\n      return;\n    }\n    if (isArray(callback)) {\n      callback.forEach(func => this._on(name, func, once));\n      return;\n    }\n    const event = events[name];\n    event.push(once ? function callback2(...args) {\n      callback(...args);\n      this.off(name, callback2);\n    } : callback);\n  }\n  /**\n\t* Attach an event handler function for one or more events to target\n\t* @param - event's name\n\t* @param - function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function() {\n\tconsole.log(\"animate\");\n});\n\ntarget.trigger(\"animate\");\n\n  */\n  public on(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n    this._on(name, callback);\n    return this;\n  }\n  /**\n\t* Dettach an event handler function for one or more events to target\n\t* @param - event's name\n\t* @param -  function to execute when the event is triggered.\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\nconst callback = function() {\n\tconsole.log(\"animate\");\n};\ntarget.on(\"animate\", callback);\n\ntarget.off(\"animate\", callback);\ntarget.off(\"animate\");\n\n\t*/\n  public off(name?: string, callback?: CallbackType) {\n    if (!name) {\n      this.events = {};\n    } else if (!callback) {\n      this.events[name] = [];\n    } else {\n      const callbacks = this.events[name];\n\n      if (!callbacks) {\n        return this;\n      }\n      const index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  /**\n\t* execute event handler\n\t* @param - event's name\n\t* @param - event handler's additional parameter\n\t* @return {EventTrigger} An Instance itself.\n\t* @example\ntarget.on(\"animate\", function(a1, a2) {\n\tconsole.log(\"animate\", a1, a2);\n});\n\ntarget.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n\t*/\n  public trigger(name: string, ...data: any[]) {\n    const events = this.events;\n\n    if (!(name in events)) {\n      return this;\n    }\n\n    const args = data || [];\n\n    !args[0] && (args[0] = {});\n    const event = events[name];\n    const target = args[0];\n\n    target.type = name;\n    target.currentTarget = this;\n    !target.target && (target.target = this);\n    event.forEach(callback => {\n      callback.apply(this, data);\n    });\n\n    return this;\n  }\n  public once(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n    this._on(name, callback, true);\n    return this;\n  }\n}\nexport default EventTrigger;\n","import { IEasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: IEasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: IEasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\n\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n  public value: any[];\n  public prefix: string  = \"\";\n  public suffix: string = \"\";\n  public model: string = \"\";\n  public type: string = \"\";\n  public separator: string = \",\";\n\n  /**\n\t* @param - This value is in the array format.\n\t* @param - options\n\t* @example\nvar obj = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\t */\n  constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n    options && this.setOptions(options);\n    this.value = isString(value) ? value.split(this.separator) : value;\n  }\n  public setOptions(newOptions: Partial<PropertyObjectState>) {\n    for (const name in newOptions) {\n      this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n    }\n    return this;\n  }\n  /**\n\t* the number of values.\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.length);\n// 3\n\t */\n  public size() {\n    return this.value.length;\n  }\n  /**\n\t* retrieve one of values at the index\n\t* @param {Number} index - index\n\t* @return {Object} one of values at the index\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\n\nconsole.log(obj1.get(0));\n// 1\n\t */\n  public get(index: number) {\n    return this.value[index];\n  }\n  /**\n\t* Set the value at that index\n\t* @param {Number} index - index\n\t* @param {Object} value - text, a number, object to set\n\t* @return {PropertyObject} An instance itself\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nobj1.set(0, 2);\nconsole.log(obj1.toValue());\n// 2,2,3\n\t */\n  public set(index: number, value: any) {\n    this.value[index] = value;\n    return this;\n  }\n  /**\n\t* create a copy of an instance itself.\n\t* @return {PropertyObject} clone\n\t* @example\nconst obj1 = new PropertyObject(\"1,2,3\", \",\");\nconst obj2 = obj1.clone();\n\t */\n  public clone(): PropertyObject {\n    const {\n      separator,\n      prefix,\n      suffix,\n      model,\n      type,\n    } = this;\n    const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n    return new PropertyObject(arr, {\n      separator,\n      prefix,\n      suffix,\n      model,\n      type,\n    });\n  }\n  /**\n\t* Make Property Object to String\n\t* @return {String} Make Property Object to String\n\t* @example\n//rgba(100, 100, 100, 0.5)\nconst obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\",\n});\nconsole.log(obj4.toValue());\n// \"rgba(100,100,100,0.5)\"\n\t*/\n  public toValue(): string {\n    return this.prefix + this.join() + this.suffix;\n  }\n  /**\n\t* Make Property Object's array to String\n\t* @return {String} Join the elements of an array into a string\n\t* @example\n\t//rgba(100, 100, 100, 0.5)\n\tvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\t\"separator\" : \",\",\n\t\t\"prefix\" : \"rgba(\",\n\t\t\"suffix\" : \")\"\n\t});\n\tobj4.join();  // =>   \"100,100,100,0.5\"\n\t */\n  public join() {\n    return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.separator);\n  }\n  /**\n\t* executes a provided function once per array element.\n\t* @param {Function} callback - Function to execute for each element, taking three arguments\n\t* @param {All} [callback.currentValue] The current element being processed in the array.\n\t* @param {Number} [callback.index] The index of the current element being processed in the array.\n\t* @param {Array} [callback.array] the array.\n\t* @return {PropertyObject} An instance itself\n\t* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n\t* @example\n//rgba(100, 100, 100, 0.5)\nvar obj4 = new PropertyObject([100,100,100,0.5], {\n\t\"separator\" : \",\",\n\t\"prefix\" : \"rgba(\",\n\t\"suffix\" : \")\"\n});\n\nobj4.forEach(t => {\n\tconsole.log(t);\n});  // =>   \"100,100,100,0.5\"\n\t*/\n  public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n    this.value.forEach(func);\n    return this;\n  }\n}\nexport default PropertyObject;\n","import { ROLES, MAXIMUM, FIXED, ALIAS,\n  PAUSED, RUNNING, PLAY, ENDED, PREFIX, PLAY_CSS, CURRENT_TIME } from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n  isArray, ANIMATION, ARRAY, OBJECT,\n  PROPERTY, STRING, NUMBER, IS_WINDOW, IObject, $, document, isObject, addEvent, removeEvent,\n} from \"@daybrush/utils\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n  return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n  ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n  const length = names.length;\n  let roles: any = ROLES;\n  let fixed: any = FIXED;\n\n  for (let i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n  const type = typeof value;\n\n  if (type === OBJECT) {\n    if (isArray(value)) {\n      return ARRAY;\n    } else if (isPropertyObject(value)) {\n      return PROPERTY;\n    }\n  } else if (type === STRING || type === NUMBER) {\n    return \"value\";\n  }\n  return type;\n}\nexport function toFixed(num: number) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(names: Array<string | number>,\n                                properties: IObject<any>, length: number = names.length) {\n  let value = properties;\n\n  for (let i = 0; i < length; ++i) {\n    if (!isObject(value)) {\n      return undefined;\n    }\n    value = value[names[i]];\n  }\n  return value;\n}\nexport function isInProperties(roles: IObject<any>, args: string[], isCheckTrue?: boolean) {\n  const length = args.length;\n  let role: any = roles;\n\n  if (length === 0) {\n    return false;\n  }\n  for (let i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || (!isCheckTrue && role === true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isRole(args: string[], isCheckTrue?: boolean) {\n  return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: string[]) {\n  return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n  currentTime: number;\n  iterationCount: number;\n  elapsedTime: number;\n}\nexport function setPlayCSS(item: Scene | SceneItem, isActivate: boolean) {\n  item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n  return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n  return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function exportCSS(id: number | string, css: string) {\n  const styleId = `${PREFIX}STYLE_${toId(id)}`;\n  const styleElement: HTMLElement = $(`#${styleId}`);\n\n  if (styleElement) {\n    styleElement.innerText = css;\n  } else {\n    document.body.insertAdjacentHTML(\"beforeend\",\n      `<style id=\"${styleId}\">${css}</style>`);\n  }\n}\nexport function makeId(selector?: boolean) {\n  for (; ;) {\n    const id = `${Math.floor(Math.random() * 10000000)}`;\n\n    if (!IS_WINDOW || !selector) {\n      return id;\n    }\n    const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nexport function getRealId(item: Scene | SceneItem) {\n  return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n  return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(item: Scene | SceneItem, isExportCSS: boolean, properties = {}) {\n  if (!ANIMATION || item.getPlayState() === RUNNING) {\n    return;\n  }\n  if (isPausedCSS(item)) {\n    item.addPlayClass(true, properties);\n  } else {\n    if (item.isEnded()) {\n      item.setTime(0);\n    }\n    isExportCSS && item.exportCSS();\n    const el = item.addPlayClass(false, properties);\n\n    if (!el) {\n      return;\n    }\n    addAnimationEvent(item, el);\n    setPlayCSS(item, true);\n  }\n  item.setPlayState(RUNNING);\n}\nexport function findIndex<T>(arr: T[], callback: (element: T) => any, defaultIndex: number = -1): number {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i])) {\n      return i;\n    }\n  }\n  return defaultIndex;\n}\nexport function find<T>(arr: T[], callback: (element: T) => any, defalutValue?: T): T | undefined {\n  const index = findIndex(arr, callback);\n\n  return index > - 1 ? arr[index] : defalutValue;\n}\nexport function addAnimationEvent(item: Scene | SceneItem, el: Element) {\n  const duration = item.getDuration();\n  const isZeroDuration = !duration || !isFinite(duration);\n  const state = item.state;\n  const animationend = () => {\n    if (!isZeroDuration) {\n      setPlayCSS(item, false);\n      item.finish();\n    }\n  };\n  const animationstart = () => {\n    item.trigger(PLAY);\n  };\n  item.on(ENDED, () => {\n    removeEvent(el, \"animationend\", animationend);\n    removeEvent(el, \"animationiteration\", animationiteration);\n    removeEvent(el, \"animationstart\", animationstart);\n  });\n  const animationiteration = ({elapsedTime}: any) => {\n    const currentTime = elapsedTime;\n    const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n    state[CURRENT_TIME] = currentTime;\n    item.setIteration(iterationCount);\n  };\n  addEvent(el, \"animationend\", animationend);\n  addEvent(el, \"animationiteration\", animationiteration);\n  addEvent(el, \"animationstart\", animationstart);\n}\n","import {\n  THRESHOLD,\n  ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n  ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n  DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n  RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS\n} from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier } from \"./easing\";\nimport { toFixed, makeId } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame, isArray } from \"@daybrush/utils\";\nimport { IterationCountType, DirectionType, AnimatorState, IEasingFunction, FillModeType, PlayStateType, EasingType } from \"./types\";\n\nfunction GetterSetter<T extends { new(...args: any[]): {} }>(\n  getter: string[], setter: string[], parent: string) {\n  return (constructor: T) => {\n    const prototype = constructor.prototype;\n\n    getter.forEach(name => {\n      prototype[camelize(`get ${name}`)] = function() {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(name => {\n      prototype[camelize(`set ${name}`)] = function(value: any) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\nfunction tick(animator: Animator, now: number, to?: number) {\n  if (animator.isPaused()) {\n    return;\n  }\n  const state = animator.state;\n  const playSpeed = state[PLAY_SPEED];\n  const prevTime = state[PREV_TIME];\n  const delay = state[DELAY];\n  const tickTime = state[TICK_TIME];\n  const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n  state[PREV_TIME] = now;\n  animator.setTime(currentTime - delay, true);\n  if (to && to * 1000 < now) {\n    animator.pause();\n  }\n  if (state[PLAY_STATE] === PAUSED) {\n    return;\n  }\n\n  requestAnimationFrame((time: number) => {\n    tick(animator, time, to);\n  });\n}\n\n\nexport function isDirectionReverse(iteration: number,\n                                   iteraiontCount: IterationCountType, direction: DirectionType) {\n  if (direction === REVERSE) {\n    return true;\n  } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n    return  direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n  }\n  return  direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nconst setters = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n  DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n/**\n* play video, animation, the others\n* @extends EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n*/\n@GetterSetter(getters, setters, \"state\")\nclass Animator<T extends AnimatorState = AnimatorState> extends EventTrigger {\n  public state: T;\n\n  /**\n   * @param - animator's options\n   * @example\nconst animator = new Animator({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n   */\n  constructor(options?: Partial<T>) {\n    super();\n    this.state = {\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      iteration: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0,\n    } as T;\n    this.setOptions(options);\n  }\n  /**\n\t* set animator's easing.\n\t* @param curverArray - The speed curve of an animation.\n\t* @return {Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.easing.EASE,\n});\n\t*/\n  public setEasing(curveArray: [number, number, number, number] | IEasingFunction): this {\n    const easing = isArray(curveArray) ?\n      bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]) : curveArray;\n    const easingName = easing[EASING_NAME] || \"linear\";\n\n    const state = this.state;\n\n    state[EASING] = easing;\n    state[EASING_NAME] = easingName;\n    return this;\n  }\n  /**\n\t* set animator's options.\n\t* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n\t* @param - animator's options\n\t* @return {Animator} An instance itself.\n\t* @example\nanimator.({\n\tdelay: 2,\n\tdiretion: \"alternate\",\n\tduration: 2,\n\tfillMode: \"forwards\",\n\titerationCount: 3,\n\teasing: Scene.eaasing.EASE,\n});\n\t*/\n  public setOptions(options: Partial<AnimatorState> = {}): this {\n    for (const name in options) {\n      const value = options[name];\n\n      if (name === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      if (OPTIONS.indexOf(name as any) > -1) {\n        this.state[name] = value;\n      }\n    }\n\n    return this;\n  }\n  /**\n\t* Get the animator's total duration including delay\n\t* @return {number} Total duration\n\t* @example\nanimator.getTotalDuration();\n\t*/\n  public getTotalDuration(): number {\n    return this.getActiveDuration(true);\n  }\n  /**\n\t* Get the animator's total duration excluding delay\n\t* @return {number} Total duration excluding delay\n\t* @example\nanimator.getActiveDuration();\n\t*/\n  public getActiveDuration(delay?: boolean): number {\n    const state = this.state;\n    const count = state[ITERATION_COUNT];\n    if (count === INFINITE) {\n      return Infinity;\n    }\n    return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n  }\n  /**\n\t* Check if the animator has reached the end.\n\t* @return {boolean} ended\n\t* @example\nanimator.isEnded(); // true or false\n\t*/\n  public isEnded(): boolean {\n    if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  }\n  /**\n\t*Check if the animator is paused:\n\t* @return {boolean} paused\n\t* @example\nanimator.isPaused(); // true or false\n\t*/\n  public isPaused(): boolean {\n    return this.state[PLAY_STATE] === PAUSED;\n  }\n  public start(delay: number = this.state[DELAY]): void {\n    const state = this.state;\n\n    state[PLAY_STATE] = RUNNING;\n    if (state[TICK_TIME] >= delay) {\n      /**\n       * This event is fired when play animator.\n       * @event Animator#play\n       */\n      this.trigger(PLAY);\n    }\n  }\n  /**\n\t* play animator\n\t* @return {Animator} An instance itself.\n\t*/\n  public play(toTime?: number) {\n    const state = this.state;\n    const delay = state[DELAY];\n    const currentTime = this.getTime();\n\n    state[PLAY_STATE] = RUNNING;\n\n    if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n      this.setTime(-delay, true);\n    }\n    state[TICK_TIME] = this.getTime();\n\n    requestAnimationFrame((time: number) => {\n      state[PREV_TIME] = time;\n      tick(this, time, toTime);\n    });\n    this.start();\n    return this;\n  }\n  /**\n\t* pause animator\n\t* @return {Animator} An instance itself.\n\t*/\n  public pause(): this {\n    const state = this.state;\n\n    if (state[PLAY_STATE] !== PAUSED) {\n      state[PLAY_STATE] = PAUSED;\n      /**\n       * This event is fired when animator is paused.\n       * @event Animator#paused\n       */\n      this.trigger(PAUSED);\n    }\n    return this;\n  }\n  /**\n\t * end animator\n\t * @return {Animator} An instance itself.\n\t*/\n  public finish() {\n    this.setTime(0);\n    this.state[TICK_TIME] = 0;\n    this.end();\n    return this;\n  }\n  /**\n\t * end animator\n\t * @return {Animator} An instance itself.\n\t*/\n  public end() {\n    this.pause();\n    /**\n\t\t * This event is fired when animator is ended.\n\t\t * @event Animator#ended\n\t\t */\n    this.trigger(ENDED);\n    return this;\n  }\n  /**\n\t* set currentTime\n\t* @param {Number|String} time - currentTime\n\t* @return {Animator} An instance itself.\n\t* @example\n\nanimator.setTime(\"from\"); // 0\nanimator.setTime(\"to\"); // 100%\nanimator.setTime(\"50%\");\nanimator.setTime(10);\nanimator.getTime() // 10\n\t*/\n  public setTime(time: number | string, isTick?: boolean) {\n    const activeDuration = this.getActiveDuration();\n    const state = this.state;\n    const prevTime = state[TICK_TIME];\n    const delay = state[DELAY];\n    let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n    state[TICK_TIME] = delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    state[CURRENT_TIME] = currentTime;\n    this.calculate();\n\n    if (isTick) {\n      const tickTime = state[TICK_TIME];\n\n      if (prevTime < delay && time >= 0 ||\n          state[PLAY_STATE] !== RUNNING && tickTime >= delay && !this.isEnded()) {\n        this.start(0);\n      }\n      if (tickTime < prevTime || this.isEnded()) {\n        this.end();\n        return;\n      }\n    }\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n\t\t * This event is fired when the animator updates the time.\n\t\t * @event Animator#timeupdate\n\t\t * @param {Object} param The object of data to be sent to an event.\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t */\n    this.trigger(TIMEUPDATE, {\n      currentTime,\n      time: this.getIterationTime(),\n      iterationCount: state[ITERATION],\n    });\n\n    return this;\n  }\n  /**\n\t* Get the animator's current time\n\t* @return {number} current time\n\t* @example\nanimator.getTime();\n\t*/\n  public getTime(): number {\n    return this.state[CURRENT_TIME];\n  }\n  public getUnitTime(time: string | number) {\n    if (isString(time)) {\n      const duration = this.getDuration() || 100;\n\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      const { unit, value } = splitUnit(time);\n\n      if (unit === \"%\") {\n        !this.getDuration() && (this.state[DURATION] = duration);\n        return toFixed(parseFloat(time) / 100 * duration);\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  }\n  /**\n\t * Check if the current state of animator is delayed.\n\t * @return {boolean} check delay state\n\t */\n  public isDelay() {\n    const state = this.state;\n    const delay = state[DELAY];\n    const tickTime = state[TICK_TIME];\n\n    return delay > 0 && (tickTime < delay);\n  }\n  public setIteration(iterationCount: number): this {\n    const state = this.state;\n    const passIterationCount = Math.floor(iterationCount);\n    const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n    if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n      /**\n\t\t\t* The event is fired when an iteration of an animation ends.\n\t\t\t* @event Animator#iteration\n\t\t\t* @param {Object} param The object of data to be sent to an event.\n\t\t\t* @param {Number} param.currentTime The total time that the animator is running.\n\t\t\t* @param {Number} param.iterationCount The iteration count that the animator is running.\n\t\t\t*/\n      this.trigger(\"iteration\", {\n        currentTime: state[CURRENT_TIME],\n        iterationCount: passIterationCount,\n      });\n    }\n    state[ITERATION] = iterationCount;\n    return this;\n  }\n  protected calculate() {\n    const state = this.state;\n    const iterationCount = state[ITERATION_COUNT];\n    const fillMode = state[FILL_MODE];\n    const direction = state[DIRECTION];\n    const duration = this.getDuration();\n    const time = this.getTime();\n    const iteration = duration === 0 ? 0 : time / duration;\n    let currentIterationTime = duration ? time % duration : 0;\n\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setIteration(iteration);\n\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n    const isFiniteDuration = isFinite(duration);\n    if (isFiniteDuration && isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (isFiniteDuration && iterationCount !== INFINITE) {\n      const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n      // fill forwards\n      if (iteration >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator<T extends AnimatorState> {\n  setId(id: number | string): this;\n  getId(): number | string;\n  getIterationTime(): number;\n  setIterationTime(time: number): this;\n  setDelay(delay: number): this;\n  getDelay(): number;\n  setFillMode(fillMode: FillModeType): this;\n  getFillMode(): FillModeType;\n  setIterationCount(iterationCount: IterationCountType): this;\n  getIterationCount(): IterationCountType;\n  setDirection(direction: DirectionType): this;\n  getDirection(): DirectionType;\n  setPlayState(playState: PlayStateType): this;\n  getPlayState(): PlayStateType;\n  setPlaySpeed(playSpeed: number): this;\n  getPlaySpeed(): number;\n  setDuration(duration: number): this;\n  getDuration(): number;\n  getEasing(): EasingType;\n  getEasingName(): string;\n}\nexport default Animator;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n  COLOR_MODELS, isString,\n  splitComma, splitSpace, stringToRGBA,\n  RGBA, splitBracket, IObject, isArray\n} from \"@daybrush/utils\";\n\nexport function splitStyle(str: string) {\n  const properties = str.split(\";\");\n  const obj: IObject<string | PropertyObject> = {};\n  let length = properties.length;\n\n  for (let i = 0; i < length; ++i) {\n    const matches = /([^:]*):([\\S\\s]*)/g.exec(properties[i]);\n\n    if (!matches || matches.length < 3 || !matches[1]) {\n      --length;\n      continue;\n    }\n    obj[matches[1].trim()] = toPropertyObject(matches[2].trim());\n  }\n  return {styles: obj, length};\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n  const model = RGBA;\n\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model,\n    separator: \",\",\n    type: \"color\",\n    prefix: `${model}(`,\n    suffix: \")\",\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n  // [prefix, value, other]\n  const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) !== -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  const obj = toPropertyObject(value);\n\n  let arr = [value];\n  let separator = \",\";\n  let prefix = `${model}(`;\n  let suffix = `)${afterModel}`;\n\n  if (obj instanceof PropertyObject) {\n    separator = obj.separator;\n    arr = obj.value;\n    prefix += obj.prefix;\n    suffix = obj.suffix + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator,\n    model,\n    prefix,\n    suffix,\n  });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator,\n  });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n  const result = stringToRGBA(value);\n\n  return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[]): PropertyObject;\nexport function toPropertyObject(value: IObject<any>): IObject<any>;\nexport function toPropertyObject(value: string): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[]) {\n  if (!isString(value)) {\n    if (isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  let values = splitComma(value);\n\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1],\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n  const model = object.model;\n\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\",\n    });\n    const value = object.size() > 1 ? object : object.get(0);\n\n    result[model] = value;\n  } else {\n    object.forEach(obj => {\n      toObject(obj, result);\n    });\n  }\n  return result;\n}\n","import {\n  ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport { isObject, isArray, isString,\n  ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined } from \"@daybrush/utils\";\nimport { NameType } from \"./types\";\n\nfunction toInnerProperties(obj: IObject<string>) {\n  if (!obj) {\n    return \"\";\n  }\n  const arrObj = [];\n\n  for (const name in obj) {\n    arrObj.push(`${name.replace(/\\d/g, \"\")}(${obj[name]})`);\n  }\n  return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n  return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n  for (const name in from) {\n    const value = from[name];\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n      to[name] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name] = toValue ? getValue([name], value) : value;\n    } else if (type === ARRAY) {\n      to[name] = value.slice();\n    } else if (type === OBJECT) {\n      if (isObject(to[name]) && !isPropertyObject(to[name])) {\n        merge(to[name], value, toValue);\n      } else {\n        to[name] = clone(value, toValue);\n      }\n    } else {\n      to[name] = from[name];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n  return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n  const type = getType(value);\n\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === OBJECT) {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n*/\nclass Frame {\n  public properties: IObject<any>;\n  /**\n   * @param - properties\n   * @example\nconst frame = new Scene.Frame({\n\tdisplay: \"none\"\n\ttransform: {\n\t\ttranslate: \"50px\",\n\t\tscale: \"5, 5\",\n\t}\n});\n   */\n  constructor(properties: IObject<any> = {}) {\n    this.properties = {};\n    this.set(properties);\n  }\n  /**\n\t* get property value\n\t* @param {...Number|String|PropertyObject} args - property name or value\n\t* @example\n\tframe.get(\"display\") // => \"none\", \"block\", ....\n\tframe.get(\"transform\", \"translate\") // => \"10px,10px\"\n\t*/\n  public get(...args: NameType[]) {\n    const value = this.raw(...args);\n\n    return getValue(getPropertyName(args), value);\n  }\n\n  public raw(...args: NameType[]) {\n    return getValueByNames(getPropertyName(args), this.properties);\n  }\n  /**\n\t* remove property value\n\t* @param {...String} args - property name\n\t* @return {Frame} An instance itself\n\t* @example\n\tframe.remove(\"display\")\n\t*/\n  public remove(...args: NameType[]) {\n    const params = getPropertyName(args);\n    const length = params.length;\n\n    if (!length) {\n      return this;\n    }\n    const value = getValueByNames(params, this.properties, length - 1);\n\n    if (isObject(value)) {\n      delete value[params[length - 1]];\n    }\n    return this;\n  }\n  /**\n\t* set property\n\t* @param {...Number|String|PropertyObject} args - property names or values\n\t* @return {Frame} An instance itself\n\t* @example\n// one parameter\nframe.set({\n\tdisplay: \"none\",\n\ttransform: {\n\t\ttranslate: \"10px, 10px\",\n\t\tscale: \"1\",\n\t},\n\tfilter: {\n\t\tbrightness: \"50%\",\n\t\tgrayscale: \"100%\"\n\t}\n});\n\n// two parameters\nframe.set(\"transform\", {\n\ttranslate: \"10px, 10px\",\n\tscale: \"1\",\n});\n\n// three parameters\nframe.set(\"transform\", \"translate\", \"50px\");\n  */\n  public set(...args: any[]) {\n    const self = this;\n    const length = args.length;\n    const params = args.slice(0, -1);\n    const value = args[length - 1];\n\n    if (params[0] in ALIAS) {\n      self._set(ALIAS[params[0]], value);\n    } else if (length === 2 && isArray(params[0])) {\n      self._set(params[0], value);\n    } else if (isArray(value)) {\n      self._set(params, value);\n    } else if (isPropertyObject(value)) {\n      if (isRole(params)) {\n        self.set(...params, toObject(value));\n      } else {\n        self._set(params, value);\n      }\n    } else if (isObject(value)) {\n      for (const name in value) {\n        self.set(...params, name, value[name]);\n      }\n    } else if (isString(value)) {\n      if (isRole(params)) {\n        const obj = toPropertyObject(value);\n\n        if (isObject(obj)) {\n          self.set(...params, obj);\n        }\n        return this;\n      } else {\n        const {styles, length: stylesLength} = splitStyle(value);\n\n        for (const name in styles) {\n          self.set(...params, name, styles[name]);\n        }\n        if (stylesLength) {\n          return this;\n        }\n      }\n      self._set(params, value);\n    } else {\n      self._set(params, value);\n    }\n    return self;\n  }\n  /**\n\t* check that has property.\n\t* @param {...String} args - property name\n\t* @example\n\tframe.has(\"property\", \"display\") // => true or false\n\t*/\n  public has(...args: NameType[]) {\n    const params = getPropertyName(args);\n    const length = params.length;\n\n    if (!length) {\n      return false;\n    }\n    return !isUndefined(getValueByNames(params, this.properties, length));\n  }\n  /**\n\t* clone frame.\n\t* @return {Frame} An instance of clone\n\t* @example\n\tframe.clone();\n\t*/\n  public clone() {\n    const frame = new Frame();\n\n    return frame.merge(this);\n  }\n  /**\n\t* merge one frame to other frame.\n\t* @param - target frame.\n\t* @return {Frame} An instance itself\n\t* @example\n\tframe.merge(frame2);\n\t*/\n  public merge(frame: Frame) {\n    const properties = this.properties;\n    const frameProperties = frame.properties;\n\n    if (!frameProperties) {\n      return this;\n    }\n    merge(properties, frameProperties);\n\n    return this;\n  }\n  /**\n\t* Specifies an css object that coverted the frame.\n\t* @return {object} cssObject\n\t*/\n  public toCSSObject() {\n    const properties = this.get();\n    const cssObject: IObject<string> = {};\n\n    for (const name in properties) {\n      if (isRole([name], true)) {\n        continue;\n      }\n      const value = properties[name];\n\n      if (name === TIMING_FUNCTION) {\n        cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n          (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n        continue;\n      }\n      cssObject[name] = value;\n    }\n    const transform = toInnerProperties(properties[TRANSFORM_NAME]);\n    const filter = toInnerProperties(properties.filter);\n\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  }\n  /**\n\t* Specifies an css text that coverted the frame.\n\t* @return {string} cssText\n\t*/\n  public toCSS() {\n    const cssObject = this.toCSSObject();\n    const cssArray = [];\n\n    for (const name in cssObject) {\n      cssArray.push(`${name}:${cssObject[name]};`);\n    }\n    return cssArray.join(\"\");\n  }\n  private _set(args: NameType[], value: any) {\n    let properties = this.properties;\n    const length = args.length;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const name = args[i];\n\n      !(name in properties) && (properties[name] = {});\n      properties = properties[name];\n    }\n    if (!length) {\n      return;\n    }\n    properties[args[length - 1]] = isString(value) ? toPropertyObject(value) : value;\n  }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\nexport function dotNumber(a1: number, a2: number, b1: number, b2: number) {\n  return (a1 * b2 + a2 * b1) / (b1 + b2);\n}\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n  toFixed,\n  isFixed,\n  playCSS,\n  toId,\n  exportCSS,\n  getRealId,\n  makeId,\n  isPausedCSS,\n  isRole,\n  isInProperties,\n  getValueByNames,\n  isEndedCSS,\n  setPlayCSS,\n  find,\n  findIndex,\n} from \"./utils\";\nimport { dotValue, dotNumber } from \"./utils/dot\";\nimport {\n  START_ANIMATION,\n  PREFIX, THRESHOLD,\n  TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, NORMAL, INFINITE,\n  REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n  EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION, DATA_SCENE_ID, PLAY_CSS, SELECTOR, ROLES, CURRENT_TIME\n} from \"./consts\";\nimport { isObject, isArray, isUndefined, decamelize,\n  ANIMATION, fromCSS, addClass, removeClass, hasClass,\n  KEYFRAMES, requestAnimationFrame, isFunction,\n  IObject, $, splitComma, toArray, isString, IArrayFormat, TRANSFORM } from \"@daybrush/utils\";\nimport { NameType, RoleObject, AnimateElement, AnimatorState, SceneItemState, SceneItemOptions, EasingType } from \"./types\";\n\n\nfunction getNearTimeIndex(times: number[], time: number) {\n  const length = times.length;\n\n  for (let i = 0; i < length; ++i) {\n    if (times[i] === time) {\n      return [i, i];\n    } else if (times[i] > time) {\n      return [i > 0 ? i - 1 : 0, i];\n    }\n  }\n  return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: IObject<string | number>) {\n  const cssArray = [];\n\n  for (const name in properties) {\n    cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n  }\n  return cssArray.join(\"\");\n}\nfunction isPureObject(obj: any): obj is object  {\n  return isObject(obj) && obj.constructor === Object;\n}\nfunction getNames(names: IObject<any>, stack: string[]) {\n  let arr: string[][] = [];\n\n  if (isPureObject(names)) {\n    for (const name in names) {\n      stack.push(name);\n      arr = arr.concat(getNames(names[name], stack));\n      stack.pop();\n    }\n  } else {\n    arr.push(stack.slice());\n  }\n  return arr;\n}\nfunction updateFrame(names: IObject<any>, properties: IObject<any>) {\n  for (const name in properties) {\n    const value = properties[name];\n\n    if (!isPureObject(value)) {\n      names[name] = true;\n      continue;\n    }\n    if (!isObject(names[name])) {\n      names[name] = {};\n    }\n    updateFrame(names[name], properties[name]);\n  }\n  return names;\n}\nfunction addTime(times: number[], time: number) {\n  const length = times.length;\n  for (let i = 0; i < length; ++i) {\n    if (time < times[i]) {\n      times.splice(i, 0, time);\n      return;\n    }\n  }\n  times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n  const prevEntry = entries[entries.length - 1];\n\n  (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) && entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n  let entries = times.map(time => ([time, time]));\n  let nextEntries = [];\n\n  states.forEach(state => {\n    const iterationCount = state[ITERATION_COUNT] as number;\n    const delay = state[DELAY];\n    const playSpeed = state[PLAY_SPEED];\n    const direction = state[DIRECTION];\n    const intCount = Math.ceil(iterationCount);\n    const currentDuration = entries[entries.length - 1][0];\n    const length = entries.length;\n    const lastTime = currentDuration * iterationCount;\n\n    for (let i = 0; i < intCount; ++i) {\n      const isReverse =\n        direction === REVERSE || direction === ALTERNATE && i % 2 || direction === ALTERNATE_REVERSE && !(i % 2);\n\n      for (let j = 0; j < length; ++j) {\n        const entry = entries[isReverse ? length - j - 1 : j];\n        const time = entry[1];\n        const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n        const prevEntry = entries[isReverse ? length - j : j - 1];\n\n        if (currentTime > lastTime) {\n          if (j !== 0) {\n            const prevTime = currentDuration * i + (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n            const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n            addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n          }\n          break;\n        } else if (currentTime === lastTime && nextEntries[nextEntries.length - 1][0] === lastTime + delay) {\n          break;\n        }\n        addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n      }\n    }\n    // delay time\n    delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n    entries = nextEntries;\n    nextEntries = [];\n  });\n\n  return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemState> {\n  public times: number[] = [];\n  public items: IObject<Frame> = {};\n  public names: RoleObject = {};\n  public elements: AnimateElement[] = [];\n  private needUpdate: boolean = false;\n  private target: any;\n  private targetFunc: (frame: Frame) => void;\n\n  /**\n\t* @param - properties\n\t* @param - options\n\t* @example\n\tconst item = new SceneItem({\n\t\t0: {\n\t\t\tdisplay: \"none\",\n\t\t},\n\t\t1: {\n\t\t\tdisplay: \"block\",\n\t\t\topacity: 0,\n\t\t},\n\t\t2: {\n\t\t\topacity: 1,\n\t\t}\n\t});\n\t */\n  constructor(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    super();\n    this.load(properties, options);\n  }\n  public getDuration() {\n    const times = this.times;\n    const length = times.length;\n\n    return Math.max(this.state[DURATION], length === 0 ? 0 : times[length - 1]);\n  }\n  /**\n\t* get size of list\n\t* @return {Number} length of list\n\t*/\n  public size() {\n    return this.times.length;\n  }\n  public setDuration(duration: number) {\n    if (!duration) {\n      return this;\n    }\n    const originalDuration = this.getDuration();\n\n    if (originalDuration > 0) {\n      const ratio = duration / originalDuration;\n      const { times, items } = this;\n      const obj: IObject<Frame> = {};\n\n      this.times = times.map(time => {\n        const time2 = toFixed(time * ratio);\n\n        obj[time2] = items[time];\n\n        return time2;\n      });\n      this.items = obj;\n    }\n    super.setDuration(toFixed(duration));\n    return this;\n  }\n  public setId(id?: number | string) {\n    const state = this.state;\n\n    state.id = id || makeId(!!length);\n    const elements = this.elements;\n\n    if (elements.length && !state[SELECTOR]) {\n      const sceneId = toId(this.getId());\n\n      state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n      elements.forEach(element => {\n        element.setAttribute(DATA_SCENE_ID, sceneId);\n      });\n    }\n    return this;\n  }\n\n  /**\n\t* Set properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\nconsole.log(item.get(0, \"a\")); // \"b\"\n\t*/\n  public set(time: any, ...args: any[]) {\n    if (isArray(time)) {\n      const length = time.length;\n\n      for (let i = 0; i < length; ++i) {\n        const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n        this.set(t, time[i]);\n      }\n    } else if (isObject(time)) {\n      for (const t in time) {\n        const value = time[t];\n        const realTime = this.getUnitTime(t);\n\n        if (isNaN(realTime)) {\n          getNames(value, [t]).forEach(names => {\n            const innerValue = getValueByNames(names.slice(1), value);\n            const arr = isArray(innerValue) ? innerValue : [getValueByNames(names, this.target), innerValue];\n            const length = arr.length;\n\n            for (let i = 0; i < length; ++i) {\n              this.newFrame(`${i / (length - 1) * 100}%`).set(names, arr[i]);\n            }\n          });\n        } else {\n          this.set(realTime, value);\n        }\n      }\n    } else {\n      const value = args[0];\n\n      if (value instanceof Frame) {\n        this.setFrame(time, value);\n      } else if (value instanceof SceneItem) {\n        const delay = value.getDelay();\n        const realTime = this.getUnitTime(time);\n        const frames = value.toObject(!this.hasFrame(realTime + delay), realTime);\n\n        for (const frameTime in frames) {\n          this.set(frameTime, frames[frameTime]);\n        }\n      } else if (args.length === 1 && isArray(value)) {\n        value.forEach((item: any) => {\n          this.set(time, item);\n        });\n      } else {\n        const frame = this.newFrame(time);\n\n        frame.set(...args);\n      }\n    }\n    this.needUpdate = true;\n    return this;\n  }\n  /**\n\t* Get properties of the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} args property's name or properties\n\t* @return {Number|String|PropertyObejct} property value\n\t* @example\nitem.get(0, \"a\"); // item.getFrame(0).get(\"a\");\nitem.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n\t*/\n  public get(time: string | number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    return frame && frame.get(...args);\n  }\n  /**\n\t* remove properties to the sceneItem at that time\n\t* @param {Number} time - time\n\t* @param {...String|Object} [properties] - property names or values\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.remove(0, \"a\");\n\t*/\n  public remove(time: number, ...args: NameType[]) {\n    const frame = this.getFrame(time);\n\n    frame && frame.remove(...args);\n    this.needUpdate = true;\n    return this;\n  }\n  /**\n\t* Append the item or object at the last time.\n\t* @param - the scene item or item object\n\t* @return An instance itself\n\t* @example\nitem.append(new SceneItem({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n}));\nitem.append({\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\nitem.set(item.getDuration(), {\n\t0: {\n\t\topacity: 0,\n\t},\n\t1: {\n\t\topacity: 1,\n\t}\n});\n\t*/\n  public append(item: SceneItem | IObject<any>) {\n    this.set(this.getDuration(), item);\n    return this;\n  }\n  /**\n\t* Push the front frames for the time and prepend the scene item or item object.\n\t* @param - the scene item or item object\n\t* @return An instance itself\n\t*/\n  public prepend(item: SceneItem | IObject<any>) {\n    if (item instanceof SceneItem) {\n      const unshiftTime = item.getDuration() + item.getDelay();\n      const firstFrame = this.getFrame(0);\n      // remove first frame\n      this.removeFrame(0);\n      this.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  }\n   /**\n  * Push out the amount of time.\n  * @param - time to push\n\t* @return {}\n\t* @example\n  item.get(0); // frame 0\n  item.unshift(3);\n  item.get(3) // frame 0\n\t*/\n  public unshift(time: number) {\n    const { times, items } = this;\n    const obj: IObject<Frame> = {};\n\n    this.times = times.map(t => {\n      const time2 = toFixed(time + t);\n\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n  }\n   /**\n\t* Get the frames in the item in object form.\n\t* @return {}\n\t* @example\nitem.toObject();\n// {0: {display: \"none\"}, 1: {display: \"block\"}}\n\t*/\n  public toObject(isStartZero = true, startTime = 0): IObject<Frame> {\n    const obj: IObject<Frame> = {};\n    const delay = this.getDelay();\n\n    this.forEach((frame: Frame, time: number) => {\n      obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + startTime + time] = frame.clone();\n    });\n    return obj;\n  }\n   /**\n\t* Specifies an element to synchronize items' keyframes.\n\t* @param {string} selectors - Selectors to find elements in items.\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.setSelector(\"#id.class\");\n\t*/\n  public setSelector(target: string | boolean) {\n    this.setElement(target);\n  }\n  /**\n\t* Specifies an element to synchronize item's keyframes.\n  * @param - elements to synchronize item's keyframes.\n  * @param - Make sure that you have peusdo.\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n\t*/\n  public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n    const state = this.state;\n    let elements: AnimateElement[] = [];\n\n    if (!target) {\n      return this;\n    } else if (target === true || isString(target)) {\n      const selector = target === true ? `${state.id}` : target;\n      const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n      elements = toArray($(matches ? matches[1] : selector, true));\n      state[SELECTOR] = selector;\n    } else {\n      elements = (target instanceof Element) ? [target] : toArray(target);\n    }\n    if (!elements.length) {\n      return this;\n    }\n    this.elements = elements;\n    this.setId(this.getId());\n    this.target = elements[0].style;\n    this.targetFunc = (frame: Frame) => {\n      const attributes = frame.get(\"attribute\");\n\n      if (attributes) {\n        for (const name in attributes) {\n          elements.forEach(el => {\n            el.setAttribute(name, attributes[name]);\n          });\n        }\n      }\n      const cssText = frame.toCSS();\n\n      if (state.cssText !== cssText) {\n        state.cssText = cssText;\n\n        elements.forEach(el => {\n          el.style.cssText += cssText;\n        });\n        return frame;\n      }\n    };\n    return this;\n  }\n  public setTarget(target: any): this {\n    this.target = target;\n    this.targetFunc = (frame: Frame) => {\n      const obj = frame.get();\n\n      for (const name in obj) {\n        target[name] = obj[name];\n      }\n    };\n    return this;\n  }\n  /**\n\t* add css styles of items's element to the frame at that time.\n\t* @param {Array} properties - elements to synchronize item's keyframes.\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public setCSS(time: number, properties: string[]) {\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  }\n  public setTime(time: number | string, isTick?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isTick);\n\n    const iterationTime = this.getIterationTime();\n    const easing = this.getEasing() || parentEasing;\n    const frame = this.getNowFrame(iterationTime, easing);\n    const currentTime = this.getTime();\n\n    /**\n\t\t * This event is fired when timeupdate and animate.\n\t\t * @event SceneItem#animate\n\t\t * @param {Number} param.currentTime The total time that the animator is running.\n\t\t * @param {Number} param.time The iteration time during duration that the animator is running.\n\t\t * @param {Frame} param.frame frame of that time.\n\t\t */\n    this.trigger(\"animate\", {\n      frame,\n      currentTime,\n      time: iterationTime,\n    });\n    this.targetFunc && this.targetFunc(frame);\n    return this;\n  }\n  /**\n\t* update property names used in frames.\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.update();\n\t*/\n  public update() {\n    const names = this.names;\n    this.forEach(frame => {\n      updateFrame(names, frame.properties);\n    });\n    this.needUpdate = false;\n    return this;\n  }\n  /**\n\t* Create and add a frame to the sceneItem at that time\n\t* @param {Number} time - frame's time\n\t* @return {Frame} Created frame.\n\t* @example\nitem.newFrame(time);\n\t*/\n  public newFrame(time: string | number) {\n    let frame = this.getFrame(time);\n\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  }\n  /**\n\t* Add a frame to the sceneItem at that time\n\t* @param {Number} time - frame's time\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.setFrame(time, frame);\n\t*/\n  public setFrame(time: string | number, frame: Frame) {\n    const realTime = this.getUnitTime(time);\n\n    this.items[realTime] = frame;\n    addTime(this.times, realTime);\n    this.needUpdate = true;\n    return this;\n  }\n  /**\n\t* get sceneItem's frame at that time\n\t* @param {Number} time - frame's time\n\t* @return {Frame} sceneItem's frame at that time\n\t* @example\nconst frame = item.getFrame(time);\n\t*/\n  public getFrame(time: number | string) {\n    return this.items[this.getUnitTime(time)];\n  }\n  /**\n\t* check if the item has a frame at that time\n\t* @param {Number} time - frame's time\n\t* @return {Boolean} true: the item has a frame // false: not\n\t* @example\nif (item.hasFrame(10)) {\n\t// has\n} else {\n\t// not\n}\n\t*/\n  public hasFrame(time: number | string) {\n    return this.getUnitTime(time) in this.items;\n  }\n  /**\n\t* Check if keyframes has propery's name\n\t* @param - property's time\n\t* @return {boolean} true: if has property, false: not\n\t* @example\n  item.hasName([\"transform\", \"translate\"]); // true or not\n\t*/\n  public hasName(args: string[]) {\n    this.needUpdate && this.update();\n    return isInProperties(this.names, args, true);\n  }\n  /**\n\t* remove sceneItem's frame at that time\n\t* @param {Number} time - frame's time\n\t* @return {SceneItem} An instance itself\n\t* @example\nitem.removeFrame(time);\n\t*/\n  public removeFrame(time: number) {\n    const items = this.items;\n    const index = this.times.indexOf(time);\n\n    delete items[time];\n\n    // remove time\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    return this;\n  }\n  /**\n\t* merge frame of the previous time at the next time.\n  * @param - The time of the frame to merge\n  * @param - The target frame\n\t* @return {SceneItem} An instance itself\n\t* @example\n// getFrame(1) contains getFrame(0)\nitem.merge(0, 1);\n\t*/\n  public mergeFrame(time: number | string, frame: Frame) {\n    if (frame) {\n      const toFrame = this.newFrame(time);\n\n      toFrame.merge(frame);\n    }\n    return this;\n  }\n  /**\n\t* Get frame of the current time\n\t* @param {Number} time - the current time\n\t* @param {function} easing - the speed curve of an animation\n\t* @return {Frame} frame of the current time\n\t* @example\nlet item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n// opacity: 0.7; display:\"block\";\nconst frame = item.getNowFrame(1.7);\n\t*/\n  public getNowFrame(time: number, easing?: EasingType, isAccurate?: boolean) {\n    this.needUpdate && this.update();\n    const frame = new Frame();\n    const [left, right] = getNearTimeIndex(this.times, time);\n    let realEasing = this.getEasing() || easing;\n    let nameObject = this.names;\n\n    if (this.hasName([TIMING_FUNCTION])) {\n      const nowEasing = this._getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n      isFunction(nowEasing) && (realEasing = nowEasing);\n    }\n    if (isAccurate) {\n      const prevFrame = this.getFrame(time);\n      const prevNames = updateFrame({}, prevFrame.properties);\n\n      for (const name in ROLES) {\n        if (name in prevNames) {\n          prevNames[name] = nameObject[name];\n        }\n      }\n      nameObject = prevNames;\n    }\n    const names = getNames(nameObject, []);\n\n    names.forEach(properties => {\n      const value = this._getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    options && this.setOptions(options);\n    if (isArray(properties)) {\n      this.set(properties);\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (const time in properties) {\n        if (time === \"options\") {\n          continue;\n        }\n        this.set({\n          [time]: properties[time],\n        });\n      }\n    }\n    if (options && options[DURATION]) {\n      this.setDuration(options[DURATION]);\n    }\n    return this;\n  }\n  /**\n\t * clone SceneItem.\n\t * @return {SceneItem} An instance of clone\n\t * @example\n\t * item.clone();\n\t */\n  public clone() {\n    const item = new SceneItem();\n\n    item.setOptions(this.state);\n    this.forEach((frame: Frame, time: number) => {\n      item.setFrame(time, frame.clone());\n    });\n    return item;\n  }\n  /**\n\t * executes a provided function once for each scene item.\n\t * @param - Function to execute for each element, taking three arguments\n\t * @return {Keyframes} An instance itself\n\t */\n  public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n    const times = this.times;\n    const items = this.items;\n\n    times.forEach(time => {\n      callback(items[time], time, items);\n    });\n    return this;\n  }\n  public setOptions(options: Partial<SceneItemOptions> = {}) {\n    super.setOptions(options);\n    const { id, selector, elements, element, target } = options;\n\n    id && this.setId(id);\n    if (target) {\n      this.setTarget(target);\n    } else if (elements || element || selector) {\n      this.setElement(elements || element || selector);\n    }\n    return this;\n  }\n  /**\n\t* Specifies an css text that coverted the keyframes of the item.\n\t* @param {Array} [duration=this.getDuration()] - elements to synchronize item's keyframes.\n\t* @param {Array} [options={}] - parent options to unify options of items.\n\t* @example\nitem.setCSS(0, [\"opacity\"]);\nitem.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n\t*/\n  public toCSS(parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n    const itemState = this.state;\n    const selector = itemState[SELECTOR];\n\n    if (!selector) {\n      return \"\";\n    }\n    const originalDuration = this.getDuration();\n    itemState[DURATION] = originalDuration;\n    states.push(itemState);\n\n    const reversedStates = toArray(states).reverse();\n    const id = toId(getRealId(this));\n    const superParent = states[0];\n    const infiniteIndex = findIndex(reversedStates, state => {\n      return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n    }, states.length - 1);\n    const finiteStates = reversedStates.slice(0, infiniteIndex);\n    const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n      return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n    }, originalDuration);\n    const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n      return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n    }, 0);\n    const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n    const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n    const fillMode = superParent[FILL_MODE];\n    const direction = reversedStates[infiniteIndex][DIRECTION];\n    const cssText = makeAnimationProperties({\n      fillMode,\n      direction,\n      iterationCount,\n      delay: `${delay}s`,\n      name: `${PREFIX}KEYFRAMES_${id}`,\n      duration: `${duration / superParent[PLAY_SPEED]}s`,\n      timingFunction: easingName,\n    });\n    const selectors = splitComma(selector).map(sel => {\n      const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n      if (matches) {\n        return [matches[0], matches[1]];\n      } else {\n        return [sel, \"\"];\n      }\n    });\n\n    return `${selectors.map(([sel, peusdo]) => `${sel}.${START_ANIMATION}${peusdo}`)} {\n\t\t\t${cssText}\n\t\t}${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {\n      ${ANIMATION}-play-state: paused;\n    }\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{\n\t\t\t${this._toKeyframes(duration, finiteStates)}\n\t\t}`;\n  }\n  public exportCSS(duration?: number, options?: AnimatorState[]) {\n    if (!this.elements.length) {\n      return \"\";\n    }\n    const css = this.toCSS(duration, options);\n    const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n    !isParent && exportCSS(getRealId(this), css);\n    return css;\n  }\n  public pause() {\n    super.pause();\n    isPausedCSS(this) && this.pauseCSS();\n    return this;\n  }\n  public pauseCSS() {\n    this.elements.forEach(element => {\n      addClass(element, PAUSE_ANIMATION);\n    });\n    return this;\n  }\n  public endCSS() {\n    this.elements.forEach(element => {\n      removeClass(element, PAUSE_ANIMATION);\n      removeClass(element, START_ANIMATION);\n    });\n    setPlayCSS(this, false);\n    return this;\n  }\n  public end() {\n    isEndedCSS(this) && this.endCSS();\n    super.end();\n    return this;\n  }\n  /**\n\t* Play using the css animation and keyframes.\n\t* @param {boolean} [exportCSS=true] Check if you want to export css.\n\t* @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n\t* @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n\t* @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n\t* @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n\t* @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n\t* @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n\t* @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n\t* @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n\t* @example\nitem[PLAY_CSS]();\nitem[PLAY_CSS](false, {\n\tdirection: \"reverse\",\n\tfillMode: \"forwards\",\n});\n\t*/\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const elements = this.elements;\n    const length = elements.length;\n    const cssText = makeAnimationProperties(properties);\n\n    if (!length) {\n      return;\n    }\n    if (isPaused) {\n      elements.forEach(element => {\n        removeClass(element, PAUSE_ANIMATION);\n      });\n    } else {\n      elements.forEach(element => {\n        element.style.cssText += cssText;\n        if (hasClass(element, START_ANIMATION)) {\n          removeClass(element, START_ANIMATION);\n          requestAnimationFrame(() => {\n            requestAnimationFrame(() => {\n              addClass(element, START_ANIMATION);\n            });\n          });\n        } else {\n          addClass(element, START_ANIMATION);\n        }\n      });\n    }\n    return elements[0];\n  }\n  private _toKeyframes(duration: number, states: AnimatorState[]) {\n    const frames: IObject<string> = {};\n    const times = this.times.slice();\n\n    if (!times.length) {\n      return \"\";\n    }\n    const originalDuration = this.getDuration();\n    (!this.getFrame(0)) && times.unshift(0);\n    (!this.getFrame(originalDuration)) && times.push(originalDuration);\n    const entries = getEntries(times, states);\n    const lastEntry = entries[entries.length - 1];\n\n    // end delay time\n    lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n    let prevTime = -1;\n\n    return entries.map(([time, keytime]) => {\n      if (!frames[keytime]) {\n        frames[keytime] =\n          (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n          this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSS();\n      }\n\n      let frameTime = time / duration * 100;\n\n      if (frameTime - prevTime < THRESHOLD) {\n        frameTime += THRESHOLD;\n      }\n      prevTime = frameTime;\n      return `${frameTime}%{${time === 0 ? \"\" : frames[keytime]}}`;\n    }).join(\"\");\n  }\n  private _getNowValue(\n    time: number,\n    properties: string[],\n    left: number,\n    right: number,\n    isAccurate?: boolean,\n    easing?: EasingType,\n    usePrevValue?: boolean,\n  ) {\n    const times = this.times;\n    const length = times.length;\n\n    let prevTime: number;\n    let nextTime: number;\n    let prevFrame: Frame;\n    let nextFrame: Frame;\n\n    for (let i = left; i >= 0; --i) {\n      const frame = this.getFrame(times[i]);\n\n      if (frame.has(...properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    const prevValue = prevFrame && prevFrame.raw(...properties);\n\n    if (isAccurate && !isRole([properties[0]])) {\n      return prevTime === time ? prevValue : undefined;\n    }\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (let i = right; i < length; ++i) {\n      const frame = this.getFrame(times[i]);\n\n      if (frame.has(...properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    const nextValue = nextFrame && nextFrame.raw(...properties);\n\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    if (prevTime < 0) {\n      prevTime = 0;\n    }\n    return dotValue(time, prevTime, nextTime, prevValue, nextValue, easing);\n  }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { DATA_SCENE_ID, SELECTOR, DURATION } from \"./consts\";\nimport { playCSS, exportCSS, getRealId, makeId, isPausedCSS, isEndedCSS, setPlayCSS } from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport { AnimateElement, SceneState, SceneOptions, EasingType, AnimatorState, SceneItemOptions } from \"./types\";\n\n\n/**\n * manage sceneItems and play Scene.\n * @sort 1\n */\nclass Scene extends Animator<SceneState> {\n  /**\n  * version info\n  * @type {string}\n  * @example\n  * Scene.VERSION // #__VERSION__#\n  */\n  public static VERSION: string = \"#__VERSION__#\";\n  public items: IObject<Scene | SceneItem>;\n  /**\n  * @param - properties\n  * @param - options\n  * @example\n  const scene = new Scene({\n    item1: {\n      0: {\n        display: \"none\",\n      },\n      1: {\n        display: \"block\",\n        opacity: 0,\n      },\n      2: {\n        opacity: 1,\n      },\n    },\n    item2: {\n      2: {\n        opacity: 1,\n      },\n    }\n  });\n    */\n  constructor(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    super();\n    this.items = {};\n    this.load(properties, options);\n  }\n  public getDuration() {\n    const items = this.items;\n    let time = 0;\n\n    for (const id in items) {\n      const item = items[id];\n\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    }\n    return time;\n  }\n  public setDuration(duration: number) {\n    const items = this.items;\n    const sceneDuration = this.getDuration();\n\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDuration(duration);\n      }\n    } else {\n      const ratio = duration / sceneDuration;\n\n      for (const id in items) {\n        const item = items[id];\n\n        item.setDelay(item.getDelay() * ratio);\n        item.setDuration(item.getDuration() * ratio);\n      }\n    }\n    return this;\n  }\n  public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n  public getItem(name: number | string, index: number): SceneItem;\n  /**\n  * get item in scene by name\n  * @param - The item's name\n  * @param - If item is added as function, it can be imported via index.\n  * @return {Scene | SceneItem} item\n  * @example\n  const item = scene.getItem(\"item1\")\n  */\n  public getItem(name: number | string, index?: number) {\n    if (index != null) {\n      return (this.items[name] as Scene).getItem(index) as SceneItem;\n    }\n    return this.items[name];\n  }\n  /**\n  * create item in scene\n  * @param {} name - name of item to create\n  * @param {} options - The option object of SceneItem\n  * @return {} Newly created item\n  * @example\n  const item = scene.newItem(\"item1\")\n  */\n  public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): SceneItem {\n    if (name in this.items) {\n      return;\n    }\n    const item = new SceneItem();\n\n    this.setItem(name, item);\n    item.setOptions(options);\n\n    return item;\n  }\n  /**\n  * add a sceneItem to the scene\n  * @param - name of item to create\n  * @param - sceneItem\n  * @example\n  const item = scene.newItem(\"item1\")\n  */\n  public setItem(name: number | string, item: Scene | SceneItem) {\n    item.setId(name);\n    this.items[name] = item;\n    return this;\n  }\n  public setTime(time: number | string, isTick?: boolean, parentEasing?: EasingType) {\n    super.setTime(time, isTick);\n\n    const iterationTime = this.getIterationTime();\n    const items = this.items;\n    const easing = this.getEasing() || parentEasing;\n\n    for (const id in items) {\n      const item = items[id];\n\n      item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, easing);\n    }\n    return this;\n  }\n  /**\n   * executes a provided function once for each scene item.\n   * @param - Function to execute for each element, taking three arguments\n   * @return {Scene} An instance itself\n   */\n  public forEach(func: (item: Scene | SceneItem, name: string, items: IObject<Scene | SceneItem>) => void) {\n    const items = this.items;\n\n    for (const name in items) {\n      func(items[name], name, items);\n    }\n    return this;\n  }\n  public toCSS(duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n    const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n    const styles: string[] = [];\n    const state = this.state;\n\n    state[DURATION] = this.getDuration();\n\n    this.forEach(item => {\n      styles.push(item.toCSS(totalDuration, parentStates.concat(state)));\n    });\n    return styles.join(\"\");\n  }\n  /**\n   * Export the CSS of the items to the style.\n   * @return {Scene} An instance itself\n   */\n  public exportCSS(duration?: number, parentStates?: AnimatorState[]) {\n    const css = this.toCSS(duration, parentStates);\n\n    (!parentStates || !parentStates.length) && exportCSS(getRealId(this), css);\n    return css;\n  }\n  public append(item: SceneItem | Scene) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(getRealId(item), item);\n  }\n  public pauseCSS() {\n    return this.forEach(item => {\n      item.pauseCSS();\n    });\n  }\n  public pause() {\n    super.pause();\n\n    isPausedCSS(this) && this.pauseCSS();\n    this.forEach(item => {\n      item.pause();\n    });\n    return this;\n  }\n  public endCSS() {\n    const items = this.items;\n\n    for (const id in items) {\n      items[id].endCSS();\n    }\n    setPlayCSS(this, false);\n  }\n  public end() {\n    isEndedCSS(this) && this.endCSS();\n    super.end();\n    return this;\n  }\n  public addPlayClass(isPaused: boolean, properties = {}) {\n    const items = this.items;\n    let animtionElement: AnimateElement;\n\n    for (const id in items) {\n      const el = items[id].addPlayClass(isPaused, properties);\n\n      !animtionElement && (animtionElement = el);\n    }\n    return animtionElement;\n  }\n  /**\n  * Play using the css animation and keyframes.\n  * @param {boolean} [exportCSS=true] Check if you want to export css.\n  * @param {Object} [properties={}] The shorthand properties for six of the animation properties.\n  * @param {Object} [properties.duration] The duration property defines how long an animation should take to complete one cycle.\n  * @param {Object} [properties.fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n  * @param {Object} [properties.iterationCount] The iterationCount property specifies the number of times an animation should be played.\n  * @param {String} [properties.easing] The easing(timing-function) specifies the speed curve of an animation.\n  * @param {Object} [properties.delay] The delay property specifies a delay for the start of an animation.\n  * @param {Object} [properties.direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n  * @return {Scene} An instance itself\n  * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n  * @example\n  scene.playCSS();\n  scene.playCSS(false, {\n  direction: \"reverse\",\n  fillMode: \"forwards\",\n  });\n  */\n  public playCSS(isExportCSS = true, properties = {}) {\n    playCSS(this, isExportCSS, properties);\n    return this;\n  }\n  public set(properties: any, ...args: any[]): this;\n  public set(properties: any) {\n    this.load(properties);\n    return this;\n  }\n  public load(properties: any = {}, options = properties.options) {\n    if (!properties) {\n      return this;\n    }\n    const isSelector = options && options[SELECTOR] || this.state[SELECTOR];\n\n    for (const name in properties) {\n      if (name === \"options\") {\n        continue;\n      }\n      const object = properties[name];\n      let item;\n\n      if (object instanceof Scene || object instanceof SceneItem) {\n        this.setItem(name, object);\n        item = object;\n      } else if (isFunction(object) && isSelector) {\n        const elements = IS_WINDOW ? $(name, true) as IArrayFormat<AnimateElement> : ([] as AnimateElement[]);\n        const length = elements.length;\n        const scene = new Scene();\n\n        for (let i = 0; i < length; ++i) {\n          const id = makeId();\n\n          scene.newItem(`${i}`, {\n            id,\n            selector: `[${DATA_SCENE_ID}=\"${id}\"]`,\n            elements: elements[i],\n          }).load(object(i));\n        }\n        this.setItem(name, scene);\n        continue;\n      } else {\n        item = this.newItem(name);\n        item.load(object);\n      }\n      isSelector && item.setSelector(name);\n    }\n    this.setOptions(options);\n  }\n  public setOptions(options: Partial<SceneState> = {}): this {\n    super.setOptions(options);\n\n    if (options.selector) {\n      this.state[SELECTOR] = true;\n    }\n    return this;\n  }\n  public setSelector(target: string | boolean) {\n    const state = this.state;\n    const isSelector = target || state[SELECTOR];\n\n    state[SELECTOR] = target;\n    this.forEach((item, name) => {\n      item.setSelector(isSelector ? name : false);\n    });\n  }\n  public start(delay: number) {\n    super.start(delay);\n    this.forEach(item => {\n      item.start(delay);\n    });\n  }\n}\n\nexport default Scene;\n","import SceneItem from \"./SceneItem\";\nimport { IObject } from \"@daybrush/utils\";\nimport { TRANSFORM_NAME } from \"./consts\";\nimport Scene from \"./Scene\";\nimport { SceneOptions, SceneItemOptions, AnimatorState, PresetState } from \"./types\";\n\n/**\n * @namespace presets\n */\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n  return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n  return new SceneItem(properties, options).play();\n}\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @private\n * @param - property to set effect\n * @param - values of 100%\n * @example\n// import {set, blink} from \"scenejs\";\n// set(\"opacity\", [0, 1, 0], {duration: 2});\nScene.set(\"opacity\", [0, 1, 0], {duration: 2});\n\n// Same\nScene.blink({duration: 2});\n\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t}\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nfunction set(property: string | string[], values: any[], options: Partial<AnimatorState>) {\n  const item = new SceneItem({}, options);\n  const length = values.length;\n\n  for (let i = 0; i < length; ++i) {\n    item.set(`${i / (length - 1) * 100}%`, property, values[i]);\n  }\n  return item;\n}\n\n/**\n * Make a zoom in effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 0] start zoom\n * @param {number}[options.to = 1] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {set, zoomIn} from \"scenejs\";\n// zoomIn({duration: 2});\nScene.zoomIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(0)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(1)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomIn({ from = 0, to = 1 }: Partial<PresetState>) {\n  return set([TRANSFORM_NAME, \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a zoom out effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {number} [options.from = 1] start zoom\n * @param {number}[options.to = 0] end zoom\n * @param {number} options.duration animation's duration\n * @example\n// import {zoomOut} from \"scenejs\";\n// zoomOut({duration: 2});\nScene.zoomOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"transform\": \"scale(1)\",\n\t},\n\t\"100%\": {\n\t\t\"transform\": \"scale(0)\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function zoomOut({ from = 1, to = 0 }: Partial<PresetState>) {\n  return set([TRANSFORM_NAME, \"scale\"], [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe in effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"-100%\"] start position\n * @param {number|string}[options.to = \"0%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeIn} from \"scenejs\";\n// wipeIn({property: \"left\", duration: 2});\nScene.wipeIn({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"-100%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"0%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeIn({ from = \"-100%\", to = \"0%\", property = \"left\" }: Partial<PresetState>) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Make a wipe out effect.\n * @memberof presets\n * @param {AnimatorOptions} options\n * @param {string|string[]} [options.property = \"left\"] position property\n * @param {number|string} [options.from = \"0%\"] start position\n * @param {number|string}[options.to = \"100%\"] end position\n * @param {number} options.duration animation's duration\n * @example\n// import {wipeOut} from \"scenejs\";\n// wipeOut({property: \"left\", duration: 2});\nScene.wipeOut({property: \"left\", duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\t\"left\": \"0%\",\n\t},\n\t\"100%\": {\n\t\t\"left\": \"100%\",\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function wipeOut({ from = \"0%\", to = \"100%\", property = \"left\" }: Partial<PresetState>) {\n  return set(property, [from, to], arguments[0]);\n}\n\n/**\n * Use the property to create an effect.\n * @memberof presets\n * @param {Scene.SceneItem} item1 - Item that end effect\n * @param {Scene.SceneItem} item2 - Item that start effect\n * @param {AnimatorOptions} options\n * @param {object} options.from The starting properties of item1 and end properties of item2\n * @param {object} options.to The starting properties of item2 and end properties of item1\n * @param {number} options.duration animation's duration\n * @param {number} [options.time] start time of item1 <br/> <strong>default: item1.getDuration() - duration</strong>\n * @example\n// import {transition} from \"scenejs\";\ntransition(item1, item2, {\n\tfrom: {\n\t\topacity: 1,\n\t},\n\tto: {\n\t\topacity: 0,\n\t},\n\tduration: 0.1,\n});\n\n// Same\nitem1.set({\n\t[item1.getDuration() - 0.1]: {\n\t\topacity: 1,\n\t},\n\t[item1.getDuration()]: {\n\t\topacity: 0,\n\t}\n});\nitem2.set({\n\t0: {\n\t\topacity: 0,\n\t},\n\t0.1: {\n\t\topacity: 1,\n\t}\n});\n */\nexport function transition(item1: SceneItem, item2: SceneItem, {\n  from,\n  to,\n  duration = item1.getDuration(),\n  time = Math.max(item1.getDuration() - duration, 0),\n}: { from: IObject<any>, to: IObject<any>, duration?: number, time?: number }) {\n  item1.set({\n    [time]: to,\n    [time + duration]: from,\n  });\n  item2.set({\n    0: from,\n    [duration]: to,\n  });\n}\n\n/**\n * Make a fade in effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeIn} from \"scenejs\";\n// fadeIn({duration: 2});\nScene.fadeIn({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"100%\": {\n\t\topacity: 1,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeIn({ from = 0, to = 1 }: Partial<PresetState>) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n\n/**\n * Make a fade out effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 1] start opacity\n * @param {number}[options.to = 0] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {fadeOut} from \"scenejs\";\n// fadeOut({duration: 2});\nScene.fadeOut({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function fadeOut({ from = 1, to = 0 }: Partial<PresetState>) {\n  return set(\"opacity\", [from, to], arguments[0]);\n}\n/**\n * Make a blinking effect.\n * @memberof presets\n * @param {AnimatorState} options\n * @param {number} [options.from = 0] start opacity\n * @param {number}[options.to = 1] end opacity\n * @param {number} options.duration animation's duration\n * @example\n// import {blink} from \"scenejs\";\n// blink({duration: 2});\nScene.blink({duration: 2});\n// Same\nnew SceneItem({\n\t\"0%\": {\n\t\topacity: 0,\n\t},\n\t\"50%\": {\n\t\topacity: 1,\n\t},\n\t\"100%\": {\n\t\topacity: 0,\n\t}\n}, {\n\tduration: 2,\n});\n */\nexport function blink({ from = 0, to = 1 }: Partial<PresetState>) {\n  return set(\"opacity\", [from, to, from], arguments[0]);\n}\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n  (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","ALIAS","easing","FIXED","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","TRANSFORM_NAME","OPTIONS","EVENTS","RGB","RGBA","HSL","HSLA","COLOR_MODELS","FUNCTION","PROPERTY","ARRAY","OBJECT","STRING","NUMBER","UNDEFINED","IS_WINDOW","window","doc","document","prefixes","getCrossBrowserProperty","property","styles","body","documentElement","style","length","i","name","TRANSFORM","FILTER","ANIMATION","KEYFRAMES","replace","isUndefined","value","isObject","isArray","Array","isString","isFunction","splitComma","text","matches","match","map","str","trim","splitBracket","exec","prefix","suffix","splitUnit","unit","NaN","parseFloat","camelize","all","letter","toUpperCase","decamelize","separator","letter2","toLowerCase","toArray","slice","call","now","Date","getTime","requestAnimationFrame","firstTime","raf","webkitRequestAnimationFrame","mozRequestAnimationFrame","bind","callback","currTime","setTimeout","hexToRGBA","hex","h","r","parseInt","substring","g","b","a","isNaN","stringToRGBA","color","charAt","join","indexOf","arr","colorArr","hsl","s","l","Math","floor","abs","rgb","c","x","m","round","hslToRGBA","$","selectors","multi","querySelectorAll","querySelector","addClass","element","className","classList","add","removeClass","remove","reg","RegExp","addEvent","el","type","listener","options","addEventListener","removeEvent","removeEventListener","events","once","this","n","_on","forEach","func","_this","push","_i","args","off","callback2","callbacks","index","splice","data","event","target","currentTarget","apply","y1","y2","t","t2","x1","x2","dx","cubic","solveFromX","max","min","easingName","count","position","time","level","STEP_START","steps","STEP_END","LINEAR","bezier","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","setOptions","split","newOptions","model","PropertyObject","v","clone","toValue","isPropertyObject","num","names","properties","roles","isCheckTrue","role","isInProperties","item","isActivate","state","isPaused","isEnded","id","css","styleId","toId","styleElement","innerText","insertAdjacentHTML","selector","random","getId","setId","makeId","isExportCSS","getPlayState","isPausedCSS","addPlayClass","setTime","exportCSS","duration","getDuration","isZeroDuration","isFinite","animationend","setPlayCSS","finish","animationstart","trigger","on","animationiteration","elapsedTime","currentTime","iterationCount","setIteration","addAnimationEvent","setPlayState","defaultIndex","setters","getters","_super","delay","fillMode","direction","playSpeed","iterationTime","iteration","tickTime","prevTime","playState","tslib_1","getter","setter","parent","curveArray","setDuration","setEasing","getActiveDuration","Infinity","toTime","animator","to","pause","tick","start","end","isTick","activeDuration","getUnitTime","calculate","isDelay","getIterationTime","toFixed","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","iteraiontCount","isReverse","isFiniteDuration","Animator","constructor","prototype","EventTrigger","arrayToPropertyObject","result","values","toPropertyObject","afterModel","arrayToColorObject","obj","stringToBracketObject","arrObj","merge","from","getType","getValue","set","raw","getPropertyName","getValueByNames","params","self","_set","isRole","object","size","get","toObject","stylesLength","Frame","frame","frameProperties","cssObject","toInnerProperties","toCSSObject","cssArray","a1","a2","b1","b2","v1","dot","a1Type","color1","color2","value1","value2","model1","dotArray","colorModel","dotColor","type1","type2","isFunction1","isFunction2","dotObject","v2","dotNumber","Object","stack","isPureObject","concat","getNames","pop","updateFrame","entries","keytime","prevEntry","load","times","originalDuration","ratio_1","items_1","obj_1","time2","items","elements","sceneId_1","setAttribute","realTime","this_1","innerValue","newFrame","setFrame","SceneItem","getDelay","frames","hasFrame","frameTime","needUpdate","getFrame","unshiftTime","firstFrame","removeFrame","unshift","prepend","isStartZero","startTime","setElement","Element","targetFunc","attributes","cssText","toCSS","getComputedStyle","fromCSS","parentEasing","getEasing","getNowFrame","addTime","update","isAccurate","left","right","realEasing","nameObject","hasName","nowEasing","_getNowValue","prevNames","keyframes","setTarget","parentDuration","states","itemState","defalutValue","reversedStates","reverse","getRealId","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","makeAnimationProperties","timingFunction","sel","peusdo","_toKeyframes","pauseCSS","isEndedCSS","endCSS","playCSS","contains","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","addEntry","lastEntry","usePrevValue","nextTime","prevFrame","nextFrame","has","prevValue","undefined","nextValue","ratio","dotValue","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","getItem","setItem","parentStates","totalDuration","animtionElement","isSelector","Scene","scene","newItem","setSelector","isProperty","isFixedProperty","fixed","alias","play","_b","_c","_d","item1","item2","others"],"mappings":"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"}